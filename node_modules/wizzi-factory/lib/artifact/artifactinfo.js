var assert = require('assert');
var path = require('path');
var util = require('util');
var verify = require('wizzi-core').verify;
var interpolate = require('wizzi-core').interpolate;
var ModelInfo = require("../model/modelinfo");
var error = require('wizzi-core').error;
var log = require('wizzi-core').log(module);

/*
    ArtifactInfo is a wrapper around an @artifact@ element of a @wfjob@ wizzi model.
    The config parameter has already been preprocessed by the lib/production/wfjob.js module.
*/
var ArtifactInfo = function (config) {
    this.name = config.name;
    this.options = config.options;
    if (verify.isObject(config.model)) {
        this.modelInfo = new ModelInfo(config.model);
        this.contextInfos = null;
    } else {
        // this is a code write artifact
        this.contextInfos = [];
        config.contexts.forEach(function (item) {
            this.contextInfos.push(new ModelInfo(item))
        });
        this.modelInfo = null;
    }
    this.gen = config.gen;
    this.dest = config.dest;
    this.genWriters = [];
};

// called by the production manager
ArtifactInfo.prototype.initialize = function (productionManager) {
    this.___state = productionManager.___state;
    if (this.modelInfo) {
        this.modelInfo.state(productionManager.___state);
    } else {
        this.contextInfos.forEach(function (item) {
            item.state(productionManager.___state);
        });
    }
    // merge production and artifact options
    var save = this.options || {};
    this.options = productionManager.options;
    for (key in save) {
        this.options[key] = save[key];
    }
    // WARN this works only after options merge
    // log.info('Initialized artifact: ' + this.toString());
}

/*
    An ArtifactInfo may have one or many genWriters.
    It has many genWriters when:
    . is a collection artifact and has a genWriter for each collection item
    . its model.src has wildcards and must be globbed
*/
ArtifactInfo.prototype.addGenWriter = function (ctx) {
    this.genWriters.push(ctx);
}

ArtifactInfo.prototype.isWizziModelArtifact = function () {
    return this.modelInfo != null &&
           this.modelInfo.getContextCollection() == null &&
           verify.isObject(this.gen) &&
           verify.isNotEmpty(this.gen.generator) &&
           this.gen.generator !== 'swig';
}

ArtifactInfo.prototype.isWizziCollectionArtifact = function () {
    return this.modelInfo != null &&
           verify.isObject(this.modelInfo.getContextCollection()) &&
           verify.isObject(this.gen);
}

ArtifactInfo.prototype.isSwigArtifact = function () {
    return this.modelInfo != null &&
           verify.isObject(this.gen) &&
           this.gen.generator === 'swig';
}

ArtifactInfo.prototype.isCodeWriteArtifact = function () {
    return this.modelInfo == null &&
           verify.isObject(this.gen) &&
           verify.isNotEmpty(this.gen.generator);
}

ArtifactInfo.prototype.isFinalArtifact = function () {
    return this.modelInfo != null &&
           (verify.isObject(this.gen) === false ||
           verify.isEmpty(this.gen.generator));
}

/*
    Returns a collection of infos for persisting to file
    the artifacts of a collection artifact.
    [
        {
            artifactInfo: ..., // the artifact config info (this object)
            genWriter: ..., // contains the generated text
            filepath: ... // to filepath to write to
        }
    ]
*/
ArtifactInfo.prototype.getItemsToPersistToFile = function () {

    var _this = this;
    var result = [];

    this.genWriters.forEach(function (genWriter) {

        var srcPath = genWriter.srcPath; 

        if (_this.isWizziCollectionArtifact()) {

            var collItemInstance = genWriter.model; // Required for resolving filepath.
            assert.strictEqual(verify.isObject(collItemInstance), true, 'genWriter.model must contain an object.');
            var ipcontext = _this.getInterpolatePathNameContext(collItemInstance);
            var filepath = interpolate(_this.getFilepath(srcPath), ipcontext, { delimiter: '{}' })
            // console.log('ArtifactInfo.prototype.getCollectionContexts.filepath', filepath);
            var gc = {
                artifactInfo: _this,
                genWriter: genWriter,
                filepath: filepath
            };
            result.push(gc);

        } else {

            var filepath = _this.getFilepath(srcPath);
            // console.log('srcPath, filepath', srcPath, filepath)
            var gc = {
                artifactInfo: _this,
                genWriter: genWriter,
                filepath: filepath
            };
            result.push(gc);
        }

    });

    return result;

}

/*
    Input: an item of the model collection that drives the generation
           of this artifact.
*/
ArtifactInfo.prototype.getInterpolatePathNameContext = function (collItemInstance) {
    // console.log('ArtifactInfo.getInterpolatePathNameContext.collItemInstance', util.inspect(collItemInstance, { depth: 2 }));
    if (this.isWizziCollectionArtifact()) {
        var _this = this;
        var result = {};
        var contextCollInfo = this.modelInfo.getContextCollection();
        contextCollInfo.pathTemplateValues.forEach(function (item) {
            if (item.function)
                result[item.token] = collItemInstance[item.function]();
            else if (item.attribute)
                result[item.token] = collItemInstance[item.attribute];
            else
                error('path template value must contain an attribute or a function value, token: ' + item.token);
        });
        // console.log('ArtifactInfo.getInterpolatePathNameContext.result', util.inspect(result, { depth: 2 }));
        return result;
    } else {
        this.error("Method getInterpolatePathNameContext called on an artifact that is not a wizzi collection artifact.");
    }
}

ArtifactInfo.prototype.getFilepath = function (srcPath) {
    var dest = this.dest;
    var opt = this.options;
    var msg = ['ArtifactInfo.getFilepath', 'config.dest'];

    if (verify.isNotEmpty(dest.fullpath)) {
        return dest.fullpath; // ok its enough, dest contains a fullpath
    }

    if (verify.isEmpty(dest.folder)) this.error('getFilepath require a not empty dest.folder');

    srcPath = dest.path ? dest.path : srcPath;

    if (verify.isEmpty(srcPath)) this.error('getFilepath require a not empty srcPath.');

    var destpath = path.join(dest.folder, srcPath);
    
    if (this.isFinalArtifact() === false) {
        var ext = dest.extension || '.js'; // hardcoded default
        ext = verify.startsWith(ext, '.') ? ext : '.' + ext;
        if (ext.toLowerCase() !== '.ittf') {
            if (destpath.substr(-5, 5).toLowerCase() === '.ittf') {
                destpath = destpath.substr(0, destpath.length - 5);
            }
        }
        ext = verify.endsWith(destpath, ext) ? '' : this.options.dotgExtensionPrefix ? '.g' + ext : ext;
        destpath = destpath + ext;
    }
    
    if (verify.isAbsolutePath(destpath)) return destpath;

    if (verify.isEmpty(dest.baseFolder)) this.error('When dest.folder is a relative path, getFilepath require a not empty dest.baseFolder value.');
    return path.join(dest.baseFolder, destpath);
}

ArtifactInfo.prototype.error = function (message) {
    throw new Error("wizzi-factory.ArtifactInfo.Error message: " + message + '\nArtifact:' + this.toString());
}

ArtifactInfo.prototype.dump = function () {
    throw new Error('Not implemented');
}

ArtifactInfo.prototype.relPath = function () {
    if (this.modelInfo)
        return this.modelInfo.srcFullPath().substr(this.options.basedir.length + 1);
    else
        return 'null';
}

ArtifactInfo.prototype.toString = function () {
    // console.log('ArtifactInfo.options', util.inspect(this.options, { depth: 1 }));
    return [
        'model.src:', this.relPath(),
        'gen.generator:', this.gen ? this.gen.generator : ''
    ].join(' ');
}

ArtifactInfo.isArtifactConfig = function (test) {
    if (!test) return false;
    if (!verify.isObject(test.options)) return false;
    if (!verify.isObject(test.model) && !verify.isObject(test.contexts)) return false;
    if (!verify.isObject(test.dest)) return false;
    if (!verify.isObject(test.gen)) return false;
    return true;
}

ArtifactInfo.isArtifactInstance = function (test) {
    throw new Error('Not implemented');
}

module.exports = ArtifactInfo;
