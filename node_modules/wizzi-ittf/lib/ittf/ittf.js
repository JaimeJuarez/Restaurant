var path = require('path');
var log = require("wizzi-core").log(module, { tofile: true });
var file = require("wizzi-core").file;
var verify = require("wizzi-core").verify;
var ProductionContext = require("wizzi-core").ProductionContext;
var ModelProvider = require('./provider');
var LoadContext = require('./loadContext');
var IttfDocumentModel = require('./ittfDocumentModel');
var includer = require('./includer');
var mixer = require('./mixer');
var appender = require('./appender');
var evaluator = require('./evaluator');

var md = module.exports = {};

md.load = function (filepath, requestContext, callback) {

    if (typeof callback !== 'function') {
        throw new Error("Ittf.load. A callback is required");
    }

    requestContext = normalizeRequestContext(requestContext);

    var provider = ModelProvider.createFromFilepath(filepath, requestContext);

    provider.get(
        {
            from: 'store',
            filepath: provider.getPrimaryModelFilepath() // clumsy but what to do ???
                                                     // it is so for the primaryModel
                                                     // for mixed models (see ./mixer) parameters are different
        },
        function (err, ittfDocumentModel) {
            // log.info('ittf.load.got.ittfDocumentModel', ittfDocumentModel);
            // console.log("ittf.load.includes");
            includer(ittfDocumentModel, provider, function (err, includeResult) {
                mixer(includeResult, provider, function (err, mixResult) {
                    ittfDocumentModel = appender(mixResult);
                    ittfDocumentModel = evaluator(ittfDocumentModel, requestContext);
                    ittfDocumentModel.loadContext = provider.loadContext;
                    callback(null, ittfDocumentModel);
                });
            });
        }
    );
}

md.loadFromString = function (content, requestContext, callback) {

    // console.log('ittf.loadFromString.content', content);
    var loadContext = new LoadContext();
    var ittfDocumentModel = new IttfDocumentModel(loadContext, requestContext.modelContext);
    ittfDocumentModel.load(content, function (err, ittfDocumentModel) {
        loadContext.addIttfDocumentModel('text://', null, ittfDocumentModel, {});
        includer(ittfDocumentModel, provider, function (err, includeResult) {
            mixer(includeResult, provider, function (err, mixResult) {
                ittfDocumentModel = appender(mixResult);
                ittfDocumentModel = evaluator(ittfDocumentModel, requestContext);
                // console.log('ittf.loadFromString.ittfDocumentModel', ittfDocumentModel);
                callback(null, ittfDocumentModel);
            });
        });
    });
}

function normalizeRequestContext(context) {
    if (verify.isObject(context)) {
        if (verify.isObject(context.productionContext)) {
            if (verify.isObject(context.modelContext)) {
                if (verify.isObject(context.artifactContext)) {
                    return context;
                } else {
                    context.artifactContext = context.modelContext;
                    return context;
                }
            } else {
                context.modelContext = {};
                context.artifactContext = {};
                return context;
            }
        } else {
            return {
                modelContext: context,
                artifactContext: context,
                productionContext: new ProductionContext()
            }
        }
    } else {
        return {
            modelContext: {},
            artifactContext: {},
            productionContext: new ProductionContext()
        }
    }
}

