var util = require('util');
var path = require('path');
var url = require('url');
var log = require("wizzi-core").log(module, { tofile: true });
var ModelStore = require('./store').ModelStore;
var IttfDocumentModel = require("./ittfDocumentModel");
var LoadContext = require('./loadContext');

/*
    // is created for each IttfLoading
    modelProvider : {
        schema: String,
        ittfSource: {
            path: uri,
            storeKind: String ['repo'|'filesystem'], 
            storeDB: String 
        },
        store: Object, // new ModelStore(ittfSource)
        loadContext: Object, // new LoadContext(),
        productionContext: Object, // context.productionContext
        _modelsCache: Array // of IttfDocumentModel
    }
*/

var md = module.exports = {};

md.modelProvider = function (options) {
    this.schema = options.schema; // A store instance manages ittf documents of one schema
    this.store = options.store;
    this.loadContext = options.loadContext;
    this.productionContext = options.productionContext;
    this.ittfSource = options.ittfSource;
    this._modelsCache = {};
}

md.modelProvider.prototype.get = function (options, callback) {
    if (options.from === 'store') {
        return this.getFromStore(options, callback);
    } else {
        return this.getFromString(options, callback);
    }
}

md.modelProvider.prototype.getPrimaryModelFilepath = function () {
    return this.ittfSource.path;
}

md.modelProvider.prototype.getFromStore = function (options, callback) {
    var loadContext = this.loadContext;
    var productionContext = this.productionContext;
    var self = this;
    this.resolvePath(options, function (err, uri) {
        // console.log('modelProvider.getFromStore.uri', uri);
        var ret = null, model = self._modelsCache[uri];
        if (model) {
            ret = model.clone();
            productionContext.addIttfDocument(uri, model.inputContent);
            var ittfDocumentData = loadContext.addIttfDocumentModel(uri, self.schema, ret, options);
            ret.sourceKey = ittfDocumentData.sourceKey;
            ret.modelKey = ittfDocumentData.modelKey;
            ret.$schema = self.schema;
            return callback(null, ret);
        } else {
            self.store.getModelContent(uri, function (err, modelContent) {
                if (modelContent) {
                    model = new IttfDocumentModel(
                        loadContext
                    );
                    model.load(modelContent);
                    model.uri = uri;
                    loadContext.addIttfSource(uri, model)
                    self._modelsCache[uri] = model;
                    ret = model.clone();
                    productionContext.addIttfDocument(uri, modelContent);
                    var ittfDocumentData = loadContext.addIttfDocumentModel(uri, self.schema, ret, options);
                    ret.sourceKey = ittfDocumentData.sourceKey;
                    ret.modelKey = ittfDocumentData.modelKey;
                    ret.$schema = self.schema;
                    // console.log('modelProvider.ret.$schema', ret.$schema);
                    // throw new Error('stop');
                    return callback(null, ret);
                } else {
                    throw new Error('Ittf.modelProvider.getFromStore. Failed to load model ' + uri);
                    // return callback(null, null);
                }
            });
        }
    });
}

md.modelProvider.prototype.resolvePath = function (options, callback) {
    var filepath = options.filepath,
        relpath = options.relpath;

    if (typeof filepath === 'undefined') {
        if (typeof relpath === 'undefined' || relpath[0] === '/') {
            throw new Error('A "relpath" options with a relative path is required to load an ITTF document, or use the "filepath" option');
        }
        var basedir = options.basedir;
        if (typeof basedir === 'undefined') {
            throw new Error('A "basedir" option is required to load an ITTF document using a relative path');
        }
        filepath = path.join(basedir, relpath);
    }

    var self = this;
    this.tryExists(filepath, this.schema, function (err, result) {
        // log.info('modelProvider.resolvePath.tryExists.filepath/schema/result', filepath, self.scchema, result);
        if (result.found) {
            // console.log('resolvePath.result.filepath', result.filepath);
            return callback(null, result.filepath);
        } else {
            if (typeof relpath === 'undefined') {
                throw new Error('Cannot load the ITTF document "' + filepath + '". File not found.\nBase dir:' + path.dirname(filepath) + '\nrelPath:' + relpath);
            }
            result = self.resolvePathInTFolders(path.dirname(filepath), relpath, function (err, result) {
                if (result.found)
                    return callback(null, result.filepath);
                else
                    throw new Error('Cannot load the ITTF document "' + filepath + '". File not found');
            });
        }
    });
}

md.modelProvider.prototype.resolvePathInTFolders = function (basePath, relPath, callback) {
    var filepath = path.join(basePath, 't', relPath);
    var self = this;
    this.tryExists(filepath, this.schema, function (err, result) {
        if (result.found)
            return callback(null, result);
        else {
            basePath = path.dirname(basePath);
            if (basePath.length > 3) { // TODO limit to app root
                return self.resolvePathInTFolders(basePath, relPath, callback);
            } else {
                return callback(null, { found: false });
            }
        }
    });
}

md.modelProvider.prototype.tryExists = function (test, schema, callback) {
    // log.info('modelProvider.resolvePath.tryExists.starting.test/schema', test, schema);
    var self = this;
    this.store.isFile(test, function (err, result) {
        // console.log('tryExists 2', result)
        if (result) {
            return callback(null, { found: true, filepath: test });
        } else {
            if (test.toLowerCase().substr(-5, 5) !== '.ittf') {
                if (schema) { // try implicit schema extension
                    self.store.isFile(test + '.' + schema + '.ittf', function(err, result) {
                        if (result) {
                            return callback(null, { found: true, filepath: test + '.' + schema + '.ittf' });
                        } else { // try ittf extension
                            self.store.isFile(test + '.ittf', function(err, result) {
                                if (result){
                                    return callback(null, { found: true, filepath: test + '.ittf' });
                                } else { // NOT FOUND
                                    return callback(null, { found: false });
                                }
                            });
                        }
                    });
                } else {
                    return callback(null, { found: false });
                }
            } else {
                return callback(null, { found: false });
            }
        }
    });
}

md.modelProvider.prototype.getFromString = function (options, callback) {
    throw new Error("modelProvider.getFromString not implemented");
}

// Static methods

md.createFromFilepath = function (filepath, context) {

    var fileUrl = url.parse(filepath);
    if (typeof fileUrl.protocol !== 'string') {
        throw new Error("Ittf.Provider.createFromFilepath. filepath must have a protocol (must be an absolute url) : " + filepath);
    }

    // log.info('Ittf.Provider.createFromFilepath.filepath/url', filepath, fileUrl);
    var protocol = fileUrl.protocol.substr(-1, 1) === ':'
        ? fileUrl.protocol.substr(0, fileUrl.protocol.length - 1)
        : fileUrl.protocol;
    var ittfSource = {};
    if (protocol.length === 1) {
        ittfSource.storeKind = 'filesystem';
        ittfSource.path = filepath;
    } else if (protocol === 'repo') {
        ittfSource.storeKind = 'repo';
        ittfSource.storeDB = fileUrl.host;
        ittfSource.path = fileUrl.path.substr(1);
    } else {
        throw new Error('Error Ittf.Provider.createFromFilepath. Unknown protocol: ' + protocol);
    }
    // log.info('Ittf.Provider.createFromFilepath.ittfSource', ittfSource);

    return new md.modelProvider({
        schema: inferSchema(filepath),
        ittfSource: ittfSource,
        store: new ModelStore(ittfSource),
        loadContext: new LoadContext(),
        productionContext: context.productionContext
    });

}

function inferSchema(filepath) {
    var name = path.basename(filepath).toLowerCase();
    var parts = name.split('.');
    // console.log('parts', name, parts[parts.length - 1], parts[parts.length - 2]);
    var schema = parts.length > 1 && parts[parts.length - 1] === 'ittf' ? parts[parts.length - 2] : null;
    // console.log('ittf.inferSchema', filepath, schema);
    return schema;
}