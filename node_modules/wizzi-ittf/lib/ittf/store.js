var util = require('util');
var path = require('path');
var log = require("wizzi-core").log(module, {tofile: true});

var md = module.exports = {};

var file = null;
var fsImpl = null;
var repoapi = {};
var repopath = null;
var repoImpl = null;

md.ModelStore = function (ittfSource) {
    if (ittfSource.storeKind === 'filesystem') {
        if (fsImpl === null) {
            file = require("wizzi-core").file;
            fsImpl = new FilesystemStore();
            
        }
        this.storeImpl = fsImpl;
    } else if (ittfSource.storeKind === 'repo') {
        throw new Error("Mongodb repo not implemented.");
        if (repoImpl === null) {
            repopath = require('../repo/util/repopath');
            require('../repo/api/document')(repoapi);
            repoImpl = new RepoStore();
        }
        this.storeImpl = repoImpl;
    } else {
        throw new Error('Error Ittf.ModelStore.ctor. Unknown storeKind: ' + ittfSource.storeKind);
    }
    this.storeKind = fsImpl.storeKind;
}
md.ModelStore.prototype.isFile = function (filepath, callback) {
    this.storeImpl.isFile(filepath, callback);
}
md.ModelStore.prototype.getModelContent = function (filepath, callback) {
    this.storeImpl.getModelContent(filepath, callback);
}

var FilesystemStore = function () {
    this.storeKind = 'filesystem';
}
FilesystemStore.prototype.isFile = function (filepath, callback) {
    callback(null, file.isFile(filepath));
}
FilesystemStore.prototype.getModelContent = function (filepath, callback) {
    callback(null, file.read(filepath));
}

var RepoStore = function () {
    this.storeKind = 'repo';
}
RepoStore.prototype.isFile = function (documentPath, callback) {
    var repoPath = repopath(documentPath);
    repoPath.path = repoPath.path.substr(1);
    log.info('RepoStore.isFile.repoPath', repoPath);
    repoapi.getDocument(
        repoPath.userName,
        repoPath.projectName,
        repoPath.path,
        {},
        function (err, result) {
            log.info('RepoStore.isFile.result', result);
            callback(null, result != null);
        });
}
RepoStore.prototype.getModelContent = function (documentPath, callback) {
    var repoPath = repopath(documentPath);
    repoPath.path = repoPath.path.substr(1);
    log.info('RepoStore.getModelContent.repoPath', repoPath);
    repoapi.readDocument(
        repoPath.userName,
        repoPath.projectName,
        repoPath.path,
        function (err, result) {
            callback(null, result);
        });
}