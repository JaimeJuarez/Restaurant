/*
    An IttfDocumentModel is a parsed IttfDocument.
    The load method parses an IttfDocument content into a 'nodes' array.
    In the build-up of an Ittf model, the same Ittf document can be mixed 
    or included many times, so it is cloned when mixed or included.
    // TODO Actualy the nodes do not require cloning,
    //      only passed $args, and evalContext require separated objects.
    //      But on each cloned node is set the cloned IttfDocumentModel
*/

var util = require('util');
var log = require("wizzi-core").log(module);
var lexer = require('./lexer');
var parser = require('./parser');

/*
    IttfDocumentModel : {
        loadContext: Object, // The loadContext object
        inputContent : String, // The source text
        lines: Array, // lexed source lines
        nodes: Array, // parsed source nodes
        sourceKey: String, // key to the source info of the IttfDocument
        modelKey: String // key to the cloned IttfDocumentModel
        
        ... these are set by the mixer, on the cloned object
        $mixer: String // the modelKey of the calling node
        $args: String // the value of the calling node
        $argArray: String // the $arg array of the calling node
        
        ... these are set by the parser on the original model, then cloned
        $params: // the node value of the $params node, if declared
    }
*/

function IttfDocumentModel(loadContext) {
    this.loadContext = loadContext;
}

IttfDocumentModel.prototype.load = function (ittfSourceTextContent) {
    this.inputContent = ittfSourceTextContent;
    var lines = lexer(this.inputContent);
    this.nodes = parser(lines, this);
}

//IttfDocumentModel.prototype.setCallContext = function (callContext) {
//    this.callContext = callContext;
//}

IttfDocumentModel.prototype.setKeys = function (sourceKey, modelKey) {
    this.sourceKey = sourceKey;
    this.modelKey = modelKey;
}

IttfDocumentModel.prototype.clone = function () {
    var clonedModel = new IttfDocumentModel(this.loadContext);
    clonedModel.uri = this.uri;
    clonedModel.inputContent = this.inputContent;
    if (this.$params) {
        clonedModel.$params = this.$params;
    }
    clonedModel.nodes = this._cloneNodes(this.nodes, null, clonedModel);
    return clonedModel;
}

IttfDocumentModel.prototype._cloneNodes = function (nodes, parent, clonedModel) {
    var self = this;
    var clnode, clnodes = [];
    nodes.forEach(function (node) {
        clnode = {
            name: node.name,
            value: node.value,
            tagSuffix: node.tagSuffix,
            row: node.row,
            col: node.col,
            parent: parent,
            model: clonedModel
        };
        clnode.childs = self._cloneNodes(node.childs, clnode, clonedModel);
        clnodes.push(clnode);
    });
    return clnodes;
}

module.exports = IttfDocumentModel;
