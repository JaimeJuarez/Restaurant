// generator: wizzi-lab-artifatcs/lib/js/module/gen/main.js, utc time: Thu, 22 Oct 2015 19:39:39 GMT
var md = module.exports = {};
md.name = 'wizzi-legacy';
var path = require('path');
var verify = require('wizzi-core').verify;
var GenWriter = require('wizzi-core').GenWriter;
var StringWriter = require('wizzi-core').stringwriter;
var options = require('wizzi-core').options;
var log = require('wizzi-core').log(module);
var file = require('wizzi-core').file;
/**
     expose js model type
*/
md.jsModelType = require('./lib/wizzi/models/js-model.g');
/**
     local wizzi models
*/
// async load a WizziModel of type 'js' from an IttfDocument

md.js = function(ittfDocumentPath, context, callback) {
    var loader = md.getWizziModelLoader('js');
    loader.load(ittfDocumentPath, context, function(err, wizziModel) {
        if (err) {
            return callback(err, null);
        }
        callback(null, wizziModel);
    });
};
// async load a WizziModel of type 'html' from an IttfDocument

md.html = function(ittfDocumentPath, context, callback) {
    var loader = md.getWizziModelLoader('html');
    loader.load(ittfDocumentPath, context, function(err, wizziModel) {
        if (err) {
            return callback(err, null);
        }
        callback(null, wizziModel);
    });
};
// async load a WizziModel of type 'css' from an IttfDocument

md.css = function(ittfDocumentPath, context, callback) {
    var loader = md.getWizziModelLoader('css');
    loader.load(ittfDocumentPath, context, function(err, wizziModel) {
        if (err) {
            return callback(err, null);
        }
        callback(null, wizziModel);
    });
};
/**
     local artifact generatore
*/
// async generate a js/module artifact
// the context parameter may contain a __data property that will be
// set on the genWriter data property

md.jsModule = function(ittfDocumentPathOrContext, context, callback) {
    if (verify.isString(ittfDocumentPathOrContext)) {
        // async load the wizziModelInstance
        md.js(ittfDocumentPathOrContext, context, function(err, wizziModelInstance) {
            if (err) {
                return callback(err, null);
            }
            // async generate
            md.doArtifactGeneration(wizziModelInstance, ittfDocumentPathOrContext, 'js/module', context, callback);
        });
    }
    else {
        // async generate
        md.doArtifactGeneration(ittfDocumentPathOrContext, 'Unknown', 'js/module', context, callback);
    }
};
// async generate a html/document artifact
// the context parameter may contain a __data property that will be
// set on the genWriter data property

md.htmlDocument = function(ittfDocumentPathOrContext, context, callback) {
    if (verify.isString(ittfDocumentPathOrContext)) {
        // async load the wizziModelInstance
        md.html(ittfDocumentPathOrContext, context, function(err, wizziModelInstance) {
            if (err) {
                return callback(err, null);
            }
            // async generate
            md.doArtifactGeneration(wizziModelInstance, ittfDocumentPathOrContext, 'html/document', context, callback);
        });
    }
    else {
        // async generate
        md.doArtifactGeneration(ittfDocumentPathOrContext, 'Unknown', 'html/document', context, callback);
    }
};
// async generate a css/document artifact
// the context parameter may contain a __data property that will be
// set on the genWriter data property

md.cssDocument = function(ittfDocumentPathOrContext, context, callback) {
    if (verify.isString(ittfDocumentPathOrContext)) {
        // async load the wizziModelInstance
        md.css(ittfDocumentPathOrContext, context, function(err, wizziModelInstance) {
            if (err) {
                return callback(err, null);
            }
            // async generate
            md.doArtifactGeneration(wizziModelInstance, ittfDocumentPathOrContext, 'css/document', context, callback);
        });
    }
    else {
        // async generate
        md.doArtifactGeneration(ittfDocumentPathOrContext, 'Unknown', 'css/document', context, callback);
    }
};
// async generate a json/document artifact
// the context parameter may contain a __data property that will be
// set on the genWriter data property

md.jsonDocument = function(ittfDocumentPath, context, callback) {
    // async load the ittfModel
    ittf.loadModel(ittfDocumentPath, context, function(err, ittfModel) {
        if (err) {
            return callback(err, null);
        }
        // async generate
        md.doArtifactGeneration(ittfModel, ittfDocumentPath, 'json/document', context, callback);
    });
};
/**
     expose wizzi models, transformations and artifacts to the wizzi factory
*/
var wizziModelLoaders = {};
var wizziSchemaObjects = {};
// retrieve a WizziModelLoader by its wizzischema name

md.getWizziModelLoader = function(schemaName) {
    if (wizziModelLoaders[schemaName]) {
        return wizziModelLoaders[schemaName];
    }
    else {
        var modulePath = path.resolve(__dirname, './lib/wizzi/models/' + schemaName + '-loader.g.js');
        if (file.exists(modulePath)) {
            var ret = require('./lib/wizzi/models/' + schemaName + '-loader.g');
            wizziModelLoaders[schemaName] = ret;
            return ret;
        }
        else {
            log.warn('Wizzi model loader module path do not exists: ' + modulePath);
            return null;
        }
    }
};
// retrieve a WizziSchemaObject object from its JSON representation

md.getWizziSchemaObject = function(schemaName) {
    if (wizziSchemaObjects[schemaName]) {
        return wizziSchemaObjects[schemaName];
    }
    else {
        var modulePath = path.resolve(__dirname, './lib/wizzi/models/' + schemaName + '-schema.g.json');
        if (file.exists(modulePath)) {
            var ret = require('./lib/wizzi/models/' + schemaName + '-schema.g.json');
            wizziSchemaObjects[schemaName] = ret;
            return ret;
        }
        else {
            log.warn('Wizzi schema object module path do not exists: ' + modulePath);
            return null;
        }
    }
};
var modelTransformers = {};
// async execute a model transformation

md.doModelTransformation = function(model, transformationName, context, callback) {
    var transformer = md.getModelTransformer(transformationName);
    if (transformer == null) {
        throw new Error('doModelTransformation. Cannot find transformer ' + transformationName);
    }
    else {
        new transformer.trans(model, context, callback);
    }
};
// retrieve a ModelTransformer by its name

md.getModelTransformer = function(transformerName) {
    if (modelTransformers[transformerName]) {
        return modelTransformers[transformerName];
    }
    else {
        var modulePath = path.resolve(__dirname, './lib/artifacts/' + transformerName + '/trans/main.js');
        if (file.exists(modulePath)) {
            var ret = require('./lib/artifacts/' + transformerName + '/trans/main');
            modelTransformers[transformerName] = ret;
            return ret;
        }
        else {
            log.warn('Transformer module path do not exists: ' + modulePath);
            return null;
        }
    }
};
var artifactGenerators = {};
// async execute an artifact generation
// the context parameter may contain a __data property that is
// set on the genWriter options.data property

md.doArtifactGeneration = function doArtifactGeneration(wizziModelInstance, sourceFilepathInfo, generationPath, context, callback) {
    var genWriter = new GenWriter({ options: options(null, { data: context.__data }) });
    var generator = md.getArtifactGenerator(generationPath);
    try {
        new generator.gen(wizziModelInstance, genWriter);
    } catch (ex) {
        ex.message = 'doArtifactGeneration exception. In file ' + sourceFilepathInfo + '.\n' + ex.message;
        throw ex;
    }
    var sw = new StringWriter();
    genWriter.toStream(sw);
    callback(null, sw.toString());
};
// retrieve an ArtifactGenerator by its name

md.getArtifactGenerator = function(generationPath) {
    var generator = artifactGenerators[generationPath];
    if (!generator) {
        var modulePath = path.resolve(__dirname, './lib/artifacts/' + generationPath + '/gen/main.js');
        if (file.exists(modulePath)) {
            generator = artifactGenerators[generationPath] = require('./lib/artifacts/' + generationPath + '/gen/main');
        }
        else {
            log.warn('module path do not exists: ' + modulePath);
        }
    }
    return generator;
};
