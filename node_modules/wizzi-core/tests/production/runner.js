var util = require('util');
var expect = require('expect.js')

var ArtifactInfo = require('../../lib/artifact/artifactinfo');
var Runner = require('../../lib/production/runner');
var pman = require('./mocks/productionManagerImpl');

var artifactConfigs = require('../data/artifactConfigs');

describe("artifactInfo of type final single file", function () {

    it("should have one artifact result, matching the source file", function (done) {

        var artifactInfo_FinalSingle = new ArtifactInfo(artifactConfigs.artifact_FinalSingle);
        artifactInfo_FinalSingle.initialize(pman);
        var runner_FinalSingle = new Runner(artifactInfo_FinalSingle);
        runner_FinalSingle.run(function (err, result) {
            // console.log(util.inspect(result, { depth: 2 }));
            expect(result.genContexts.length).to.be(1);
            expect(result.genContexts[0].getContent().trim())
                .to.be("<function name=\"getHello\"></function>");
            done();
        });

    });

});

describe("artifactInfo of type final folder", function () {

    it("should have two generated artifacts", function (done) {

        var artifactInfo_FinalFolder = new ArtifactInfo(artifactConfigs.artifact_FinalFolder);
        artifactInfo_FinalFolder.initialize(pman);
        var runner_FinalFolder = new Runner(artifactInfo_FinalFolder);
        runner_FinalFolder.run(function (err, result) {
            console.log(util.inspect(result, { depth: 2 }));
            expect(result.genContexts.length).to.be(2);
            done();
        });
    });

});

describe("artifactInfo of type swig single file", function () {

    it("Should have one artifact result", function (done) {

        var artifactInfo_SwigSingle = new ArtifactInfo(artifactConfigs.artifact_SwigSingle);
        artifactInfo_SwigSingle.initialize(pman);
        var runner_SwigSingle = new Runner(artifactInfo_SwigSingle);
        runner_SwigSingle.run(function (err, result) {
            //console.log('runner_SwigSingle.err', util.inspect(err, { depth: 2 }));
            //console.log('runner_SwigSingle.result', util.inspect(result, { depth: 2 }));
            expect(result.genContexts.length).to.be(1);
            expect(result.genContexts[0].getContent().trim())
                .to.be("<function name=\"getTestRdbms\"></function>");
            done();
        });
    });

});

describe("artifactInfo of type swig folder", function () {

    it("should have two generated artifacts", function (done) {
        var artifactInfo_SwigFolder = new ArtifactInfo(artifactConfigs.artifact_SwigFolder);
        artifactInfo_SwigFolder.initialize(pman);
        var runner_SwigFolder = new Runner(artifactInfo_SwigFolder);
        runner_SwigFolder.run(function (err, result) {
            //console.log('runner_SwigFolder.err', util.inspect(err, { depth: 2 }));
            //console.log('runner_SwigFolder.result', util.inspect(result, { depth: 2 }));
            expect(result.genContexts.length).to.be(2);
            done();
        });
    });

});

describe("artifactInfo of type wmt model single file", function () {

    it("Should have one artifact result", function (done) {

        var artifactInfo_WizziObjectSingle = new ArtifactInfo(artifactConfigs.artifact_WizziObjectSingle);
        artifactInfo_WizziObjectSingle.initialize(pman);
        var runner_WizziObjectSingle = new Runner(artifactInfo_WizziObjectSingle);
        runner_WizziObjectSingle.run(function (err, result) {
            //console.log('runner_WizziObjectSingle.err', util.inspect(err, { depth: 2 }));
            //console.log('runner_WizziObjectSingle.result', util.inspect(result, { depth: 2 }));
            expect(result.genContexts.length).to.be(1);
            expect(result.genContexts[0].getContent().trim())
                .to.be("<function name=\"getTestRdbms\"></function>");
            done();
        });

    });
   
});

