var util = require("util");
var path = require("path");
var verify = require("wizzi-core").verify;
var log = require("wizzi-core").log(module);
var file = require("wizzi-core").file;

var ModelInfo = function (config) {
    this.config = config;
    this.schema = config.schema;
    var contexts = [];
    if (verify.isArray(config.contexts)) {
        config.contexts.forEach(function (item) {
            contexts.push(new ModelInfo(item));
        });
    }
    this.contexts = contexts;
    this.transformers = config.transformers;
    this.coll = config.coll;
    if (config.modelRef && config.modelRef.exportName) this.exportName = config.modelRef.exportName;
    this.___state = null; // pman state
    if (verify.isString(config.src) === false) {
        this.error("config.src must be a string");
    } else {
        config.src = file.unixifyPath(config.src);
        if (verify.isString(config.cwd)) config.cwd = file.unixifyPath(config.cwd);
        var ndx = config.src.indexOf('/*');
        // console.log('ModelInfo.config.src', config.cwd, config.src, ndx);
        if (ndx > -1) {
            config.srcPattern = config.src.substr(ndx);
            config.src = config.src.substr(0, ndx);
            // console.log(config.src, config.srcPattern);
        }
    }
    if (verify.isAbsolutePath(config.src) === false && verify.isEmpty(config.cwd) === true)
        this.error("when config.src is not an absolute path, config.cwd must be a not empty string");
}

ModelInfo.prototype.src = function (value) {
    if (typeof value === 'undefined')
        return this.config.src;
    else
        this.config.src = value;
}

ModelInfo.prototype.srcFullPath = function (value) {
    return verify.isAbsolutePath(this.config.src)
        ? this.config.src
        : path.join(this.config.cwd, this.config.src);
}

ModelInfo.prototype.srcGlobPath = function (value) {
    var globPattern = this.config.srcPattern || '/**/*.*'
    if (globPattern.substr(0, 1) !== '/') globPattern = '/' + globPattern;
    return this.srcFullPath() + globPattern;
}

ModelInfo.prototype.state = function (value) {
    if (typeof value === 'undefined')
        return this.___state;
    else {
        if (verify.isObject(value) === false) {
            throw new Error("value parameter must be an object.");
        }
        if (verify.isObject(value.pman) === false) {
            throw new Error("value parameter must contain an object in the pman property.");
        }
        this.___state = value;
        this.config.___state = value;
    }
}

ModelInfo.prototype.hasContext = function () {
    return verify.isArray(this.config.contexts) && this.config.contexts.length > 0;
}

ModelInfo.prototype.getContextCollection = function () {
    if (this.hasContext()) {
        for (var i = 0; i < this.config.contexts.length; i++) {
            var item = this.config.contexts[i];
            if (verify.isObject(item.coll)) return item.coll;
        }
    }
    return null;
}

ModelInfo.prototype.getModelInfos = function () {
    if (this.isDirectory()) {
        var ret = [], files = this.getFiles();
        for (var i = 0; i < files.length; i++) {
            var fileInfo = files[i];
            var mi = this.clone();
            mi.src(fileInfo.relpath);
            mi.state(this.___state);
            ret.push(mi);
        }
        return ret;
    } else {
        return [this];
    }
}

ModelInfo.prototype.getSource = function () {
    if (this.exists() === false) {
        throw new Error("Cannot get source. File not found : " + this.srcFullPath());
    }
    return file.read(this.srcFullPath());
}

ModelInfo.prototype.getSources = function () {
    if (this.exists() === false) {
        throw new Error("Cannot get sources. Directory not found : " + this.srcFullPath());
    }
    if (this.isDirectory() === false) {
        throw new Error("Cannot get sources. Is not a directory : " + this.srcFullPath());
    }
    var ret = [];
    var files = this.getFiles(); // deep search
    for (var i = 0; i < files.length; i++) {
        var fileInfo = files[i];
        var content = file.read(fileInfo.fullpath);
        ret.push({
            fullpath: fileInfo.fullpath,
            relpath: fileInfo.relpath,
            content: content
        });
    }
    return ret;
}

ModelInfo.prototype.getFiles = function (relativePath) {
    if (this.exists() === false) {
        throw new Error("Cannot get files. Directory not found : " + this.srcFullPath());
    }
    if (this.isDirectory() === false) {
        throw new Error("Cannot get files. Is not a directory : " + this.srcFullPath());
    }
    var ret = [],
        srcFullPath = this.srcFullPath(),
        srcGlobPath = this.srcGlobPath(),
        files = file.getGlobbedFiles(srcGlobPath);

    // console.log('srcGlobPath', srcGlobPath, files, files.length);

    for (var i = 0; i < files.length; i++) {
        var fileInfo = files[i];
        if (fileInfo.indexOf('\_debug\\') > -1) continue;
        var fullpath = fileInfo; /* path.join(srcFullPath, fileInfo); */
        var relpath = relPath(fullpath, this.config.cwd);
        ret.push({
            fullpath: fullpath,
            relpath : relpath,
            });
    }
    return ret;
}

ModelInfo.prototype.exists = function () {
    return file.exists(this.srcFullPath());
}

ModelInfo.prototype.isDirectory = function () {
    return file.isDirectory(this.srcFullPath());
}

ModelInfo.prototype.clone = function () {
    var newconfig = {
        cwd: this.config.cwd,
        src: this.config.src,
        schema: this.config.schema,
        contexts: this.config.contexts,
        coll: this.config.coll
    };
    var ret = new ModelInfo(newconfig);
    ret.state(this.state());
    return ret;
}

ModelInfo.prototype.error = function (message) {
    throw new Error('Error. wizzi-factory.ModelInfo: ' + message + '.\n' + this.toString());
}

ModelInfo.prototype.toString = function () {
    return 'config: ' + util.inspect(this.config, { depth: 2 });
}

function relPath(fullpath, basedir) {
    return fullpath.substr(basedir.length + 1);
}

module.exports = ModelInfo;