var util = require('util');
var assert = require('assert');
var f_dateutil = require('./functions/dateutil');
var f_verify = require('./functions/verify');

function log(label, obj) {
    // console.log(label, util.inspect(obj, { depth: 2 }));
}

/*
    jscontext is polimorphic. It may have one of three state:
    1) nodeContext.               The context values of the build up of the final ittfModel tree.
    2) ittfDocumentModelContext.  The context values of the scope of one ittfDocumentModel.
    3) globalContext.             The global context values visible to all ittfDocumentModel(s) 
                                  and to the ittfModel tree build up statements.
*/

var md = module.exports = {}

md.context = function(parent)
{
    this.parent = parent; // jscontext for global values
    this.functions = {};
    this.values = {};
    this.declares = {};
    if (!parent) {
        for (k in knownCallables) {
            this.decl(k, knownCallables[k]);
        }
    }
}
md.context.prototype.decl = function (name, init) {
    this.declares[name] = true;
    if (typeof init !== 'undefined') {
        this.values[name] = init;
    }
}
md.context.prototype.undecl = function (name, init) {
    if (this.declares[name] = true)
        delete this.declares[name];
    if (this.values[name] = true)
        delete this.values[name];
}
md.context.prototype.declFunction = function (name, node) {
    this.functions[name] = node;
}
md.context.prototype.setValue = function (name, value) {
    this.decl(name, value);
}
md.context.prototype.setValues = function (values) {
    values = values || {};
    for (k in values) {
        this.decl(k, values[k]);
    }
}
md.context.prototype.put = function (name, value) {
    if (this.declares[name] === true) {
        this.values[name] = value;
        return true;
    } else {
        var ok = this.parent ? this.parent.put(name, value) : false;
        if (ok === false) throw new Error('Not declared: ' + name);
    }
}
md.context.prototype.get = function (name) {
    if (this.declares[name] === true) {
        return this.values[name];
    } else if (this.parent) {
        return this.parent.get(name);
    } else {
        console.log('Esprima.jscontext.get parent ', this.parent)
        console.log('Esprima.jscontext.get declares ', this.declares)
        console.log('Esprima.jscontext.get ittf_state ', this.ittf_state)
        console.log('Esprima.jscontext.get currentIttfDocumentModelKey ', this.currentIttfDocumentModelKey)
        throw new Error('In esprima context. Not declared: ' + name);
    }
}
md.context.prototype.getGlobalValues = function () {
    if (this.parent) {
        return this.parent.values;
    } else {
        return this.values;
    }
}
md.context.prototype.getFunction = function (name) {
    return this.functions[name];
}
md.context.prototype.beginExpr = function () {
    this.exprPending = {};
}
md.context.prototype.endExpr = function () {
    for (k in this.exprPending) {
        this.put(k, this.exprPending[k]);
    }
}
md.context.prototype.push = function () {
    var ret = new md.context(this);
    return ret;
}
md.context.prototype.pop = function () {
    this.clear();
}
md.context.prototype.clear = function () {
    this.functions = {};
    this.values = {};
    this.declares = {};
    if (!this.parent) {
        for (k in knownCallables) {
            this.decl(k, knownCallables[k]);
        }
    }
}

/*
    Set the evalHelper before starting the jsrunner
*/
md.context.prototype.set_ittf_evalHelper = function (evalHelper) {
    // this jscontext has already been ctor injected into the evalHelper
    this.evalHelper = evalHelper;
    this.ittf_state = ittfStates.nodeContext; // starting jscontext state
    this.currentIttfDocumentModelKey = null;
}

/*
    set the state of this jscontext to nodeContext.
*/
md.context.prototype.set_NodeContext = function () {
    // console.log('set_NodeContext', this.ittf_state, ittfStates.nodeContext);
    if (this.ittf_state === ittfStates.nodeContext) return;

    if (this.nodeContextValues) {
        // set the values of this jscontext to the nodeContext values
        this.declares = this.nodeContextDeclares;
        this.values = this.nodeContextValues;
    } else {
        throw new Error('wizzi-ittf.esprima.jscontext.ittf_set_NodeContext Sequence error: this.nodeContextValues must be an object.');
    }

    // set the state of the context
    this.ittf_state = ittfStates.nodeContext;
    this.currentIttfDocumentModelKey = null;
}

/*
    set the state of this jscontext to globalContext.
*/
md.context.prototype.set_GlobalContext = function () {
    // console.log('set_GlobalContext', this.ittf_state, ittfStates.globalContext);
    if (this.ittf_state === ittfStates.globalContext) return;

    if (this.ittf_state === ittfStates.nodeContext && !this.nodeContextValues) {
        // save the node context values
        this.nodeContextDeclares = this.declares;
        this.nodeContextValues = this.values;
    }

    // The global context values are the parent values of this jscontext.
    this.declares = this.parent.declares;
    this.values = this.parent.values;

    // do not break the command chain 
    this.setValue('$', this.evalHelper);

    // set the state of the context
    this.ittf_state = ittfStates.globalContext;
    this.currentIttfDocumentModelKey = null;
}
/*
    Transforms this in the value context of the ittfDocumentModel of key 'modelKey'
*/
md.context.prototype.set_IttfDocumentModelEvalContext = function (modelKey, line) {
    // console.log('set_IttfDocumentModelEvalContext', this.currentIttfDocumentModelKey, modelKey);
    if (this.currentIttfDocumentModelKey === modelKey) return;

    if (this.ittf_state === ittfStates.nodeContext && !this.nodeContextValues) {
        // save the node context values
        this.nodeContextDeclares = this.declares;
        this.nodeContextValues = this.values;
    }

    // retrieve the context of the ittfModel of key 'modelKey'
    var modelContext = this.evalHelper.getIttfDocumentModelEvalContext(modelKey, line);

    // set the values of 'this' esprima context
    modelContext = modelContext || {};
    this.declares = {};
    for (k in modelContext) {
        // console.log('ittf_set_IttfDocumentModelEvalContext.decl', modelKey, k /*, modelContext[k] */);
        this.decl(k, modelContext[k]);
    }
    this.values = modelContext;

    // do not break the command chain
    this.setValue('$', this.evalHelper);

    // set the state of the context
    this.ittf_state = ittfStates.modelContext;
    this.currentIttfDocumentModelKey = modelKey;
}
md.context.prototype.get_currentIttfDocumentModelKey = function () {
    return this.currentIttfDocumentModelKey;
}

var knownCallables = {
    'console': console,
    'Object': Object,
    'Math': Math,
    'path': require('path'),
    'dateUtil': f_dateutil,
    'verify': f_verify
};

var ittfStates = {
    nodeContext: 0,  // ittf tree nodes building context
    modelContext: 1,  // single model document context
    globalContext: 2   // global context (in the parent context)
};

