// generator: wizzi-lab-artifatcs/lib/js/module/gen/main.js, utc time: Thu, 22 Oct 2015 19:39:41 GMT
var util = require('util');
var path = require('path');
var async = require('async');
var verify = require('wizzi-core').verify;
var log = require('wizzi-core').log(module);
var error = require('wizzi-core').error;
// wfjob class
wfjob = function(productionManager, config) {
    this.productionManager = productionManager;
    this.config = config;
    this.options = config.options;
    this.wfjobSrc = config.wfjob.src;
    log.setLevel(this.options.verbose || 0);
    this.initialized = false;
}
wfjob.prototype.initialize = function(callback) {
    if (this.initialized) {
        return callback(null, this.wfjobModel);
    }
    var wfjobLoader = this.productionManager.getWizziModelLoader('wfjob');
    if (wfjobLoader == null) {
        throw error.error('Loader for schema @wfjob@ not found', null);
    }
    var self = this;
    wfjobLoader(this.wfjobSrc, {}, function(err, wfjobModel) {
        if (err) {
            return callback(err, null);
        }
        self.wfjobModel = wfjobModel;
        self.initialized = true;
        callback(null, wfjobModel);
    });
}
wfjob.prototype.getRequiredPackages = function(callback) {
    var self = this;
    this.initialize(function(err, wfjobModel) {
        if (err) {
            return callback(err, null);
        }
        var result = [];
        var i, i_len=wfjobModel.requires.length, r;
        for (i=0; i<i_len; i++) {
            r = wfjobModel.requires[i];
            result.push(r.wzName);
        }
        return callback(null, result);
    });
}
wfjob.prototype.getArtifactInfos = function(callback) {
    var self = this,
        artifactInfoConfig,
        destPath,
        destFullPath,
        resultRequires = [],
        resultArtifactInfos = [];
    this.initialize(function(err, wfjobModel) {
        if (err) {
            return callback(err, null);
        }
        var i, i_len=wfjobModel.requires.length, r;
        for (i=0; i<i_len; i++) {
            r = wfjobModel.requires[i];
            resultRequires.push(r.wzName);
        }
        var i, i_len=wfjobModel.productions.length, gen;
        for (i=0; i<i_len; i++) {
            gen = wfjobModel.productions[i];
            var j, j_len=gen.lines.length, line;
            for (j=0; j<j_len; j++) {
                line = gen.lines[j];
                var k, k_len=line.artifacts.length, art;
                for (k=0; k<k_len; k++) {
                    art = line.artifacts[k];
                    if (verify.isEmpty(art.src)) {
                        // this artifact is generated by a code write generation
                        artifactInfoConfig = {
                            name: art.wzName, 
                            options: {}, 
                            contexts: [], 
                            gen: {
                                generator: art.generator
                            }, 
                            dest: {
                                baseFolder: wfjobModel.destBaseFolder, 
                                folder: line.destFolder || gen.destFolder, 
                                path: art.destPath, 
                                extension: art.extension
                            }
                        };
                        var x, x_len=art.modelRefs.length, modelRef;
                        for (x=0; x<x_len; x++) {
                            modelRef = art.modelRefs[x];
                            var modelInfo = self._modelInfo(modelRef);
                            artifactInfoConfig.contexts.push(modelInfo);
                        }
                    }
                    else {
                        artifactInfoConfig = {
                            name: art.wzName, 
                            options: {}, 
                            model: {
                                cwd: line.cwdFolder, 
                                src: art.src, 
                                schema: art.schema, 
                                contexts: []
                            }, 
                            gen: {
                                generator: art.generator
                            }, 
                            dest: {
                                baseFolder: wfjobModel.destBaseFolder, 
                                folder: line.destFolder || gen.destFolder, 
                                path: art.destPath, 
                                extension: art.extension
                            }
                        };
                        var x, x_len=art.modelRefs.length, modelRef;
                        for (x=0; x<x_len; x++) {
                            modelRef = art.modelRefs[x];
                            var modelInfo = self._modelInfo(modelRef);
                            artifactInfoConfig.model.contexts.push(modelInfo);
                        }
                    }
                    // log 'WizziJob.artifactInfoConfig', util.inspect(artifactInfoConfig, { depth: 1 })
                    resultArtifactInfos.push(artifactInfoConfig);
                }
            }
        }
        callback(null, [resultRequires, resultArtifactInfos]);
    });
}
wfjob.prototype._modelInfo = function(modelRef) {
    // model must exists, already verified loading wfjobModel
    var model = this.wfjobModel.getModel(modelRef.wzName);
    var result = {
        modelRef: modelRef, 
        src: this._getModelSrc(model.src, model), 
        schema: model.schema, 
        contexts: [], 
        transformers: this._getTransformerList(modelRef.transformers), 
        coll: null
    };
    if (modelRef.collName) {
        result.coll = {
            name: modelRef.collName, 
            itemName: modelRef.collItemName, 
            pathTemplateValues: modelRef.collPathTemplateValues
        };
    }
    var i, i_len=model.modelRefs.length, ctxModelRef;
    for (i=0; i<i_len; i++) {
        ctxModelRef = model.modelRefs[i];
        result.contexts.push(this._modelInfo(ctxModelRef));
    }
    return result;
}
wfjob.prototype._getModelSrc = function(src, node) {
    if (verify.isAbsolutePath(src)) {
        return src;
    }
    else {
        if (verify.isString(this.wfjobModel.modelsBaseFolder)) {
            return path.join(this.wfjobModel.modelsBaseFolder, src);
        }
        else {
            throw error.error("The model src " + src + ' is a relative path. A <base-models-folder> attribute is required on the <wfjob> element.', node);
        }
    }
}
wfjob.prototype._getTransformerList = function(transformers) {
    var ret = [];
    var i, i_len=transformers.length, item;
    for (i=0; i<i_len; i++) {
        item = transformers[i];
        ret.push(item.wzName);
    }
    return ret;
}

function getPath(base, src) {
    return verify.isAbsolutePath(src) ? src : path.join(base, src);
}
module.exports = wfjob;
