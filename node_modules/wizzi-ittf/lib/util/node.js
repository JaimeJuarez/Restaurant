var util = require('util');
var verify = require('wizzi-core').verify;

var md = module.exports = {};

/*
    Hook finder
*/
md.findHook = function (item, hookname) {
    /*
    if (hookname === 'code-js') {
        console.log('findKook', item.name, item.value);
    }
    */
    if (item.name === '$hook') {
        // console.log('node.findHook.item.$hook, hookname', item.value, hookname);
        if (item.value && item.value.trim() === hookname) {
            // console.log('node.findHook.found', item.value);
            /*
            if (hookname === 'code-js') {
                console.log('found', item.name, item.value);
            }
            */
            return item;
        }
        if (!item.value && hookname === 'default') return item;
    }
    var found, i, l = item.childs.length;
    for (i = 0; i < l; i++) {
        found = md.findHook(item.childs[i], hookname)
        if (found) return found;
    }
    return null;
}

md.findHookExt = function (item, hookname) {
    var prn = item.parent;
    if (!prn) return null;
    var hook = md.findHook(prn, hookname)
    if (hook) return hook;
    return md.findHookExt(prn, hookname);
}

/*
    Tree manipulation
*/
md.replace = function (item, replacers) {
    var nodes = item.parent.childs;
    item.parent.childs = [];
    nodes.forEach(function (child) {
        if (child === item) {
            replacers.forEach(function (replchild) {
                replchild.parent = item.parent;
                item.parent.childs.push(replchild);
            });
        }
        else
            item.parent.childs.push(child);
    });
}
md.remove = function (item) {
    var nodes = item.parent.childs;
    item.parent.childs = [];
    nodes.forEach(function (child) {
        if (child !== item) {
            item.parent.childs.push(child);
        }
    });
}

/*
    Node text ($.)
*/
md.textToLine = function (node) {
    var acc = [];
    if (node.childs) {
        node.childs.forEach(function (item) {
            textline(item, acc, '');
        })
    }
    var ret = acc.join(work.lineSep);
    // console.log('textToLine', ret);
    return ret;
}
function textline(node, acc, indent) {
    var open = node.tagSuffix == '(' ? '(' : ' ';
    // console.log('textline', node.name + open + (node.value || ''));
    acc.push(indent + node.name + open + (node.value || ''));
    if (node.childs) {
        node.childs.forEach(function (item) {
            textline(item, acc, indent + '  ');
        })
    }
}
md.lineToText = function (text) {
    if (typeof text === 'undefined' || text == null) {
        return { text: text, lines: null };
    }
    var text = verify.replaceAll(text, work.textSep, '\n');
    var ss = text.split('\n');
    if (ss.length == 1) {
        return { text: ss[0], lines: null };
    } else {
        var lines = verify.replaceAll(ss[1], work.lineSep, '\n').split('\n');
        return { text: ss[0], lines: lines };
    }
}



var work = {};
work.lineSep = "__LS__";
work.textSep = "__TS__";