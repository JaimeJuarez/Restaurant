var md = module.exports = {}

md.ScriptCoder = function () {
    this.stm = [];
    this.indentValue = 0;
    this.length = 0;
    this.line = '';
}
md.ScriptCoder.prototype.for = function (text) {
    if (this.line.length > 0) this.w();
    this.w('for (' + text + ') {');
    this.indent();
}
md.ScriptCoder.prototype.if = function (text) {
    if (this.line.length > 0) this.w();
    this.w('if (' + text + ') {');
    this.indent();
}
md.ScriptCoder.prototype.elif = function (text) {
    if (this.line.length > 0) this.w();
    this.w('else if (' + text + ') {');
    this.indent();
}
md.ScriptCoder.prototype.else = function () {
    if (this.line.length > 0) this.w();
    this.w('else {');
    this.indent();
}
md.ScriptCoder.prototype.while = function (text) {
    if (this.line.length > 0) this.w();
    this.w('while (' + text + ') {');
    this.indent();
}
md.ScriptCoder.prototype.end = function () {
    if (this.line.length > 0) this.w();
    this.deindent();
    this.w('}');
}
md.ScriptCoder.prototype.w = function (text) {
    var ind = spaces(this.indentValue * 4);
    this.stm.push(ind + this.line + (text || ''));
    this.line = '';
    this.length++;
}
md.ScriptCoder.prototype.write = function (text) {
    this.line += text || '';
}
md.ScriptCoder.prototype.indent = function () {
    this.indentValue++;
}
md.ScriptCoder.prototype.deindent = function () {
    this.indentValue = Math.max(0, this.indentValue -1);
}
md.ScriptCoder.prototype.toCode = function () {
    if (this.line.length > 0) this.w();
    return this.stm.join('\n');
}
md.ScriptCoder.prototype.getErrorLines = function (esprimaException) {
    var start = Math.max(0, esprimaException.lineNumber - 4);
    var end = Math.min(this.stm.length, esprimaException.lineNumber + 4);
    var ret = [];
    for (var i = start; i < end; i++) {
        ret.push(formatLineNumber(i+1) + ' ' + this.stm[i]);
        if (i == esprimaException.lineNumber - 1)
        {
            var col = esprimaException.column;
            ret.push(spaces(col + 4) + '* ' + esprimaException.description);
        }
    }
    return ret;
}
function spaces(num) {
    return Array(num + 1).join(" ");
}
function formatLineNumber(num) {
    if (num > 999)
        return num;
    if (num > 99)
        return '0'+ num;
    if (num > 9)
        return '00' + num;
    return '000' + num;
}

