// generator: wizzi-lab-artifatcs/lib/js/module/gen/main.js, utc time: Thu, 22 Oct 2015 19:39:41 GMT
var verify = require('wizzi-core').verify;
var log = require('wizzi-core').log(module);
var file = require('wizzi-core').file;
var sourcetree = require('./helpers/sourcetree');
var ProductionContext = require('./context');
// ProductionService class
ProductionService = function(options) {
    this.options = options;
    this.schemaModules = [];
    this.artifactModules = [];
    this.productionContext = new ProductionContext();
    log.setLevel(options.verbose || 0);
}
ProductionService.prototype.registerSchemaModule = function(schemaModule) {
    this.schemaModules.push(schemaModule);
}
ProductionService.prototype.getSchemaLoader = function(schemaName) {
    // console.log('ProductionService.getSchemaLoader.schemaName: ' + schemaName);
    var result = null;
    var i, i_len=this.schemaModules.length, item;
    for (i=0; i<i_len; i++) {
        item = this.schemaModules[i];
        if (result == null && verify.isFunction(item[schemaName])) {
            result = item[schemaName];
        }
    }
    if (!result) {
        var availables = [];
        var i, i_len=this.schemaModules.length, item;
        for (i=0; i<i_len; i++) {
            item = this.schemaModules[i];
            for (key in item) {
                if (verify.isFunction(item[key])) {
                    availables.push(key);
                }
            }
        }
        log.error('getSchemaLoader. Cannot find schema loader: ' + schemaName + '\n' + 'availables: ' + availables.join(', '));
    }
    return result;
}
ProductionService.prototype.registerArtifactModule = function(artifactModule) {
    this.artifactModules.push(artifactModule);
}
ProductionService.prototype.getArtifactGenerator = function(artifactName) {
    // console.log('ProductionService.getArtifactGenerator.artifactName: ' + artifactName);
    var result = null;
    var i, i_len=this.artifactModules.length, item;
    for (i=0; i<i_len; i++) {
        item = this.artifactModules[i];
        if (result == null && verify.isFunction(item[artifactName])) {
            result = item[artifactName];
        }
    }
    if (!result) {
        log.error('getArtifactGenerator. Cannot find artifact generator: ' + artifactName);
    }
    return result;
}
ProductionService.prototype.loadWizziModel = function(schemaName, ittfSource, context, callback) {
    var schemaNameDef = file.exists(ittfSource) ? schemaName : schemaName + 'FromString';
    var schemaLoader = this.getSchemaLoader(schemaNameDef);
    if (schemaLoader == null) {
        return callback({ message: 'ProductionService.loadWmtModel error. Cannot find schema loader for schema ' + schemaName });
    }
    schemaLoader(ittfSource, context, callback);
}
ProductionService.prototype.loadWizziModelSourceTree = function(schemaName, schemaName, ittfSource, context, callback) {
    var schemaNameDef = file.exists(ittfSource) ? schemaName : schemaName + 'FromString';
    var schemaLoader = this.getSchemaLoader(schemaNameDef);
    if (schemaLoader == null) {
        return callback({ message: 'ProductionService.loadWmtModel error. Cannot find schema loader for schema ' + schemaName });
    }
    var self = this;
    schemaLoader(ittfSource, context, callback(err, sourcetree(result, file.exists(ittfSource) ? ittfSource : null, context.wzrepoRootPath)));
}
ProductionService.prototype.generateArtifact = function(artifactName, ittfSource, context, callback) {
    if (verify.isString(artifactName) === false) {
        return callback({ message: 'ProductionService.generateArtifact error. Invalid artifact name ' + artifactName });
    }
    var ss = artifactName.split('/');
    if (ss.length == 2) {
        artifactName = ss[0] + ss[1].substr(0, 1).toUpperCase() + ss[1].substr(1);
    }
    var artifactNameDef = file.exists(ittfSource) ? artifactName : artifactName + 'FromString';
    var artifactGenerator = this.getArtifactGenerator(artifactNameDef);
    if (artifactGenerator == null) {
        return callback({ message: 'ProductionService.generateArtifact error. Cannot find artifact generator for artifact ' + artifactName });
    }
    artifactGenerator(ittfSource, context, callback);
}

module.exports = ProductionService;
