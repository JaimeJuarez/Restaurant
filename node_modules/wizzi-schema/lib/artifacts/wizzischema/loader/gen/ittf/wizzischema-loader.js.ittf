module
	kind jsfile

	var util = require('util')
	var _ = require('lodash')
	var stringify = require('json-stringify-safe')
    var path = require('path')
    var file = require('wizzi-core').file
    var pathutil = require('wizzi-core').pathutil
    var log = require('wizzi-core').log(module, { tofile: true })
    var ittf = require('wizzi-ittf')
    var ${schema.wzId}schema = require('./${schema.wzId}-model.g')

	$ var ROOTELEMENT = schema.rootElement.wzId;
    
    var md = module.exports = {};
    
	set md.load
		function
			arg filepath
			arg context
			arg callback
			
			var start = Date.now()
			try
				_ ittf.loadModel
					@ filepath
					@ context
					function
						arg err
						arg ittfModel
						if err
							return callback(err)
						_ log.info('Loaded Wizzi model instance of schema ${schema.wzId} from Ittf document ' + filepath + ' in ' + (Date.now() - start) + ' ms')
						if false
							var ittfDumpPath = path.join(path.dirname(filepath), '_debug', path.basename(filepath) + '.ittf.json')
							_ file.write
								@ ittfDumpPath
								_ stringify
									@ ittfModel
									@ null
									@ 2
						try
							_ md._load(ittfModel, filepath, callback)
						catch ex
							set ex.message = 'Error loading Wizzi model instance of schema ${schema.wzId} from Ittf document ' + filepath + '.\n' + ex.message
							set ex.source = 'wizzi'
							throw ex
			catch ex
				if ex.source != 'wizzi'
					set ex.message = 'Error loading Ittf model from Ittf document ' + filepath + '.\n' + ex.message
				throw ex
    
	set md.loadFromString
		function
			arg content
			arg context
			arg callback
			var
				decl start = Date.now()
				decl filepath = 'text://'
			try
				_ ittf.loadModelFromString
					@ content
					@ context
					function
						arg err
						arg ittfModel
						if err
							return callback(err)
						_ log.info('Loaded ittf model ' + filepath + ' in ' + (Date.now() - start) + ' ms')
						_ md._load(ittfModel, filepath, callback)
			catch ex
				return callback('Error loading wmt model for ${schema.wzId} model ' + filepath + '.\n' + ex.message + '\n' + ex.stack)
    
	set md._load
		function
			arg ittfModel
			arg filepath
			arg callback
			
			# Get the model type of the root node of the ittf model.
			var rootNode = ittfModel.nodes[0]
			var ${ROOTELEMENT}modelType = ${schema.wzId}schema[rootNode.n]
			if !${ROOTELEMENT}modelType
				var maptag = ${schema.wzId}schema.__tagElementMapping[rootNode.n]
				if typeof maptag === 'string'
					set ${ROOTELEMENT}modelType = ${schema.wzId}schema[maptag]
				if !${ROOTELEMENT}modelType
					throw new Error('Cannot map root node ' + rootNode.n + ' to any entity of schema + ${schema.wzId}, filepath: ' + filepath);
    
			# Initialize and verify the loaded model
			var
				decl start = Date.now()
				decl ${ROOTELEMENT}model = new ${ROOTELEMENT}modelType(rootNode.v)
			set ${ROOTELEMENT}model.loadContext = ittfModel.loadContext
			try
				_ ${ROOTELEMENT}model.loadFromNode(rootNode)
			catch ex
				return callback('Error loading wmt model for ${schema.wzId} model ' + filepath + '.\n' + ex.message + '\n' + ex.stack)
			_ log.info('Loaded wmt model ' + filepath + ' in ' + (Date.now() - start) + ' ms')
    
			# Initialize and verify the loaded model
			set start = Date.now()
			var ctx = new ${schema.wzId}schema.${schema.wzId}Context()
			_ ${ROOTELEMENT}model.wzInitialize(ctx)
			if ctx.schemaIsValid() === false
				var errors = ctx.validationErrors.join('\n');
				throw new Error('Schema ${schema.wzId} has validation errors: \n' + errors);
			
			_ log.info('Initialized wmt model ' + filepath + ' in ' + (Date.now() - start) + ' ms')
    
			if ${ROOTELEMENT}model.toJson && pathutil.isFilePath(filepath)
				# dump for test
				var ittfModelDump = path.join(path.dirname(filepath), '_debug', path.basename(filepath) + '.dump.json')
				_ file.write(ittfModelDump, JSON.stringify(${ROOTELEMENT}model.toJson(), null, 2))
    
			_ ${ROOTELEMENT}model.wzInitializeAsync
				@ ctx
				function
					arg err
					arg result
					if err
						return callback(err, null)
					# log.info('${ROOTELEMENT}model.toJson after wzInitializeAsync', util.inspect(${ROOTELEMENT}model.toJson(), { depth: null }));
					_ callback(null, ${ROOTELEMENT}model)