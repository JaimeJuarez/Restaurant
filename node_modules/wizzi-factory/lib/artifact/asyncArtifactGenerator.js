var path = require('path');
var util = require('util');
var async = require('async');
var error = require("wizzi-core").error;
var verify = require("wizzi-core").verify;
var log = require("wizzi-core").log(module);
var GenWriter = require('wizzi-core').GenWriter;

var AsyncArtifactGenerator = {

    generate: function (artifactInfo, generator, modelInfos, genContexts, callback) {

        if (verify.isObject(generator) == false || verify.isFunction(generator.gen) == false) {
            log.error('generator', generator);
            throw new Error('wizzi-factory.AsyncArtifactGenerator. parameter @generator@ must be an object and contain the @gen@ function.');
        }
        
        var genItems = [];
        for (var i = 0; i < modelInfos.length; i++) {
            var mInfo = modelInfos[i];
            var genContext = genContexts[i];
            var genWriter = new GenWriter({
                model: null,
                srcPath: mInfo.src(),
                srcFullPath: mInfo.srcFullPath(),
                options: artifactInfo.options
            });
            genItems.push({
                generator: generator,
                genContext: genContext,
                genWriter: genWriter,
            });
        }
        async.map(genItems, AsyncArtifactGenerator._gen_item, function (err, genWriters) {
            genWriters.forEach(function (item) {
                artifactInfo.addGenWriter(item); // augment artifactInfo with result
            });
            callback(null);
        });
    },

    /*
        each genCollectionContext contains the collection item context and all context model instances declared
        on the element @artifact-template@ of the @wfjob@ schema
    */
    generateFromCollectionContexts: function (artifactInfo, generator, modelInfo, genCollectionContexts, callback) {

        if (verify.isObject(generator) == false || verify.isFunction(generator.gen) == false) {
            log.error('generator', generator);
            throw new Error('wizzi-factory.AsyncArtifactGenerator. parameter @generator@ must be an object and contain the @gen@ function.');
        }

        var genItems = [];
        for (var i = 0; i < genCollectionContexts.length; i++) {
            var genContext = genCollectionContexts[i];
            var genWriter = new GenWriter({
                model: genContext.___collItem, // required by collection artifacts for resolving the destination filepath.
                srcPath: modelInfo.src(),
                srcFullPath: modelInfo.srcFullPath(),
                options: artifactInfo.options
            });
            genItems.push({
                generator: generator,
                genContext: genContext,
                genWriter: genWriter
            });
        }
        async.map(genItems, AsyncArtifactGenerator._gen_item, function (err, genWriters) {
            genWriters.forEach(function (item) {
                artifactInfo.addGenWriter(item); // augment artifactInfo with result
            });
            callback(null);
        });

    },

    generateCodeWrite: function (artifactInfo, generator, genContexts, callback) {

        if (verify.isObject(generator) == false || verify.isFunction(generator.gen) == false) {
            log.error('generator', generator);
            throw new Error('wizzi-factory.AsyncArtifactGenerator. parameter @generator@ must be an object and contain the @gen@ function.');
        }

        var genContext = {};
        genContexts.forEach(function (item) {
            genContext[item.___exportName] = item;
        })
        var genWriter = new GenWriter({
            model: null, // required by collection artifacts for resolving the destination filepath.
            srcPath: null,
            srcFullPath: null,
            options: artifactInfo.options
        });
        new generator.gen(
            genContext, genWriter
        );
        artifactInfo.addGenWriter(genWriter); // augment artifactInfo with result

        callback(null);

    },

    _gen_item: function (genInfo, callback) {
        // TODO make async
        new genInfo.generator.gen(
            genInfo.genContext, genInfo.genWriter
        );
        callback(null, genInfo.genWriter);
    }

};

module.exports = AsyncArtifactGenerator;
