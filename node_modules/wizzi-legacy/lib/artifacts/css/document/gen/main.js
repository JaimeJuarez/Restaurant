var resources = require('./resources');

var md = module.exports = {};
var myname = 'css.document.main';

md.gen = function (model, ctx) {
    tags.css_includeDependencies(model, ctx);
    tags.gen(model, ctx);
}

var tags = {};

tags.gen = function (model, ctx) {
    var tag = tags[model.WmtEntity];
    if (tag) tag(model, ctx);
    else throw ctx.error(myname + '.ctor. Unknown statement entity/tag: ' +
        model.WmtEntity + '/' + model.WmtTag, model);
}

tags.css = function (model, ctx) {
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
}

tags.comment = function (model, ctx) {
    if (model.items.length > 0) {
        for (var i = 0; i < model.items.length; i++) {
            if (i == 0) ctx.write('/*');
            else {
                ctx.w();
                ctx.write(' ');
            }
            ctx.write(model.items[i].WmtName);
        }
        ctx.w('*/');
    }
    else
        ctx.w('/*' + model.WmtName + ' */');
}

tags.rule = function (model, ctx) {
    ctx.write(model.WmtName);
    model.selects.forEach(function (item) {
        ctx.write(',');
        ctx.w();
        ctx.write(item.WmtName);
    });
    ctx.w(' {');
    ctx.indent();
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
    ctx.deindent();
    ctx.w('}');
}

tags.property = function (model, ctx) {
    var ss = model.WmtName.trim().split(' ');
    for (var i = 0; i < ss.length; i++) {
        ctx.write(ss[i]);
        if (i == 0) ctx.write(': ');
        else ctx.write(' ');
    }
    ctx.w(';');
}

tags.media = function (model, ctx) {
    ctx.w('@media ' + model.WmtName + '{');
    ctx.indent();
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
    ctx.deindent();
    ctx.w('}');
}

tags.fontface = function (model, ctx) {
    ctx.w('@font-face {');
    ctx.indent();
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
    ctx.deindent();
    ctx.w('}');
}

tags.keyframes = function (model, ctx) {
    ctx.w('@' + (model.vendor || '') + 'keyframes ' + model.WmtName + ' {');
    ctx.indent();
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
    ctx.deindent();
    ctx.w('}');
}

tags.keyframe = function (model, ctx) {
    ctx.w(model.WmtName + ' {');
    ctx.indent();
    model.items.forEach(function (item) {
        tags.gen(item, ctx);
    });
    ctx.deindent();
    ctx.w('}');
}

tags.css_includeDependencies = function (model, ctx) {
    resources.clearCssDependencies();
    model.includes.forEach(function (item) {
        resources.addCssDependency(item.WmtName);
    });
    resources.emitCssDependencies(ctx);
}
tags.import = function (model, ctx) {
    ctx.w('@import ' + model.WmtName + ';');
}
