var util = require('util');
var verify = require('wizzi-core').verify;
var lineparser = require('wizzi-core').lineparser;
var common = require('./common');
var test = require('./test');

var md = module.exports = {};
var myname = 'js.module.statement';

md.gen = function (model, ctx) {
    md.genLoop(model, ctx);
    if (ctx.__needs_semicolon) ctx.write(';');
    if (ctx.__needs_crlf) ctx.w();
    ctx.__needs_semicolon = ctx.__needs_crlf = false;
}

md.genLoop = function (model, ctx) {
    var stm = md.stm[model.WmtEntity];
    if (stm) stm(model, ctx);
    else throw ctx.error(myname + '.ctor. Unknown statement tag: ' + model.WmtTag + '/' + model.WmtEntity, model);
}
md.genItems = function (statements, ctx, options) {
    options = options || {};
    options.from = options.from || 0;
    options.indent = typeof options.indent === 'undefined' ? true : options.indent;
    var first = true;
    if (options.indent) ctx.indent();
    for (var i = options.from; i < statements.length; i++) {
        var item = statements[i];
        if (ctx.__needs_comma) { ctx.write(','); ctx.__needs_comma = false; }
        else if (options.needs_comma && !first) { ctx.write(','); }
        if (ctx.__needs_crlf) { ctx.w(); ctx.__needs_crlf = false; }
        md.genLoop(item, ctx);
        first = false;
    }
    if (options.indent) ctx.deindent();
}

md.stm = {};
common.load_vars(md);
common.load_struct(md);
common.load_calls(md);
common.load_logic(md);
common.load_exceptions(md);
common.load_classes(md);
common.load_functions(md);
test.load_tests(md);

md.stm.usestrict = function (model, ctx) { 
    ctx.w("'use strict';");
}


md.stm.codeline = function (model, ctx) {
    ctx.w(model.WmtName);
    md.genItems(model.statements, ctx, { indent: true });
}

md.stm.delete = function (model, ctx) {
    ctx.w(' delete ' + model.WmtName);
}

md.stm.codemultiline = function (model, ctx) {
    var line = verify.replaceAll(model.WmtName, '__1_2_3__', '\n');
    var lines = line.split('\n');
    var first = true;
    lines.forEach(function (l) {
        if (!first) ctx.w();
        ctx.write(l);
        first = false;
    })
}

md.stm.comment = function (model, ctx) {
    if (model.statements && model.statements.length > 0) {
        ctx.w('/**');
        ctx.indent();
        if (model.WmtName.length > 0) {
            ctx.w(model.WmtName);
        }
        ctx.__inside_comment = true;
        md.genItems(model.statements, ctx, { indent: false });
        ctx.__inside_comment = false;
        ctx.deindent();
        ctx.w('*/');
    } else {
        if (ctx.__inside_comment)
            ctx.w((model.WmtName ? ' ' + model.WmtName : ''));
        else
            ctx.w('//' + (model.WmtName ? ' ' + model.WmtName : ''));
    }
    ctx.__needs_crlf = false;
}
md.stm.commentmultiline = function (model, ctx) {
    ctx.w('/**');
    ctx.w('    ' + model.WmtName);
    ctx.w('*/');
}


/*
    CLASSES
*/

/*
    DECLARATIONS
*/




md.stm.set = function (model, ctx) {
    if (model.statements && model.statements.length > 0) {
        if (model.statements[0].WmtEntity === 'function') {
            ctx.w('');
        }
        ctx.write(setOperator(model.WmtName, model.statements));
        md.genItems(model.statements, ctx, { indent: false });
        if (md.isTopStatement(model)) {
            ctx.w(';');
        }
    } else {
        if (isDeclare(model)) {
            ctx.write(model.WmtName);
            //ctx.__needs_semicolon = true;
            //ctx.__needs_crlf = true;
        } else {
            ctx.write(model.WmtName);
            if (md.isTopStatement(model)) {
                ctx.w(semicolon(model.WmtName));
            }
        }
    }
}



/* 
    LOGIC 
*/
md.stm.block = function (model, ctx) {
    model.statements.forEach(function (item) {
        md.genLoop(item, ctx);
    });
}
/*
    EXCEPTIONS
*/
md.stm.inspect = function (model, ctx) {
    ctx.w('console.log("' + model.WmtName + '" + " " + util.inspect(' + model.WmtName + ', { depth: null}));');
}
md.stm.log = function (model, ctx) {
    ctx.w('console.log(' + model.WmtName + ')' + semicolon(model.WmtName));
}
md.stm.chalk = function (model, ctx) {
    var p = lineparser.parse(model.WmtName, model),
        nv = p.nameValue();
    ctx.w('console.log(chalk.' + nv.name + '(' + nv.value + '))' + semicolon(nv.value));
}


md.stm.op_eq = function (model, ctx) { emitOperators('==', model, ctx); }
md.stm.op_noteq = function (model, ctx) { emitOperators('!=', model, ctx); }
md.stm.op_eq_strict = function (model, ctx) { emitOperators('===', model, ctx); }
md.stm.op_noteq_strict = function (model, ctx) { emitOperators('!==', model, ctx); }
md.stm.op_or = function (model, ctx) { emitOperators('||', model, ctx); }
md.stm.op_and = function (model, ctx) { emitOperators('&&', model, ctx); }
md.stm.op_xor = function (model, ctx) { emitOperators('|', model, ctx); }
md.stm.op_xand = function (model, ctx) { emitOperators('&', model, ctx); }
md.stm.op_minus = function (model, ctx) { emitOperators('-', model, ctx); }
md.stm.op_plus = function (model, ctx) { emitOperators('+', model, ctx); }
md.stm.op_times = function (model, ctx) { emitOperators('*', model, ctx); }
md.stm.op_div = function (model, ctx) { emitOperators('/', model, ctx); }
md.stm.op_power = function (model, ctx) { emitOperators('^', model, ctx); }
md.stm.op_mod = function (model, ctx) { emitOperators('%', model, ctx); }
md.stm.op_lt = function (model, ctx) { emitOperators('<', model, ctx); }
md.stm.op_le = function (model, ctx) { emitOperators('<=', model, ctx); }
md.stm.op_gt = function (model, ctx) { emitOperators('>', model, ctx); }
md.stm.op_ge = function (model, ctx) { emitOperators('>=', model, ctx); }

function emitOperators(op, model, ctx)
{
    if (model.statements[0] && model.statements[1]) {
        var requireParen1 = model.statements.length > 2;
        var requireParena1 = model.statements[0].statements.length > 0;
        var requireParena2 = model.statements[1].statements.length > 0;
        if (requireParen1) ctx.write('(');
        if (requireParena1) ctx.write('(');
        md.genLoop(model.statements[0], ctx);
        if (requireParena1) ctx.write(')');
        ctx.write(' ' + op + ' ');
        if (requireParena2) ctx.write('(');
        md.genLoop(model.statements[1], ctx);
        if (requireParena2) ctx.write(')');
        if (requireParen1) ctx.write(')');
        if (model.statements[2]) {
            md.genLoop(model.statements[2], ctx);
        }
        // console.log('emitOperators.op.and.model.WmtParent', op + ' ' + model.WmtParent.WmtEntity);
        if (md.isTopStatement(model)) ctx.w(';');
    }
    else
        throw new Error("module.gen.statements.emitOperators Invalid model " + util.inspect(model, { depth: 2 }));
}

/*
    EXT
*/
md.stm.ready = function (model, ctx) {
    ctx.w('$(function() {');
    md.genItems(model.statements, ctx, { indent: true });
    ctx.w('});');
}
/*
    HTML
*/
md.stm.html = function (model, ctx) {
    ctx.w('var __html = [];');
    ctx.__inside_html = true;
    md.genItems(model.statements, ctx, { indent: false });
    ctx.__inside_html = false;
    ctx.w(model.WmtName + " = __html.join('');")
}
md.stm.html_ng = function (model, ctx) {
    ctx.__inside_ng = true;
    md.stm.html_f(model, ctx);
    ctx.__inside_ng = false;
}
md.stm.html_f = function (model, ctx) {
    ctx.w('function ' + model.WmtName + '(ctx) {');
    ctx.indent();
    ctx.w('var __html = [];');
    ctx.__inside_html = true;
    md.genItems(model.statements, ctx, { indent: false });
    ctx.__inside_html = false;
    ctx.w("return __html.join('');")
    ctx.deindent();
    ctx.w("}")
}
md.stm.html_dom = function (model, ctx) {
    ctx.w('function ' + model.WmtName + '(ctx) {');
    ctx.indent();
    ctx.w('var __html = [];');
    ctx.__inside_html = true;
    md.genItems(model.statements, ctx, { indent: false });
    ctx.__inside_html = false;
    ctx.w("return $(__html.join(''));")
    ctx.deindent();
    ctx.w("}")
}
md.stm.html_hb = function (model, ctx) {
    ctx.w('function ' + model.WmtName + '(ctx) {');
    ctx.indent();
    ctx.w('var __html = [];');
    ctx.__inside_html = true;
    ctx.__inside_handlebar = true;
    md.genItems(model.statements, ctx, { indent: false });
    ctx.__inside_handlebar = false;
    ctx.__inside_html = false;
    ctx.w("return Handlebars.compile(__html.join(''));");
    ctx.deindent();
    ctx.w("}");
}
md.stm.h3 = function (model, ctx) {
    md.stm._htmlelement(model, 'h3', model.WmtName, ctx);
}
md.stm.form = function (model, ctx) {
    md.stm._htmlelement(model, 'form', model.WmtName, ctx);
}
md.stm.div = function (model, ctx) {
    md.stm._htmlelement(model, 'div', model.WmtName, ctx);
}
md.stm.span = function (model, ctx) {
    md.stm._htmlelement(model, 'span', model.WmtName, ctx);
}
md.stm.table = function (model, ctx) {
    md.stm._htmlelement(model, 'table', model.WmtName, ctx);
}
md.stm.thead = function (model, ctx) {
    md.stm._htmlelement(model, 'thead', model.WmtName, ctx);
}
md.stm.tbody = function (model, ctx) {
    md.stm._htmlelement(model, 'tbody', model.WmtName, ctx);
}
md.stm.tr = function (model, ctx) {
    md.stm._htmlelement(model, 'tr', model.WmtName, ctx);
}
md.stm.td = function (model, ctx) {
    md.stm._htmlelement(model, 'td', model.WmtName, ctx);
}
md.stm.th = function (model, ctx) {
    md.stm._htmlelement(model, 'th', model.WmtName, ctx);
}
md.stm.label = function (model, ctx) {
    md.stm._htmlelement(model, 'label', model.WmtName, ctx);
}
md.stm.input = function (model, ctx) {
    md.stm._htmlelement(model, 'input', model.WmtName, ctx);
}
md.stm.textarea = function (model, ctx) {
    md.stm._htmlelement(model, 'textarea', model.WmtName, ctx);
}
md.stm.select = function (model, ctx) {
    md.stm._htmlelement(model, 'select', model.WmtName, ctx);
}
md.stm.option = function (model, ctx) {
    md.stm._htmlelement(model, 'option', model.WmtName, ctx);
}
md.stm.br = function (model, ctx) {
    md.stm._htmlelement(model, 'br', model.WmtName, ctx);
}
md.stm.img = function (model, ctx) {
    md.stm._htmlelement(model, 'img', model.WmtName, ctx);
}
md.stm.button = function (model, ctx) {
    md.stm._htmlelement(model, 'button', model.WmtName, ctx);
}
md.stm.i = function (model, ctx) {
    md.stm._htmlelement(model, 'i', model.WmtName, ctx);
}
md.stm.ul = function (model, ctx) {
    md.stm._htmlelement(model, 'ul', model.WmtName, ctx);
}
md.stm.li = function (model, ctx) {
    md.stm._htmlelement(model, 'li', model.WmtName, ctx);
}
md.stm.a = function (model, ctx) {
    md.stm._htmlelement(model, 'a', model.WmtName, ctx);
}
md.stm.htmlelement = function (model, ctx) {
    var p = lineparser.parseNameValue(model.WmtName, model),
        tag = p.name(),
        text = p.value();
    md.stm._htmlelement(model, tag, text, ctx);
}
md.stm._htmlelement = function (model, tag, text, ctx) {
    var attrs = []
    for (var i = 0; i < model.statements.length; i++) {
        var s = model.statements[i];
        if (s.WmtEntity === 'jsPropertyOrValue')
        {
            var p = lineparser.parseNameValue(s.WmtName, s),
                name = p.name(),
                value = p.value();
            if (value) {
                var ip = lineparser.parseInterpolation(value, model, ctx.__inside_handlebar, ctx.__inside_ng);
                value = ip.join();
            }
            value = value.trim();
            if (['multiple'].indexOf(name) >= 0)
                attrs.push('\' + ( ' + value + ' ? \' ' + name + '\' : \'\' ) + \'');
            else if (value !== '@@null') {
                if (value.length == 0) {
                    attrs.push(' ' + name);
                } else {
                    attrs.push(' ' + name + '="\' + ' + value + ' + \'"');
                }
            }
        }
    }
    ctx.w("__html.push('<" + tag + attrs.join('') + ">');");
    if (text) {
        text = text.trim();
        var ip = lineparser.parseInterpolation(text, model, ctx.__inside_handlebar, ctx.__inside_ng);
        ctx.w("__html.push(" + ip.join() + ");");
    }
    md.genItems(model.statements, ctx, { indent: false });
    ctx.w("__html.push('</" + tag + ">');");
}
md.isTopStatement = function(model) {
    if (!model.WmtParent) return true;
    var ent = model.WmtParent.WmtEntity;
    if (ent === 'else' && model.WmtParent.WmtParent && model.WmtParent.WmtParent.WmtEntity === 'iif') return false;
    return ['function', 'ctor', 'method', 'module', 'ready', 'html_f', 'html_dom', 'html_hb', 'block', 'for', 'foreach', 'while', 'do', 'if', 'else', 'elif', 'try', 'finally', 'catch', 'case', 'default', ' describe', 'it', 'before', 'beforeEach', 'after', 'afterEach']
        .indexOf(model.WmtParent.WmtEntity) > -1;
}


function isDeclare(model) {
    if (!model.WmtParent) return false;
    return ['var']
        .indexOf(model.WmtParent.WmtEntity) > -1;
}


function semicolon(text) {
    return text && text.length ? (text[text.length -1] === ';' ? '' : ';') : ';';
}

function setOperator(text, statements) {
    if (!(text && text.length)) return '';
    text = text.trim();
    if (statements.length === 1 && statements[0].WmtEntity === 'memberAccessComputed') return text + '';
    var t1 = text.substr(-1, 1);
    var t2 = text.substr(-2, 2);
    if (op1.indexOf(t1) > -1) return text + ' ';
    if (op2.indexOf(t2) > -1) return text + ' ';
    return text + ' = ';
}


function encloseParen(text) {
    var s = text.trim();
    if (isParenEnclosed(s) === false) {
        if (s.substr(0, 1) !== '(') s = '(' + s;
        if (s.substr(-1, 1) !== ')') s = s + ')';
        return s;
    } else {
        return text;
    }
}

//TODO complete
var op1 = ['='];
var op2 = ['+=', '-=', '/=', '*='];

function getOpenParen(oper) {
    return parenOp.indexOf(oper) > -1 ? '(' : '';
}

function getCloseParen(oper) {
    return parenOp.indexOf(oper) > -1 ? ')' : '';
}
var parenOp = ['||', '>>>', '>>'];

