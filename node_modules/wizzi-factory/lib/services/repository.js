// generator: wizzi-lab-artifatcs/lib/js/module/gen/main.js, utc time: Thu, 22 Oct 2015 19:39:41 GMT
var verify = require('wizzi-core').verify;
var log = require('wizzi-core').log(module);
// TODO
// Explain how Wizzi model types and Artifact generators are retrieved
// Repository class
Repository = function(options) {
    this.options = options;
    this.wizziFactoryPackages = [];
}
Repository.prototype.registerWizziFactoryPackage = function(wizziFactoryPackage) {
    this.wizziFactoryPackages.push(wizziFactoryPackage);
}
Repository.prototype.getWizziModelLoader = function(schemaName) {
    // console.log('Repository.getWizziModelLoader.schemaName: ' + schemaName);
    var found, foundInModule = null, result = null;
    // all wizziFactoryPackages are searched, last encountered results override the previous.
    var i, i_len=this.wizziFactoryPackages.length, item;
    for (i=0; i<i_len; i++) {
        item = this.wizziFactoryPackages[i];
        console.log('searching model loader', schemaName, ' in module', item.name);
        found = null;
        if (verify.isFunction(item[schemaName])) {
            found = item[schemaName];
        }
        else if (verify.isFunction(item['getWizziModelLoader'])) {
            try {
                var m = item['getWizziModelLoader'](schemaName);
                if (m && verify.isFunction(m.load)) {
                    found = m.load;
                }
            } catch (ex) {
                log.error('getWizziModelLoader. Exception: ' + ex.message, ex.stack);
                found = null;
            }
        }
        if (found) {
            result = found;
            foundInModule = item.name;
        }
    }
    if (!result) {
        log.error('getWizziModelLoader. Cannot find model loader: ' + schemaName + '\n' + 'availables: ' + availables.join(', '));
    }
    else {
        log.success('getWizziModelLoader. Found model loader: ' + schemaName + ' in module ' + foundInModule);
    }
    return result;
}
Repository.prototype.getWizziSchemaObject = function(schemaName) {
    // console.log('Repository.getWizziSchemaObject.schemaName: ' + schemaName);
    var found, foundInModule = null, result = null;
    // all wizziFactoryPackages are searched, last encountered results override the previous.
    var i, i_len=this.wizziFactoryPackages.length, item;
    for (i=0; i<i_len; i++) {
        item = this.wizziFactoryPackages[i];
        console.log('searching wizzi schema object', schemaName, ' in module', item.name);
        found = null;
        if (verify.isFunction(item[schemaName])) {
            found = item[schemaName];
        }
        else if (verify.isFunction(item['getWizziSchemaObject'])) {
            try {
                var m = item['getWizziSchemaObject'](schemaName);
                if (m) {
                    found = m;
                }
            } catch (ex) {
                log.error('getWizziSchemaObject. Exception: ' + ex.message, ex.stack);
                found = null;
            }
        }
        if (found) {
            result = found;
            foundInModule = item.name;
        }
    }
    if (!result) {
        log.error('getWizziSchemaObject. Cannot find schema object: ' + schemaName + '\n' + 'availables: ' + availables.join(', '));
    }
    else {
        log.success('getWizziSchemaObject. Found schema object: ' + schemaName + ' in module ' + foundInModule);
    }
    return result;
}
Repository.prototype.getModelTransformer = function(transName) {
    // log 'Repository.getModelTransformer.transName: ' + transName
    var found, foundInModule = null, result = null;
    // all wizziFactoryPackages are searched, last encountered results override the previous.
    var i, i_len=this.wizziFactoryPackages.length, item;
    for (i=0; i<i_len; i++) {
        item = this.wizziFactoryPackages[i];
        console.log('searching transformer ', transName, ' in module', item.name);
        found = null;
        if (verify.isFunction(item['getModelTransformer'])) {
            try {
                found = item['getModelTransformer'](transName);
            } catch (ex) {
                log.warn('getModelTransformer.Error ' + ex.message, ex.stack);
                found = null;
            }
        }
        if (found) {
            result = found;
            foundInModule = item.name;
        }
    }
    if (!result) {
        log.error('getModelTransformer. Cannot find transformer: ' + transName);
    }
    else {
        log.success('getModelTransformer. Found transformer: ' + transName + ' in module ' + foundInModule);
    }
    return result;
}
Repository.prototype.getArtifactGenerator = function(artifactName) {
    // log 'Repository.getArtifactGenerator.artifactName: ' + artifactName
    var found, foundInModule = null, result = null;
    // all wizziFactoryPackages are searched, last encountered results override the previous.
    var i, i_len=this.wizziFactoryPackages.length, item;
    for (i=0; i<i_len; i++) {
        item = this.wizziFactoryPackages[i];
        console.log('searching artifact ', artifactName, ' in module', item.name);
        found = null;
        if (verify.isFunction(item['getArtifactGenerator'])) {
            try {
                found = item['getArtifactGenerator'](artifactName);
            } catch (ex) {
                log.warn('getArtifactGenerator.Error ' + ex.message, ex.stack);
                found = null;
            }
        }
        if (found) {
            result = found;
            foundInModule = item.name;
        }
    }
    if (!result) {
        log.error('getArtifactGenerator. Cannot find artifact generator: ' + artifactName);
    }
    else {
        log.success('getArtifactGenerator. Found artifact generator: ' + artifactName + ' in module ' + foundInModule);
    }
    return result;
}

module.exports = Repository;
