'use strict';

// nodejs modules
var path = require('path');
var util = require('util');
// npm wizzi modules
var Artifact = require('wizzi-core').artifact();
var ittf = require("wizzi-ittf");
var schemas = require("wizzi-lab-schemas");
// wizzi-lab-artifacts modules
var genMain = require('./gen/main');

var myname = "html/document";

var ArtifactInst = function () {
    Artifact.call(this);
    this.name = myname;
}
util.inherits(ArtifactInst, Artifact);

ArtifactInst.prototype.generate = function (config, wizzi, cb) {
    if (typeof config == 'undefined') throw new Error('Missing argument: config');
    if (typeof config.src == 'undefined') throw new Error('Missing argument: config.src');
    if (typeof config.dest == 'undefined') throw new Error('Missing argument: config.dest');

    var self = this;
    var src = (path.resolve(config.src) == path.normalize(config.src))
        ? config.src : path.join(wizzi.basedir, config.src);
    console.log(myname + ' - src', src);

    console.log(myname + ' - config.context', config.context);
    schemas.html(src, config.context, function (err, modelObj) {
        console.log(myname + ' - modelObj: ', modelObj);

        config.destObj = {
            path: config.dest,
            extension: 'html',
            data: {
                modelname: modelObj.name
            }
        };
        self.ctx = wizzi.createGenerationContext(config);
        new genMain.gen(modelObj, self.ctx);
    });
}

ArtifactInst.prototype.toFile = function (cb) {
    this.ctx.toFile(function (err, data) {
        if (err) cb(err);
        else cb(null, data);
    });
}

module.exports = ArtifactInst;