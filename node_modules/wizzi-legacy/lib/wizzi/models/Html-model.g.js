/*
  Generated by Tree2Soft 0.1 Beta. On 17/09/2015 20:21:24.
  Transformer
    Type     : Tree2Soft.Wmt.Common.Concepts.Schema.Writers.Js.Model.ModelWriter
    Assembly : Tree2Soft.Wmt.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
*/
var util = require('util');

var md = module.exports = {};

md.TSourceLineInfo = function(row, col, source) {
    this.row = row;
    this.col = col;
    this.source = source;
}
md.htmlInstance = function(name, sourceLineInfo) {
    this.WmtName = name || '';
    this.WmtSourceLineInfo = sourceLineInfo;
    this.WmtChildren = [];
}
md.htmlInstance.prototype.WmtRoot = function() {
    return this.WmtParent == null ? this : this.WmtParent.WmtRoot();
}
md.htmlInstance.prototype.WmtSourceFilepath = function(sourceKey) {
    return this.WmtRoot().loadContext.getSourceFilepath(sourceKey);
}
md.htmlInstance.prototype.WmtVerify = function(ctx) {
}
md.htmlInstance.prototype.WmtInitialize = function(ctx) {
}
md.htmlInstance.prototype.WmtInitializeAsync = function(ctx, callback) {
    callback(null);
}
md.htmlInstance.prototype.AddChild = function(node) {
    node.WmtParent = this;
    this.WmtChildren.push(node);
}
md.htmlInstance.prototype.loadToChildColl = function(child, type, coll) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    coll.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.htmlInstance.prototype.loadToWmtChildren = function(child, type) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    this.WmtChildren.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.htmlInstance.prototype.toJsonProperties = function(result) {
    result.WmtTag = this.WmtTag;
    result.WmtName = this.WmtName;
}
md.htmlInstance.prototype.toJsonChildren = function(result) {
    if (this.WmtChildren.length > 0) {
        var children = [];
        this.WmtChildren.forEach(function (item) {;
            children.push(item.toJson());
        });
        result.WmtChildren = children;
    }
}
md.htmlInstance.prototype.error = function(message, node) {
    throw new md.htmlException(message, node, this);
}
/*
    html class
    The root entity of the Html template schema.
*/
md.html = function(name, sourceLineInfo) {
    md.htmlInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "html";
    this.WmtEntity = "html";
    this.elements = [];
}
util.inherits(md.html, md.htmlInstance);

md.html.prototype.Addelement = function(name, sourceLineInfo) {
    var retval = new md.element(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.elements.push(retval);
    return retval;
}
md.html.prototype.getelement = function(name) {
    var found = null;
    this.elements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.html.prototype.WmtVerify = function(ctx) {
    this.elements.forEach(function (item) { item.WmtVerify(ctx); });
    md.htmlInstance.prototype.WmtVerify.call(this, ctx);
}
md.html.prototype.WmtInitialize = function(ctx) {
    this.elements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.htmlInstance.prototype.WmtInitialize.call(this, ctx);
}
md.html.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.elements);}
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md._text, this.elements);}
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md._dot, this.elements);}
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.element, this.elements);}
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.elements);}
    }
    if (_l == 1 && _ch == 'b') {
        if (name === 'b') { return this.loadToChildColl(child, md.b, this.elements);}
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.elements);}
    }
    if (_l == 1 && _ch == 'p') {
        if (name === 'p') { return this.loadToChildColl(child, md.p, this.elements);}
    }
    if (_l == 1 && _ch == 'u') {
        if (name === 'u') { return this.loadToChildColl(child, md.u, this.elements);}
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md._textLF, this.elements);}
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.elements);}
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'dd') { return this.loadToChildColl(child, md.dd, this.elements);}
        else if (name === 'dt') { return this.loadToChildColl(child, md.dt, this.elements);}
        else if (name === 'dl') { return this.loadToChildColl(child, md.dl, this.elements);}
    }
    if (_l == 2 && _ch == 'e') {
        if (name === 'em') { return this.loadToChildColl(child, md.em, this.elements);}
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h1') { return this.loadToChildColl(child, md.h1, this.elements);}
        else if (name === 'h2') { return this.loadToChildColl(child, md.h2, this.elements);}
        else if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.elements);}
        else if (name === 'h4') { return this.loadToChildColl(child, md.h4, this.elements);}
        else if (name === 'h5') { return this.loadToChildColl(child, md.h5, this.elements);}
        else if (name === 'h6') { return this.loadToChildColl(child, md.h6, this.elements);}
        else if (name === 'hr') { return this.loadToChildColl(child, md.hr, this.elements);}
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.elements);}
    }
    if (_l == 2 && _ch == 'j') {
        if (name === 'js') { return this.loadToChildColl(child, md.js, this.elements);}
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.elements);}
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'ol') { return this.loadToChildColl(child, md.ol, this.elements);}
    }
    if (_l == 2 && _ch == 'r') {
        if (name === 'rt') { return this.loadToChildColl(child, md.rt, this.elements);}
        else if (name === 'rp') { return this.loadToChildColl(child, md.rp, this.elements);}
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'td') { return this.loadToChildColl(child, md.td, this.elements);}
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.elements);}
        else if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.elements);}
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.elements);}
    }
    if (_l == 3 && _ch == '#') {
        if (name === '#if') { return this.loadToChildColl(child, md.ifCondition, this.elements);}
        else if (name === '#if') { return this.loadToChildColl(child, md.ifConditionDown, this.elements);}
    }
    if (_l == 3 && _ch == 'b') {
        if (name === 'bar') { return this.loadToChildColl(child, md.bar, this.elements);}
        else if (name === 'bdi') { return this.loadToChildColl(child, md.bdi, this.elements);}
    }
    if (_l == 3 && _ch == 'c') {
        if (name === 'col') { return this.loadToChildColl(child, md.col, this.elements);}
        else if (name === 'css') { return this.loadToChildColl(child, md.css, this.elements);}
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.elements);}
        else if (name === 'dfn') { return this.loadToChildColl(child, md.dfn, this.elements);}
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.elements);}
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'img') { return this.loadToChildColl(child, md.img, this.elements);}
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'nav') { return this.loadToChildColl(child, md.nav, this.elements);}
    }
    if (_l == 3 && _ch == 'p') {
        if (name === 'pre') { return this.loadToChildColl(child, md.pre, this.elements);}
    }
    if (_l == 3 && _ch == 'r') {
        if (name === 'raw') { return this.loadToChildColl(child, md.raw, this.elements);}
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'sub') { return this.loadToChildColl(child, md.sub, this.elements);}
        else if (name === 'sup') { return this.loadToChildColl(child, md.sup, this.elements);}
        else if (name === 'set') { return this.loadToChildColl(child, md.set, this.elements);}
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'tab') { return this.loadToChildColl(child, md.tab, this.elements);}
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.elements);}
    }
    if (_l == 3 && _ch == 'w') {
        if (name === 'wbr') { return this.loadToChildColl(child, md.wbr, this.elements);}
    }
    if (_l == 4 && _ch == 'a') {
        if (name === 'abbr') { return this.loadToChildColl(child, md.abbr, this.elements);}
    }
    if (_l == 4 && _ch == 'b') {
        if (name === 'body') { return this.loadToChildColl(child, md.body, this.elements);}
        else if (name === 'base') { return this.loadToChildColl(child, md.base, this.elements);}
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'cite') { return this.loadToChildColl(child, md.cite, this.elements);}
        else if (name === 'code') { return this.loadToChildColl(child, md.code, this.elements);}
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'else') { return this.loadToChildColl(child, md.else, this.elements);}
        else if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.elements);}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.elements);}
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'head') { return this.loadToChildColl(child, md.head, this.elements);}
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'lang') { this.lang = child.v; return true;}
        else if (name === 'link') { return this.loadToChildColl(child, md.link, this.elements);}
    }
    if (_l == 4 && _ch == 'm') {
        if (name === 'meta') { return this.loadToChildColl(child, md.meta, this.elements);}
        else if (name === 'main') { return this.loadToChildColl(child, md.main, this.elements);}
        else if (name === 'mark') { return this.loadToChildColl(child, md.mark, this.elements);}
    }
    if (_l == 4 && _ch == 'r') {
        if (name === 'ruby') { return this.loadToChildColl(child, md.ruby, this.elements);}
        else if (name === 'rule') { return this.loadToChildColl(child, md.rule, this.elements);}
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.elements);}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'time') { return this.loadToChildColl(child, md.time, this.elements);}
    }
    if (_l == 5 && _ch == '#') {
        if (name === '#if--') { return this.loadToChildColl(child, md.ifCondition, this.elements);}
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'alert') { return this.loadToChildColl(child, md.alert, this.elements);}
        else if (name === 'audio') { return this.loadToChildColl(child, md.audio, this.elements);}
        else if (name === 'aside') { return this.loadToChildColl(child, md.aside, this.elements);}
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.elements);}
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { this.class = child.v; return true;}
    }
    if (_l == 5 && _ch == 'e') {
        if (name === 'embed') { return this.loadToChildColl(child, md.embed, this.elements);}
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.elements);}
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.elements);}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'meter') { return this.loadToChildColl(child, md.meter, this.elements);}
        else if (name === 'macro') { return this.loadToChildColl(child, md.macro, this.elements);}
    }
    if (_l == 5 && _ch == 'p') {
        if (name === 'pager') { return this.loadToChildColl(child, md.pager, this.elements);}
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.elements);}
    }
    if (_l == 5 && _ch == 's') {
        if (name === 'slide') { return this.loadToChildColl(child, md.slide, this.elements);}
        else if (name === 'small') { return this.loadToChildColl(child, md.small, this.elements);}
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.elements);}
        else if (name === 'tfoot') { return this.loadToChildColl(child, md.tfoot, this.elements);}
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.elements);}
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.elements);}
        else if (name === 'track') { return this.loadToChildColl(child, md.track, this.elements);}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'video') { return this.loadToChildColl(child, md.video, this.elements);}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.elements);}
    }
    if (_l == 6 && _ch == '_') {
        if (name === '_style') { return this.loadToChildColl(child, md._style, this.elements);}
        else if (name === '_title') { return this.loadToChildColl(child, md._title, this.elements);}
    }
    if (_l == 6 && _ch == 'a') {
        if (name === 'active') { return this.loadToChildColl(child, md.active, this.elements);}
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'button') { return this.loadToChildColl(child, md.button, this.elements);}
    }
    if (_l == 6 && _ch == 'c') {
        if (name === 'center') { return this.loadToChildColl(child, md.center, this.elements);}
        else if (name === 'canvas') { return this.loadToChildColl(child, md.canvas, this.elements);}
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'dialog') { return this.loadToChildColl(child, md.dialog, this.elements);}
    }
    if (_l == 6 && _ch == 'e') {
        if (name === 'elseif') { return this.loadToChildColl(child, md.elseif, this.elements);}
    }
    if (_l == 6 && _ch == 'f') {
        if (name === 'footer') { return this.loadToChildColl(child, md.footer, this.elements);}
        else if (name === 'figure') { return this.loadToChildColl(child, md.figure, this.elements);}
        else if (name === 'filter') { return this.loadToChildColl(child, md.filter, this.elements);}
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'header') { return this.loadToChildColl(child, md.header, this.elements);}
        else if (name === 'hgroup') { return this.loadToChildColl(child, md.hgroup, this.elements);}
    }
    if (_l == 6 && _ch == 'i') {
        if (name === 'iframe') { return this.loadToChildColl(child, md.iframe, this.elements);}
        else if (name === 'import') { return this.loadToChildColl(child, md.import, this.elements);}
    }
    if (_l == 6 && _ch == 'k') {
        if (name === 'keygen') { return this.loadToChildColl(child, md.keygen, this.elements);}
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.elements);}
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'object') { return this.loadToChildColl(child, md.object, this.elements);}
        else if (name === 'option') { return this.loadToChildColl(child, md.option, this.elements);}
        else if (name === 'output') { return this.loadToChildColl(child, md.output, this.elements);}
    }
    if (_l == 6 && _ch == 'p') {
        if (name === 'parent') { return this.loadToChildColl(child, md.parent, this.elements);}
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'rating') { return this.loadToChildColl(child, md.rating, this.elements);}
        else if (name === 'return') { return this.loadToChildColl(child, md.return, this.elements);}
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'script') { return this.loadToChildColl(child, md.script, this.elements);}
        else if (name === 'strong') { return this.loadToChildColl(child, md.strong, this.elements);}
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.elements);}
        else if (name === 'source') { return this.loadToChildColl(child, md.source, this.elements);}
    }
    if (_l == 6 && _ch == 't') {
        if (name === 'tabset') { return this.loadToChildColl(child, md.tabset, this.elements);}
    }
    if (_l == 7 && _ch == '_') {
        if (name === '_ngview') { return this.loadToChildColl(child, md._ng_view, this.elements);}
    }
    if (_l == 7 && _ch == 'a') {
        if (name === 'address') { return this.loadToChildColl(child, md.address, this.elements);}
        else if (name === 'article') { return this.loadToChildColl(child, md.article, this.elements);}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'caption') { return this.loadToChildColl(child, md.caption, this.elements);}
        else if (name === 'command') { return this.loadToChildColl(child, md.command, this.elements);}
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'details') { return this.loadToChildColl(child, md.details, this.elements);}
    }
    if (_l == 7 && _ch == 'e') {
        if (name === 'extends') { return this.loadToChildColl(child, md.extends, this.elements);}
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.elements);}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'heading') { return this.loadToChildColl(child, md.heading, this.elements);}
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'include') { return this.loadToChildColl(child, md.include, this.elements);}
    }
    if (_l == 7 && _ch == 's') {
        if (name === 'section') { return this.loadToChildColl(child, md.section, this.elements);}
        else if (name === 'summary') { return this.loadToChildColl(child, md.summary, this.elements);}
    }
    if (_l == 8 && _ch == '_') {
        if (name === '_ng-view') { return this.loadToChildColl(child, md._ng_view, this.elements);}
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'carousel') { return this.loadToChildColl(child, md.carousel, this.elements);}
        else if (name === 'colgroup') { return this.loadToChildColl(child, md.colgroup, this.elements);}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'datalist') { return this.loadToChildColl(child, md.datalist, this.elements);}
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'fieldset') { return this.loadToChildColl(child, md.fieldset, this.elements);}
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'interval') { return this.loadToChildColl(child, md.interval, this.elements);}
    }
    if (_l == 8 && _ch == 'o') {
        if (name === 'optgroup') { return this.loadToChildColl(child, md.optgroup, this.elements);}
    }
    if (_l == 8 && _ch == 'p') {
        if (name === 'progress') { return this.loadToChildColl(child, md.progress, this.elements);}
        else if (name === 'progress') { return this.loadToChildColl(child, md.progress, this.elements);}
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.elements);}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'accordion') { return this.loadToChildColl(child, md.accordion, this.elements);}
    }
    if (_l == 9 && _ch == 's') {
        if (name === 'spaceless') { return this.loadToChildColl(child, md.spaceless, this.elements);}
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'autoescape') { return this.loadToChildColl(child, md.autoescape, this.elements);}
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'blockquote') { return this.loadToChildColl(child, md.blockquote, this.elements);}
    }
    if (_l == 10 && _ch == 'f') {
        if (name === 'figcaption') { return this.loadToChildColl(child, md.figcaption, this.elements);}
    }
    if (_l == 10 && _ch == 'p') {
        if (name === 'pagination') { return this.loadToChildColl(child, md.pagination, this.elements);}
    }
    if (_l == 10 && _ch == 't') {
        if (name === 'timepicker') { return this.loadToChildColl(child, md.timepicker, this.elements);}
        else if (name === 'tabheading') { return this.loadToChildColl(child, md.tab_heading, this.elements);}
    }
    if (_l == 11 && _ch == 'p') {
        if (name === 'progressbar') { return this.loadToChildColl(child, md.progressbar, this.elements);}
    }
    if (_l == 11 && _ch == 't') {
        if (name === 'tab-heading') { return this.loadToChildColl(child, md.tab_heading, this.elements);}
    }
    if (_l == 14 && _ch == 'a') {
        if (name === 'accordiongroup') { return this.loadToChildColl(child, md.accordion_group, this.elements);}
    }
    if (_l == 15 && _ch == 'a') {
        if (name === 'accordion-group') { return this.loadToChildColl(child, md.accordion_group, this.elements);}
    }
    if (_l == 16 && _ch == 'a') {
        if (name === 'accordionheading') { return this.loadToChildColl(child, md.accordion_heading, this.elements);}
    }
    if (_l == 17 && _ch == 'a') {
        if (name === 'accordion-heading') { return this.loadToChildColl(child, md.accordion_heading, this.elements);}
    }
    if (name.substr(0, 5) == "data-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 3) == "ng-") {
        this[name] = child.v;
        return true;
    }
    ok = false;
    return ok;
}
md.html.prototype.LoadFromNode = function(node) {
    //console.log('html.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.html.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html.prototype.toJsonProperties = function(result) {
    md.htmlInstance.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.class)) result["class"] = this.class;
    if (!isEmpty(this.data__)) result["data__"] = this.data__;
    if (!isEmpty(this.lang)) result["lang"] = this.lang;
    if (!isEmpty(this.ng__)) result["ng__"] = this.ng__;
}
md.html.prototype.toJsonChildren = function(result) {
    md.htmlInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.elements.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['elements'] = items;
}
// element class
md.element = function(name, sourceLineInfo) {
    md.htmlInstance.call(this, name, sourceLineInfo);
    this.AllowedContenteditables = [ "true", "false", "inherit"];
    this.AllowedDirs = [ "ltr", "rtl"];
    this.AllowedDraggables = [ "true", "false", "auto"];
    this.AllowedHiddens = [ "hidden"];
    this.WmtTag = "<";
    this.WmtEntity = "element";
    this.attributes = [];
    this.elements = [];
}
util.inherits(md.element, md.htmlInstance);

md.element.CONTENTEDITABLE_TRUE = "true";
md.element.CONTENTEDITABLE_FALSE = "false";
md.element.CONTENTEDITABLE_INHERIT = "inherit";
md.element.DIR_LTR = "ltr";
md.element.DIR_RTL = "rtl";
md.element.DRAGGABLE_TRUE = "true";
md.element.DRAGGABLE_FALSE = "false";
md.element.DRAGGABLE_AUTO = "auto";
md.element.HIDDEN_HIDDEN = "hidden";
md.element.prototype.Addattribute = function(name, sourceLineInfo) {
    var retval = new md.attribute(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.attributes.push(retval);
    return retval;
}
md.element.prototype.getattribute = function(name) {
    var found = null;
    this.attributes.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.element.prototype.Addelement = function(name, sourceLineInfo) {
    var retval = new md.element(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.elements.push(retval);
    return retval;
}
md.element.prototype.getelement = function(name) {
    var found = null;
    this.elements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.element.prototype.WmtVerify = function(ctx) {
    ctx.verifyEnum("contenteditable", this.Allowedcontenteditables , this.contenteditable, this.WmtSourceLineInfo);
    ctx.verifyEnum("dir", this.Alloweddirs , this.dir, this.WmtSourceLineInfo);
    ctx.verifyEnum("draggable", this.Alloweddraggables , this.draggable, this.WmtSourceLineInfo);
    ctx.verifyEnum("hidden", this.Allowedhiddens , this.hidden, this.WmtSourceLineInfo);
    this.attributes.forEach(function (item) { item.WmtVerify(ctx); });
    this.elements.forEach(function (item) { item.WmtVerify(ctx); });
    md.htmlInstance.prototype.WmtVerify.call(this, ctx);
}
md.element.prototype.WmtInitialize = function(ctx) {
    this.attributes.forEach(function (item) { item.WmtInitialize(ctx); });
    this.elements.forEach(function (item) { item.WmtInitialize(ctx); });
    var _this = this;
    this.attributes.forEach(function(item) {
    console.log("Attrib ", item.WmtName, item.value);
    _this[item.WmtName] = item.value;
    });
    md.htmlInstance.prototype.WmtInitialize.call(this, ctx);
}
md.element.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.elements);}
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md._text, this.elements);}
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md._dot, this.elements);}
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.element, this.elements);}
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.attribute, this.attributes);}
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.elements);}
    }
    if (_l == 1 && _ch == 'b') {
        if (name === 'b') { return this.loadToChildColl(child, md.b, this.elements);}
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.elements);}
    }
    if (_l == 1 && _ch == 'p') {
        if (name === 'p') { return this.loadToChildColl(child, md.p, this.elements);}
    }
    if (_l == 1 && _ch == 'u') {
        if (name === 'u') { return this.loadToChildColl(child, md.u, this.elements);}
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md._textLF, this.elements);}
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.elements);}
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'dd') { return this.loadToChildColl(child, md.dd, this.elements);}
        else if (name === 'dt') { return this.loadToChildColl(child, md.dt, this.elements);}
        else if (name === 'dl') { return this.loadToChildColl(child, md.dl, this.elements);}
    }
    if (_l == 2 && _ch == 'e') {
        if (name === 'em') { return this.loadToChildColl(child, md.em, this.elements);}
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h1') { return this.loadToChildColl(child, md.h1, this.elements);}
        else if (name === 'h2') { return this.loadToChildColl(child, md.h2, this.elements);}
        else if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.elements);}
        else if (name === 'h4') { return this.loadToChildColl(child, md.h4, this.elements);}
        else if (name === 'h5') { return this.loadToChildColl(child, md.h5, this.elements);}
        else if (name === 'h6') { return this.loadToChildColl(child, md.h6, this.elements);}
        else if (name === 'hr') { return this.loadToChildColl(child, md.hr, this.elements);}
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'id') { this.id = child.v; return true;}
        else if (name === 'if') { return this.loadToChildColl(child, md.if, this.elements);}
    }
    if (_l == 2 && _ch == 'j') {
        if (name === 'js') { return this.loadToChildColl(child, md.js, this.elements);}
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.elements);}
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'ol') { return this.loadToChildColl(child, md.ol, this.elements);}
    }
    if (_l == 2 && _ch == 'r') {
        if (name === 'rt') { return this.loadToChildColl(child, md.rt, this.elements);}
        else if (name === 'rp') { return this.loadToChildColl(child, md.rp, this.elements);}
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'td') { return this.loadToChildColl(child, md.td, this.elements);}
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.elements);}
        else if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.elements);}
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.elements);}
    }
    if (_l == 3 && _ch == '#') {
        if (name === '#if') { return this.loadToChildColl(child, md.ifCondition, this.elements);}
        else if (name === '#if') { return this.loadToChildColl(child, md.ifConditionDown, this.elements);}
    }
    if (_l == 3 && _ch == 'b') {
        if (name === 'bar') { return this.loadToChildColl(child, md.bar, this.elements);}
        else if (name === 'bdi') { return this.loadToChildColl(child, md.bdi, this.elements);}
    }
    if (_l == 3 && _ch == 'c') {
        if (name === 'col') { return this.loadToChildColl(child, md.col, this.elements);}
        else if (name === 'css') { return this.loadToChildColl(child, md.css, this.elements);}
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'dir') { this.dir = child.v; return true;}
        else if (name === 'div') { return this.loadToChildColl(child, md.div, this.elements);}
        else if (name === 'dfn') { return this.loadToChildColl(child, md.dfn, this.elements);}
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.elements);}
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'img') { return this.loadToChildColl(child, md.img, this.elements);}
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'nav') { return this.loadToChildColl(child, md.nav, this.elements);}
    }
    if (_l == 3 && _ch == 'p') {
        if (name === 'pre') { return this.loadToChildColl(child, md.pre, this.elements);}
    }
    if (_l == 3 && _ch == 'r') {
        if (name === 'raw') { return this.loadToChildColl(child, md.raw, this.elements);}
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'src') { this.src = child.v; return true;}
        else if (name === 'sub') { return this.loadToChildColl(child, md.sub, this.elements);}
        else if (name === 'sup') { return this.loadToChildColl(child, md.sup, this.elements);}
        else if (name === 'set') { return this.loadToChildColl(child, md.set, this.elements);}
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'tab') { return this.loadToChildColl(child, md.tab, this.elements);}
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.elements);}
    }
    if (_l == 3 && _ch == 'w') {
        if (name === 'wbr') { return this.loadToChildColl(child, md.wbr, this.elements);}
    }
    if (_l == 4 && _ch == 'a') {
        if (name === 'abbr') { return this.loadToChildColl(child, md.abbr, this.elements);}
    }
    if (_l == 4 && _ch == 'b') {
        if (name === 'body') { return this.loadToChildColl(child, md.body, this.elements);}
        else if (name === 'base') { return this.loadToChildColl(child, md.base, this.elements);}
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'cite') { return this.loadToChildColl(child, md.cite, this.elements);}
        else if (name === 'code') { return this.loadToChildColl(child, md.code, this.elements);}
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'else') { return this.loadToChildColl(child, md.else, this.elements);}
        else if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.elements);}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.elements);}
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'head') { return this.loadToChildColl(child, md.head, this.elements);}
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'line') { this.line = child.v; return true;}
        else if (name === 'link') { return this.loadToChildColl(child, md.link, this.elements);}
    }
    if (_l == 4 && _ch == 'm') {
        if (name === 'meta') { return this.loadToChildColl(child, md.meta, this.elements);}
        else if (name === 'main') { return this.loadToChildColl(child, md.main, this.elements);}
        else if (name === 'mark') { return this.loadToChildColl(child, md.mark, this.elements);}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 4 && _ch == 'r') {
        if (name === 'role') { this.role = child.v; return true;}
        else if (name === 'ruby') { return this.loadToChildColl(child, md.ruby, this.elements);}
        else if (name === 'rule') { return this.loadToChildColl(child, md.rule, this.elements);}
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.elements);}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'time') { return this.loadToChildColl(child, md.time, this.elements);}
    }
    if (_l == 5 && _ch == '#') {
        if (name === '#if--') { return this.loadToChildColl(child, md.ifCondition, this.elements);}
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'alert') { return this.loadToChildColl(child, md.alert, this.elements);}
        else if (name === 'audio') { return this.loadToChildColl(child, md.audio, this.elements);}
        else if (name === 'aside') { return this.loadToChildColl(child, md.aside, this.elements);}
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'bline') { this.bline = child.v; return true;}
        else if (name === 'block') { return this.loadToChildColl(child, md.block, this.elements);}
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { this.class = child.v; return true;}
    }
    if (_l == 5 && _ch == 'e') {
        if (name === 'embed') { return this.loadToChildColl(child, md.embed, this.elements);}
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.elements);}
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.elements);}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'meter') { return this.loadToChildColl(child, md.meter, this.elements);}
        else if (name === 'macro') { return this.loadToChildColl(child, md.macro, this.elements);}
    }
    if (_l == 5 && _ch == 'p') {
        if (name === 'pager') { return this.loadToChildColl(child, md.pager, this.elements);}
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.elements);}
    }
    if (_l == 5 && _ch == 's') {
        if (name === 'style') { this.style = child.v; return true;}
        else if (name === 'slide') { return this.loadToChildColl(child, md.slide, this.elements);}
        else if (name === 'small') { return this.loadToChildColl(child, md.small, this.elements);}
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'title') { this.title = child.v; return true;}
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.elements);}
        else if (name === 'tfoot') { return this.loadToChildColl(child, md.tfoot, this.elements);}
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.elements);}
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.elements);}
        else if (name === 'track') { return this.loadToChildColl(child, md.track, this.elements);}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'video') { return this.loadToChildColl(child, md.video, this.elements);}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.elements);}
    }
    if (_l == 6 && _ch == '_') {
        if (name === '_style') { return this.loadToChildColl(child, md._style, this.elements);}
        else if (name === '_title') { return this.loadToChildColl(child, md._title, this.elements);}
    }
    if (_l == 6 && _ch == 'a') {
        if (name === 'active') { return this.loadToChildColl(child, md.active, this.elements);}
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'button') { return this.loadToChildColl(child, md.button, this.elements);}
    }
    if (_l == 6 && _ch == 'c') {
        if (name === 'center') { return this.loadToChildColl(child, md.center, this.elements);}
        else if (name === 'canvas') { return this.loadToChildColl(child, md.canvas, this.elements);}
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'dialog') { return this.loadToChildColl(child, md.dialog, this.elements);}
    }
    if (_l == 6 && _ch == 'e') {
        if (name === 'elseif') { return this.loadToChildColl(child, md.elseif, this.elements);}
    }
    if (_l == 6 && _ch == 'f') {
        if (name === 'footer') { return this.loadToChildColl(child, md.footer, this.elements);}
        else if (name === 'figure') { return this.loadToChildColl(child, md.figure, this.elements);}
        else if (name === 'filter') { return this.loadToChildColl(child, md.filter, this.elements);}
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'hidden') { this.hidden = child.v; return true;}
        else if (name === 'header') { return this.loadToChildColl(child, md.header, this.elements);}
        else if (name === 'hgroup') { return this.loadToChildColl(child, md.hgroup, this.elements);}
    }
    if (_l == 6 && _ch == 'i') {
        if (name === 'isopen') { this.is_open = child.v; return true;}
        else if (name === 'iframe') { return this.loadToChildColl(child, md.iframe, this.elements);}
        else if (name === 'import') { return this.loadToChildColl(child, md.import, this.elements);}
    }
    if (_l == 6 && _ch == 'k') {
        if (name === 'keygen') { return this.loadToChildColl(child, md.keygen, this.elements);}
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.elements);}
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'object') { return this.loadToChildColl(child, md.object, this.elements);}
        else if (name === 'option') { return this.loadToChildColl(child, md.option, this.elements);}
        else if (name === 'output') { return this.loadToChildColl(child, md.output, this.elements);}
    }
    if (_l == 6 && _ch == 'p') {
        if (name === 'parent') { return this.loadToChildColl(child, md.parent, this.elements);}
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'rating') { return this.loadToChildColl(child, md.rating, this.elements);}
        else if (name === 'return') { return this.loadToChildColl(child, md.return, this.elements);}
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'script') { return this.loadToChildColl(child, md.script, this.elements);}
        else if (name === 'strong') { return this.loadToChildColl(child, md.strong, this.elements);}
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.elements);}
        else if (name === 'source') { return this.loadToChildColl(child, md.source, this.elements);}
    }
    if (_l == 6 && _ch == 't') {
        if (name === 'tabset') { return this.loadToChildColl(child, md.tabset, this.elements);}
    }
    if (_l == 7 && _ch == '_') {
        if (name === '_ngview') { return this.loadToChildColl(child, md._ng_view, this.elements);}
    }
    if (_l == 7 && _ch == 'a') {
        if (name === 'address') { return this.loadToChildColl(child, md.address, this.elements);}
        else if (name === 'article') { return this.loadToChildColl(child, md.article, this.elements);}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'caption') { return this.loadToChildColl(child, md.caption, this.elements);}
        else if (name === 'command') { return this.loadToChildColl(child, md.command, this.elements);}
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'details') { return this.loadToChildColl(child, md.details, this.elements);}
    }
    if (_l == 7 && _ch == 'e') {
        if (name === 'extends') { return this.loadToChildColl(child, md.extends, this.elements);}
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.elements);}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'heading') { return this.loadToChildColl(child, md.heading, this.elements);}
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'is-open') { this.is_open = child.v; return true;}
        else if (name === 'include') { return this.loadToChildColl(child, md.include, this.elements);}
    }
    if (_l == 7 && _ch == 's') {
        if (name === 'section') { return this.loadToChildColl(child, md.section, this.elements);}
        else if (name === 'summary') { return this.loadToChildColl(child, md.summary, this.elements);}
    }
    if (_l == 8 && _ch == '_') {
        if (name === '_ng-view') { return this.loadToChildColl(child, md._ng_view, this.elements);}
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'collapse') { this.collapse = child.v; return true;}
        else if (name === 'carousel') { return this.loadToChildColl(child, md.carousel, this.elements);}
        else if (name === 'colgroup') { return this.loadToChildColl(child, md.colgroup, this.elements);}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'dropzone') { this.dropzone = child.v; return true;}
        else if (name === 'datalist') { return this.loadToChildColl(child, md.datalist, this.elements);}
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'fieldset') { return this.loadToChildColl(child, md.fieldset, this.elements);}
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'interval') { return this.loadToChildColl(child, md.interval, this.elements);}
    }
    if (_l == 8 && _ch == 'o') {
        if (name === 'optgroup') { return this.loadToChildColl(child, md.optgroup, this.elements);}
    }
    if (_l == 8 && _ch == 'p') {
        if (name === 'position') { this.position = child.v; return true;}
        else if (name === 'progress') { return this.loadToChildColl(child, md.progress, this.elements);}
        else if (name === 'progress') { return this.loadToChildColl(child, md.progress, this.elements);}
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'tabindex') { this.tabindex = child.v; return true;}
        else if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.elements);}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'accesskey') { this.accesskey = child.v; return true;}
        else if (name === 'accordion') { return this.loadToChildColl(child, md.accordion, this.elements);}
    }
    if (_l == 9 && _ch == 'd') {
        if (name === 'draggable') { this.draggable = child.v; return true;}
    }
    if (_l == 9 && _ch == 's') {
        if (name === 'spaceless') { return this.loadToChildColl(child, md.spaceless, this.elements);}
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'autoescape') { return this.loadToChildColl(child, md.autoescape, this.elements);}
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'blockquote') { return this.loadToChildColl(child, md.blockquote, this.elements);}
    }
    if (_l == 10 && _ch == 'f') {
        if (name === 'figcaption') { return this.loadToChildColl(child, md.figcaption, this.elements);}
    }
    if (_l == 10 && _ch == 'p') {
        if (name === 'pagination') { return this.loadToChildColl(child, md.pagination, this.elements);}
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'spellcheck') { this.spellcheck = parsebool(child.v, null, child); return true;}
    }
    if (_l == 10 && _ch == 't') {
        if (name === 'timepicker') { return this.loadToChildColl(child, md.timepicker, this.elements);}
        else if (name === 'tabheading') { return this.loadToChildColl(child, md.tab_heading, this.elements);}
    }
    if (_l == 11 && _ch == 'c') {
        if (name === 'contextmenu') { this.contextmenu = child.v; return true;}
    }
    if (_l == 11 && _ch == 'p') {
        if (name === 'progressbar') { return this.loadToChildColl(child, md.progressbar, this.elements);}
    }
    if (_l == 11 && _ch == 't') {
        if (name === 'tab-heading') { return this.loadToChildColl(child, md.tab_heading, this.elements);}
    }
    if (_l == 11 && _ch == 'u') {
        if (name === 'uncheckable') { this.uncheckable = child.v; return true;}
    }
    if (_l == 14 && _ch == 'a') {
        if (name === 'accordiongroup') { return this.loadToChildColl(child, md.accordion_group, this.elements);}
    }
    if (_l == 15 && _ch == 'a') {
        if (name === 'accordion-group') { return this.loadToChildColl(child, md.accordion_group, this.elements);}
    }
    if (_l == 15 && _ch == 'c') {
        if (name === 'contenteditable') { this.contenteditable = child.v; return true;}
    }
    if (_l == 16 && _ch == 'a') {
        if (name === 'accordionheading') { return this.loadToChildColl(child, md.accordion_heading, this.elements);}
    }
    if (_l == 17 && _ch == 'a') {
        if (name === 'accordion-heading') { return this.loadToChildColl(child, md.accordion_heading, this.elements);}
    }
    if (name.substr(0, 5) == "aria-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 3) == "bs-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 4) == "btn-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 5) == "data-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 8) == "dropdown") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 3) == "ng-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 2) == "on") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 8) == "plunker-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 7) == "popover") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 7) == "rating-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 6) == "state-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 9) == "template-") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 7) == "tooltip") {
        this[name] = child.v;
        return true;
    }
    if (name.substr(0, 3) == "ui-") {
        this[name] = child.v;
        return true;
    }
    ok = false;
    return ok;
}
md.element.prototype.LoadFromNode = function(node) {
    //console.log('element.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.element.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.element.prototype.toJsonProperties = function(result) {
    md.htmlInstance.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.accesskey)) result["accesskey"] = this.accesskey;
    if (!isEmpty(this.aria__)) result["aria__"] = this.aria__;
    if (!isEmpty(this.bline)) result["bline"] = this.bline;
    if (!isEmpty(this.bs__)) result["bs__"] = this.bs__;
    if (!isEmpty(this.btn__)) result["btn__"] = this.btn__;
    if (!isEmpty(this.class)) result["class"] = this.class;
    if (!isEmpty(this.collapse)) result["collapse"] = this.collapse;
    if (!isEmpty(this.contenteditable)) result["contenteditable"] = this.contenteditable;
    if (!isEmpty(this.contextmenu)) result["contextmenu"] = this.contextmenu;
    if (!isEmpty(this.data__)) result["data__"] = this.data__;
    if (!isEmpty(this.dir)) result["dir"] = this.dir;
    if (!isEmpty(this.draggable)) result["draggable"] = this.draggable;
    if (!isEmpty(this.dropdown_)) result["dropdown_"] = this.dropdown_;
    if (!isEmpty(this.dropzone)) result["dropzone"] = this.dropzone;
    if (!isEmpty(this.hidden)) result["hidden"] = this.hidden;
    if (!isEmpty(this.id)) result["id"] = this.id;
    if (!isEmpty(this.is_open)) result["is_open"] = this.is_open;
    if (!isEmpty(this.line)) result["line"] = this.line;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.ng__)) result["ng__"] = this.ng__;
    if (!isEmpty(this.on_)) result["on_"] = this.on_;
    if (!isEmpty(this.plunker__)) result["plunker__"] = this.plunker__;
    if (!isEmpty(this.popover_)) result["popover_"] = this.popover_;
    if (!isEmpty(this.position)) result["position"] = this.position;
    if (!isEmpty(this.rating__)) result["rating__"] = this.rating__;
    if (!isEmpty(this.role)) result["role"] = this.role;
    if (!isEmpty(this.src)) result["src"] = this.src;
    result["spellcheck"] = this.spellcheck;
    if (!isEmpty(this.state__)) result["state__"] = this.state__;
    if (!isEmpty(this.style)) result["style"] = this.style;
    if (!isEmpty(this.tabindex)) result["tabindex"] = this.tabindex;
    if (!isEmpty(this.template__)) result["template__"] = this.template__;
    if (!isEmpty(this.title)) result["title"] = this.title;
    if (!isEmpty(this.tooltip_)) result["tooltip_"] = this.tooltip_;
    if (!isEmpty(this.uncheckable)) result["uncheckable"] = this.uncheckable;
    if (!isEmpty(this.ui__)) result["ui__"] = this.ui__;
}
md.element.prototype.toJsonChildren = function(result) {
    md.htmlInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.attributes.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['attributes'] = items;
    items = [];
    this.elements.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['elements'] = items;
}
// attribute class
md.attribute = function(name, sourceLineInfo) {
    md.htmlInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "@";
    this.WmtEntity = "attribute";
}
util.inherits(md.attribute, md.htmlInstance);

md.attribute.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    ok = false;
    return ok;
}
md.attribute.prototype.LoadFromNode = function(node) {
    //console.log('attribute.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.attribute.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.attribute.prototype.toJsonProperties = function(result) {
    md.htmlInstance.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.value)) result["value"] = this.value;
}
md.attribute.prototype.toJsonChildren = function(result) {
    md.htmlInstance.prototype.toJsonChildren.call(this, result);
}
// head class
md.head = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "head";
    this.WmtEntity = "head";
}
util.inherits(md.head, md.element);

md.head.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.head.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.head.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// body class
md.body = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "body";
    this.WmtEntity = "body";
}
util.inherits(md.body, md.element);

md.body.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.body.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.body.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _ng_view class
md._ng_view = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "_ng-view";
    this.WmtEntity = "_ng_view";
}
util.inherits(md._ng_view, md.element);

md._ng_view.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._ng_view.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md._ng_view.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// alert class
md.alert = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "alert";
    this.WmtEntity = "alert";
}
util.inherits(md.alert, md.element);

md.alert.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'close') { this.close = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.alert.prototype.LoadFromNode = function(node) {
    //console.log('alert.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.alert.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.alert.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.close)) result["close"] = this.close;
}
md.alert.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// accordion class
md.accordion = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "accordion";
    this.WmtEntity = "accordion";
}
util.inherits(md.accordion, md.element);

md.accordion.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 11 && _ch == 'c') {
        if (name === 'closeothers') { this.close_others = child.v; return true;}
    }
    if (_l == 12 && _ch == 'c') {
        if (name === 'close-others') { this.close_others = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.accordion.prototype.LoadFromNode = function(node) {
    //console.log('accordion.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.accordion.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.accordion.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.close_others)) result["close_others"] = this.close_others;
}
md.accordion.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// accordion_heading class
md.accordion_heading = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "accordion-heading";
    this.WmtEntity = "accordion_heading";
}
util.inherits(md.accordion_heading, md.element);

md.accordion_heading.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.accordion_heading.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.accordion_heading.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// accordion_group class
md.accordion_group = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "accordion-group";
    this.WmtEntity = "accordion_group";
}
util.inherits(md.accordion_group, md.element);

md.accordion_group.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 'i') {
        if (name === 'isopen') { this.is_open = child.v; return true;}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'heading') { this.heading = child.v; return true;}
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'is-open') { this.is_open = child.v; return true;}
    }
    if (_l == 10 && _ch == 'i') {
        if (name === 'isdisabled') { this.is_disabled = child.v; return true;}
    }
    if (_l == 11 && _ch == 'i') {
        if (name === 'is-disabled') { this.is_disabled = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.accordion_group.prototype.LoadFromNode = function(node) {
    //console.log('accordion_group.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.accordion_group.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.accordion_group.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.heading)) result["heading"] = this.heading;
    if (!isEmpty(this.is_open)) result["is_open"] = this.is_open;
    if (!isEmpty(this.is_disabled)) result["is_disabled"] = this.is_disabled;
}
md.accordion_group.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// carousel class
md.carousel = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "carousel";
    this.WmtEntity = "carousel";
}
util.inherits(md.carousel, md.element);

md.carousel.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.carousel.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.carousel.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// slide class
md.slide = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "slide";
    this.WmtEntity = "slide";
}
util.inherits(md.slide, md.element);

md.slide.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.slide.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.slide.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// interval class
md.interval = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "interval";
    this.WmtEntity = "interval";
}
util.inherits(md.interval, md.element);

md.interval.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.interval.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.interval.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// active class
md.active = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "active";
    this.WmtEntity = "active";
}
util.inherits(md.active, md.element);

md.active.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.active.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.active.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// pagination class
md.pagination = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "pagination";
    this.WmtEntity = "pagination";
}
util.inherits(md.pagination, md.element);

md.pagination.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 'r') {
        if (name === 'rotate') { this.rotate = child.v; return true;}
    }
    if (_l == 7 && _ch == 'm') {
        if (name === 'maxsize') { this.max_size = child.v; return true;}
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'lasttext') { this.last_text = child.v; return true;}
    }
    if (_l == 8 && _ch == 'm') {
        if (name === 'max-size') { this.max_size = child.v; return true;}
    }
    if (_l == 8 && _ch == 'n') {
        if (name === 'numpages') { this.num_pages = child.v; return true;}
        else if (name === 'nexttext') { this.next_text = child.v; return true;}
    }
    if (_l == 9 && _ch == 'f') {
        if (name === 'firsttext') { this.first_text = child.v; return true;}
    }
    if (_l == 9 && _ch == 'l') {
        if (name === 'last-text') { this.last_text = child.v; return true;}
    }
    if (_l == 9 && _ch == 'n') {
        if (name === 'num-pages') { this.num_pages = child.v; return true;}
        else if (name === 'next-text') { this.next_text = child.v; return true;}
    }
    if (_l == 10 && _ch == 'f') {
        if (name === 'first-text') { this.first_text = child.v; return true;}
    }
    if (_l == 10 && _ch == 't') {
        if (name === 'totalitems') { this.total_items = child.v; return true;}
    }
    if (_l == 11 && _ch == 't') {
        if (name === 'total-items') { this.total_items = child.v; return true;}
    }
    if (_l == 12 && _ch == 'p') {
        if (name === 'previoustext') { this.previous_text = child.v; return true;}
    }
    if (_l == 13 && _ch == 'b') {
        if (name === 'boundarylinks') { this.boundary_links = child.v; return true;}
    }
    if (_l == 13 && _ch == 'p') {
        if (name === 'previous-text') { this.previous_text = child.v; return true;}
    }
    if (_l == 14 && _ch == 'b') {
        if (name === 'boundary-links') { this.boundary_links = child.v; return true;}
    }
    if (_l == 14 && _ch == 'd') {
        if (name === 'directionlinks') { this.direction_links = child.v; return true;}
    }
    if (_l == 15 && _ch == 'd') {
        if (name === 'direction-links') { this.direction_links = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.pagination.prototype.LoadFromNode = function(node) {
    //console.log('pagination.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.pagination.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.pagination.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.direction_links)) result["direction_links"] = this.direction_links;
    if (!isEmpty(this.total_items)) result["total_items"] = this.total_items;
    if (!isEmpty(this.num_pages)) result["num_pages"] = this.num_pages;
    if (!isEmpty(this.max_size)) result["max_size"] = this.max_size;
    if (!isEmpty(this.boundary_links)) result["boundary_links"] = this.boundary_links;
    if (!isEmpty(this.previous_text)) result["previous_text"] = this.previous_text;
    if (!isEmpty(this.next_text)) result["next_text"] = this.next_text;
    if (!isEmpty(this.first_text)) result["first_text"] = this.first_text;
    if (!isEmpty(this.last_text)) result["last_text"] = this.last_text;
    if (!isEmpty(this.rotate)) result["rotate"] = this.rotate;
}
md.pagination.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// pager class
md.pager = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "pager";
    this.WmtEntity = "pager";
}
util.inherits(md.pager, md.element);

md.pager.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 10 && _ch == 't') {
        if (name === 'totalitems') { this.total_items = child.v; return true;}
    }
    if (_l == 11 && _ch == 't') {
        if (name === 'total-items') { this.total_items = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.pager.prototype.LoadFromNode = function(node) {
    //console.log('pager.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.pager.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.pager.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.total_items)) result["total_items"] = this.total_items;
}
md.pager.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// progress class
md.progress = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "progress";
    this.WmtEntity = "progress";
}
util.inherits(md.progress, md.element);

md.progress.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.progress.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.progress.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// progressbar class
md.progressbar = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "progressbar";
    this.WmtEntity = "progressbar";
}
util.inherits(md.progressbar, md.element);

md.progressbar.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'm') {
        if (name === 'max') { this.max = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 7 && _ch == 'a') {
        if (name === 'animate') { this.animate = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.progressbar.prototype.LoadFromNode = function(node) {
    //console.log('progressbar.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.progressbar.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.progressbar.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.value)) result["value"] = this.value;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.animate)) result["animate"] = this.animate;
    if (!isEmpty(this.max)) result["max"] = this.max;
}
md.progressbar.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// bar class
md.bar = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "bar";
    this.WmtEntity = "bar";
}
util.inherits(md.bar, md.element);

md.bar.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'm') {
        if (name === 'max') { this.max = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 7 && _ch == 'a') {
        if (name === 'animate') { this.animate = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.bar.prototype.LoadFromNode = function(node) {
    //console.log('bar.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.bar.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.bar.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.value)) result["value"] = this.value;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.animate)) result["animate"] = this.animate;
    if (!isEmpty(this.max)) result["max"] = this.max;
}
md.bar.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// rating class
md.rating = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "rating";
    this.WmtEntity = "rating";
}
util.inherits(md.rating, md.element);

md.rating.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'm') {
        if (name === 'max') { this.max = child.v; return true;}
    }
    if (_l == 8 && _ch == 'r') {
        if (name === 'readonly') { this.readonly = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.rating.prototype.LoadFromNode = function(node) {
    //console.log('rating.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.rating.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.rating.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.max)) result["max"] = this.max;
    if (!isEmpty(this.readonly)) result["readonly"] = this.readonly;
}
md.rating.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// timepicker class
md.timepicker = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "timepicker";
    this.WmtEntity = "timepicker";
}
util.inherits(md.timepicker, md.element);

md.timepicker.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 8 && _ch == 'h') {
        if (name === 'hourstep') { this.hour_step = child.v; return true;}
    }
    if (_l == 9 && _ch == 'h') {
        if (name === 'hour-step') { this.hour_step = child.v; return true;}
    }
    if (_l == 10 && _ch == 'm') {
        if (name === 'minutestep') { this.minute_step = child.v; return true;}
    }
    if (_l == 11 && _ch == 'm') {
        if (name === 'minute-step') { this.minute_step = child.v; return true;}
    }
    if (_l == 12 && _ch == 's') {
        if (name === 'showmeridian') { this.show_meridian = child.v; return true;}
    }
    if (_l == 13 && _ch == 's') {
        if (name === 'show-meridian') { this.show_meridian = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.timepicker.prototype.LoadFromNode = function(node) {
    //console.log('timepicker.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.timepicker.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.timepicker.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.hour_step)) result["hour_step"] = this.hour_step;
    if (!isEmpty(this.minute_step)) result["minute_step"] = this.minute_step;
    if (!isEmpty(this.show_meridian)) result["show_meridian"] = this.show_meridian;
}
md.timepicker.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// a class
md.a = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "a";
    this.WmtEntity = "a";
}
util.inherits(md.a, md.element);

md.a.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'r') {
        if (name === 'rel') { this.rel = child.v; return true;}
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'href') { this.href = child.v; return true;}
    }
    if (_l == 4 && _ch == 'p') {
        if (name === 'ping') { this.ping = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'media') { this.media = child.v; return true;}
    }
    if (_l == 6 && _ch == 't') {
        if (name === 'target') { this.target = child.v; return true;}
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'hreflang') { this.hreflang = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.a.prototype.LoadFromNode = function(node) {
    //console.log('a.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.a.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.a.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.href)) result["href"] = this.href;
    if (!isEmpty(this.hreflang)) result["hreflang"] = this.hreflang;
    if (!isEmpty(this.media)) result["media"] = this.media;
    if (!isEmpty(this.ping)) result["ping"] = this.ping;
    if (!isEmpty(this.rel)) result["rel"] = this.rel;
    if (!isEmpty(this.target)) result["target"] = this.target;
    if (!isEmpty(this.type)) result["type"] = this.type;
}
md.a.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// abbr class
md.abbr = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "abbr";
    this.WmtEntity = "abbr";
}
util.inherits(md.abbr, md.element);

md.abbr.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.abbr.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.abbr.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// address class
md.address = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "address";
    this.WmtEntity = "address";
}
util.inherits(md.address, md.element);

md.address.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.address.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.address.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// b class
md.b = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "b";
    this.WmtEntity = "b";
}
util.inherits(md.b, md.element);

md.b.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.b.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.b.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// base class
md.base = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "base";
    this.WmtEntity = "base";
}
util.inherits(md.base, md.element);

md.base.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'h') {
        if (name === 'href') { this.href = child.v; return true;}
    }
    if (_l == 6 && _ch == 't') {
        if (name === 'target') { this.target = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.base.prototype.LoadFromNode = function(node) {
    //console.log('base.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.base.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.base.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.href)) result["href"] = this.href;
    if (!isEmpty(this.target)) result["target"] = this.target;
}
md.base.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// blockquote class
md.blockquote = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "blockquote";
    this.WmtEntity = "blockquote";
}
util.inherits(md.blockquote, md.element);

md.blockquote.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.blockquote.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.blockquote.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// br class
md.br = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "br";
    this.WmtEntity = "br";
}
util.inherits(md.br, md.element);

md.br.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.br.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.br.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// center class
md.center = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "center";
    this.WmtEntity = "center";
}
util.inherits(md.center, md.element);

md.center.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.center.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.center.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// cite class
md.cite = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "cite";
    this.WmtEntity = "cite";
}
util.inherits(md.cite, md.element);

md.cite.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.cite.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.cite.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// code class
md.code = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "code";
    this.WmtEntity = "code";
}
util.inherits(md.code, md.element);

md.code.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.code.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.code.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// div class
md.div = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "div";
    this.WmtEntity = "div";
}
util.inherits(md.div, md.element);

md.div.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.div.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.div.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// dd class
md.dd = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "dd";
    this.WmtEntity = "dd";
}
util.inherits(md.dd, md.element);

md.dd.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.dd.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.dd.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// dfn class
md.dfn = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "dfn";
    this.WmtEntity = "dfn";
}
util.inherits(md.dfn, md.element);

md.dfn.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.dfn.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.dfn.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// dt class
md.dt = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "dt";
    this.WmtEntity = "dt";
}
util.inherits(md.dt, md.element);

md.dt.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.dt.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.dt.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// dl class
md.dl = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "dl";
    this.WmtEntity = "dl";
}
util.inherits(md.dl, md.element);

md.dl.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.dl.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.dl.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// em class
md.em = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "em";
    this.WmtEntity = "em";
}
util.inherits(md.em, md.element);

md.em.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.em.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.em.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h1 class
md.h1 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h1";
    this.WmtEntity = "h1";
}
util.inherits(md.h1, md.element);

md.h1.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h1.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h1.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h2 class
md.h2 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h2";
    this.WmtEntity = "h2";
}
util.inherits(md.h2, md.element);

md.h2.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h2.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h2.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h3 class
md.h3 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h3";
    this.WmtEntity = "h3";
}
util.inherits(md.h3, md.element);

md.h3.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h3.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h3.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h4 class
md.h4 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h4";
    this.WmtEntity = "h4";
}
util.inherits(md.h4, md.element);

md.h4.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h4.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h4.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h5 class
md.h5 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h5";
    this.WmtEntity = "h5";
}
util.inherits(md.h5, md.element);

md.h5.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h5.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h5.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// h6 class
md.h6 = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "h6";
    this.WmtEntity = "h6";
}
util.inherits(md.h6, md.element);

md.h6.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h6.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.h6.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// hr class
md.hr = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "hr";
    this.WmtEntity = "hr";
}
util.inherits(md.hr, md.element);

md.hr.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 's') {
        if (name === 'size') { this.size = child.v; return true;}
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'color') { this.color = child.v; return true;}
    }
    if (_l == 7 && _ch == 'n') {
        if (name === 'noshade') { this.noshade = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.hr.prototype.LoadFromNode = function(node) {
    //console.log('hr.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.hr.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.hr.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.noshade)) result["noshade"] = this.noshade;
    if (!isEmpty(this.size)) result["size"] = this.size;
    if (!isEmpty(this.color)) result["color"] = this.color;
}
md.hr.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// i class
md.i = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "i";
    this.WmtEntity = "i";
}
util.inherits(md.i, md.element);

md.i.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.i.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.i.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// iframe class
md.iframe = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "iframe";
    this.WmtEntity = "iframe";
}
util.inherits(md.iframe, md.element);

md.iframe.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 's') {
        if (name === 'src') { this.src = child.v; return true;}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'width') { this.width = child.v; return true;}
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'height') { this.height = child.v; return true;}
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'srcdoc') { this.srcdoc = child.v; return true;}
    }
    if (_l == 8 && _ch == 's') {
        if (name === 'seamless') { this.seamless = child.v; return true;}
    }
    if (_l == 9 && _ch == 's') {
        if (name === 'scrolling') { this.scrolling = child.v; return true;}
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'sandboxNew') { this.sandboxNew = child.v; return true;}
    }
    if (_l == 11 && _ch == 'f') {
        if (name === 'frameborder') { this.frameborder = child.v; return true;}
    }
    if (_l == 17 && _ch == 'a') {
        if (name === 'allowtransparency') { this.allowtransparency = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.iframe.prototype.LoadFromNode = function(node) {
    //console.log('iframe.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.iframe.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.iframe.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.width)) result["width"] = this.width;
    if (!isEmpty(this.height)) result["height"] = this.height;
    if (!isEmpty(this.src)) result["src"] = this.src;
    if (!isEmpty(this.srcdoc)) result["srcdoc"] = this.srcdoc;
    if (!isEmpty(this.sandboxNew)) result["sandboxNew"] = this.sandboxNew;
    if (!isEmpty(this.scrolling)) result["scrolling"] = this.scrolling;
    if (!isEmpty(this.frameborder)) result["frameborder"] = this.frameborder;
    if (!isEmpty(this.seamless)) result["seamless"] = this.seamless;
    if (!isEmpty(this.allowtransparency)) result["allowtransparency"] = this.allowtransparency;
}
md.iframe.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// img class
md.img = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "img";
    this.WmtEntity = "img";
}
util.inherits(md.img, md.element);

md.img.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'a') {
        if (name === 'alt') { this.alt = child.v; return true;}
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'src') { this.src = child.v; return true;}
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'ismap') { this.ismap = child.v; return true;}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'width') { this.width = child.v; return true;}
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'border') { this.border = child.v; return true;}
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'height') { this.height = child.v; return true;}
    }
    if (_l == 6 && _ch == 'u') {
        if (name === 'usemap') { this.usemap = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.img.prototype.LoadFromNode = function(node) {
    //console.log('img.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.img.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.img.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.alt)) result["alt"] = this.alt;
    if (!isEmpty(this.src)) result["src"] = this.src;
    if (!isEmpty(this.height)) result["height"] = this.height;
    if (!isEmpty(this.width)) result["width"] = this.width;
    if (!isEmpty(this.usemap)) result["usemap"] = this.usemap;
    if (!isEmpty(this.ismap)) result["ismap"] = this.ismap;
    if (!isEmpty(this.border)) result["border"] = this.border;
}
md.img.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// li class
md.li = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "li";
    this.WmtEntity = "li";
}
util.inherits(md.li, md.element);

md.li.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.li.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.li.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// link class
md.link = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "link";
    this.WmtEntity = "link";
}
util.inherits(md.link, md.element);

md.link.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'r') {
        if (name === 'rel') { this.rel = child.v; return true;}
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'href') { this.href = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'media') { this.media = child.v; return true;}
    }
    if (_l == 5 && _ch == 's') {
        if (name === 'sizes') { this.sizes = child.v; return true;}
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'hreflang') { this.hreflang = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.link.prototype.LoadFromNode = function(node) {
    //console.log('link.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.link.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.link.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.href)) result["href"] = this.href;
    if (!isEmpty(this.hreflang)) result["hreflang"] = this.hreflang;
    if (!isEmpty(this.rel)) result["rel"] = this.rel;
    if (!isEmpty(this.media)) result["media"] = this.media;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.sizes)) result["sizes"] = this.sizes;
}
md.link.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// meta class
md.meta = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "meta";
    this.WmtEntity = "meta";
}
util.inherits(md.meta, md.element);

md.meta.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'content') { this.content = child.v; return true;}
        else if (name === 'charset') { this.charset = child.v; return true;}
    }
    if (_l == 8 && _ch == 'p') {
        if (name === 'property') { this.property = child.v; return true;}
    }
    if (_l == 9 && _ch == 'h') {
        if (name === 'httpequiv') { this.http_equiv = child.v; return true;}
    }
    if (_l == 10 && _ch == 'h') {
        if (name === 'http-equiv') { this.http_equiv = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.meta.prototype.LoadFromNode = function(node) {
    //console.log('meta.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.meta.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.meta.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.http_equiv)) result["http_equiv"] = this.http_equiv;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.property)) result["property"] = this.property;
    if (!isEmpty(this.content)) result["content"] = this.content;
    if (!isEmpty(this.charset)) result["charset"] = this.charset;
}
md.meta.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// ol class
md.ol = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "ol";
    this.WmtEntity = "ol";
}
util.inherits(md.ol, md.element);

md.ol.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 's') {
        if (name === 'start') { this.start = child.v; return true;}
    }
    if (_l == 8 && _ch == 'r') {
        if (name === 'reversed') { this.reversed = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.ol.prototype.LoadFromNode = function(node) {
    //console.log('ol.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.ol.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ol.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.start)) result["start"] = this.start;
    if (!isEmpty(this.reversed)) result["reversed"] = this.reversed;
    if (!isEmpty(this.type)) result["type"] = this.type;
}
md.ol.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// object class
md.object = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "object";
    this.WmtEntity = "object";
}
util.inherits(md.object, md.element);

md.object.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.object.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.object.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// p class
md.p = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "p";
    this.WmtEntity = "p";
}
util.inherits(md.p, md.element);

md.p.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.p.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.p.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// pre class
md.pre = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "pre";
    this.WmtEntity = "pre";
}
util.inherits(md.pre, md.element);

md.pre.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.pre.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.pre.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// script class
md.script = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "script";
    this.WmtEntity = "script";
}
util.inherits(md.script, md.element);

md.script.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 's') {
        if (name === 'src') { this.src = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'async') { this.async = child.v; return true;}
    }
    if (_l == 5 && _ch == 'd') {
        if (name === 'defer') { this.defer = child.v; return true;}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'charset') { this.charset = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.script.prototype.LoadFromNode = function(node) {
    //console.log('script.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.script.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.script.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.charset)) result["charset"] = this.charset;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.src)) result["src"] = this.src;
    if (!isEmpty(this.defer)) result["defer"] = this.defer;
    if (!isEmpty(this.async)) result["async"] = this.async;
}
md.script.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// small class
md.small = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "small";
    this.WmtEntity = "small";
}
util.inherits(md.small, md.element);

md.small.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.small.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.small.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// span class
md.span = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "span";
    this.WmtEntity = "span";
}
util.inherits(md.span, md.element);

md.span.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.span.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.span.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// strong class
md.strong = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "strong";
    this.WmtEntity = "strong";
}
util.inherits(md.strong, md.element);

md.strong.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.strong.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.strong.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// sub class
md.sub = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "sub";
    this.WmtEntity = "sub";
}
util.inherits(md.sub, md.element);

md.sub.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.sub.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.sub.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// sup class
md.sup = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "sup";
    this.WmtEntity = "sup";
}
util.inherits(md.sup, md.element);

md.sup.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.sup.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.sup.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// u class
md.u = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "u";
    this.WmtEntity = "u";
}
util.inherits(md.u, md.element);

md.u.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.u.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.u.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// ul class
md.ul = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "ul";
    this.WmtEntity = "ul";
}
util.inherits(md.ul, md.element);

md.ul.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ul.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.ul.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// caption class
md.caption = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "caption";
    this.WmtEntity = "caption";
}
util.inherits(md.caption, md.element);

md.caption.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.caption.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.caption.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// col class
md.col = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "col";
    this.WmtEntity = "col";
}
util.inherits(md.col, md.element);

md.col.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { this.span = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.col.prototype.LoadFromNode = function(node) {
    //console.log('col.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.col.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.col.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.span)) result["span"] = this.span;
}
md.col.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// colgroup class
md.colgroup = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "colgroup";
    this.WmtEntity = "colgroup";
}
util.inherits(md.colgroup, md.element);

md.colgroup.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { this.span = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.colgroup.prototype.LoadFromNode = function(node) {
    //console.log('colgroup.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.colgroup.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.colgroup.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.span)) result["span"] = this.span;
}
md.colgroup.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// td class
md.td = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "td";
    this.WmtEntity = "td";
}
util.inherits(md.td, md.element);

md.td.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'a') {
        if (name === 'align') { this.align = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'width') { this.width = child.v; return true;}
    }
    if (_l == 6 && _ch == 'v') {
        if (name === 'valign') { this.valign = child.v; return true;}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'colspan') { this.colspan = child.v; return true;}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'headers') { this.headers = child.v; return true;}
    }
    if (_l == 7 && _ch == 'r') {
        if (name === 'rowspan') { this.rowspan = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.td.prototype.LoadFromNode = function(node) {
    //console.log('td.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.td.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.td.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.valign)) result["valign"] = this.valign;
    if (!isEmpty(this.align)) result["align"] = this.align;
    if (!isEmpty(this.headers)) result["headers"] = this.headers;
    if (!isEmpty(this.rowspan)) result["rowspan"] = this.rowspan;
    if (!isEmpty(this.colspan)) result["colspan"] = this.colspan;
    if (!isEmpty(this.width)) result["width"] = this.width;
    if (!isEmpty(this.value)) result["value"] = this.value;
}
md.td.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// th class
md.th = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "th";
    this.WmtEntity = "th";
}
util.inherits(md.th, md.element);

md.th.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'a') {
        if (name === 'align') { this.align = child.v; return true;}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'width') { this.width = child.v; return true;}
    }
    if (_l == 6 && _ch == 'v') {
        if (name === 'valign') { this.valign = child.v; return true;}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'colspan') { this.colspan = child.v; return true;}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'headers') { this.headers = child.v; return true;}
    }
    if (_l == 7 && _ch == 'r') {
        if (name === 'rowspan') { this.rowspan = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.th.prototype.LoadFromNode = function(node) {
    //console.log('th.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.th.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.th.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.valign)) result["valign"] = this.valign;
    if (!isEmpty(this.align)) result["align"] = this.align;
    if (!isEmpty(this.headers)) result["headers"] = this.headers;
    if (!isEmpty(this.rowspan)) result["rowspan"] = this.rowspan;
    if (!isEmpty(this.colspan)) result["colspan"] = this.colspan;
    if (!isEmpty(this.width)) result["width"] = this.width;
}
md.th.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tr class
md.tr = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tr";
    this.WmtEntity = "tr";
}
util.inherits(md.tr, md.element);

md.tr.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tr.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.tr.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// thead class
md.thead = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "thead";
    this.WmtEntity = "thead";
}
util.inherits(md.thead, md.element);

md.thead.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.thead.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.thead.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tfoot class
md.tfoot = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tfoot";
    this.WmtEntity = "tfoot";
}
util.inherits(md.tfoot, md.element);

md.tfoot.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tfoot.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.tfoot.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tbody class
md.tbody = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tbody";
    this.WmtEntity = "tbody";
}
util.inherits(md.tbody, md.element);

md.tbody.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tbody.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.tbody.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// table class
md.table = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "table";
    this.WmtEntity = "table";
}
util.inherits(md.table, md.element);

md.table.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 'b') {
        if (name === 'border') { this.border = child.v; return true;}
    }
    if (_l == 7 && _ch == 's') {
        if (name === 'summary') { this.summary = child.v; return true;}
    }
    if (_l == 11 && _ch == 'c') {
        if (name === 'cellpadding') { this.cellpadding = child.v; return true;}
        else if (name === 'cellspacing') { this.cellspacing = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.table.prototype.LoadFromNode = function(node) {
    //console.log('table.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.table.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.table.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.summary)) result["summary"] = this.summary;
    if (!isEmpty(this.border)) result["border"] = this.border;
    if (!isEmpty(this.cellpadding)) result["cellpadding"] = this.cellpadding;
    if (!isEmpty(this.cellspacing)) result["cellspacing"] = this.cellspacing;
}
md.table.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// button class
md.button = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "button";
    this.WmtEntity = "button";
}
util.inherits(md.button, md.element);

md.button.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'r') {
        if (name === 'rel') { this.rel = child.v; return true;}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'autofocus') { this.autofocus = child.v; return true;}
    }
    if (_l == 10 && _ch == 'f') {
        if (name === 'formaction') { this.formaction = child.v; return true;}
        else if (name === 'formmethod') { this.formmethod = child.v; return true;}
        else if (name === 'formtarget') { this.formtarget = child.v; return true;}
    }
    if (_l == 11 && _ch == 'f') {
        if (name === 'formenctype') { this.formenctype = child.v; return true;}
    }
    if (_l == 14 && _ch == 'f') {
        if (name === 'formnovalidate') { this.formnovalidate = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.button.prototype.LoadFromNode = function(node) {
    //console.log('button.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.button.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.button.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.autofocus)) result["autofocus"] = this.autofocus;
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.formaction)) result["formaction"] = this.formaction;
    if (!isEmpty(this.formenctype)) result["formenctype"] = this.formenctype;
    if (!isEmpty(this.formmethod)) result["formmethod"] = this.formmethod;
    if (!isEmpty(this.formnovalidate)) result["formnovalidate"] = this.formnovalidate;
    if (!isEmpty(this.formtarget)) result["formtarget"] = this.formtarget;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.rel)) result["rel"] = this.rel;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.value)) result["value"] = this.value;
}
md.button.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// label class
md.label = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "label";
    this.WmtEntity = "label";
}
util.inherits(md.label, md.element);

md.label.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { this.for = child.v; return true;}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.label.prototype.LoadFromNode = function(node) {
    //console.log('label.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.label.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.label.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.for)) result["for"] = this.for;
}
md.label.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// input class
md.input = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "input";
    this.WmtEntity = "input";
}
util.inherits(md.input, md.element);

md.input.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'a') {
        if (name === 'alt') { this.alt = child.v; return true;}
    }
    if (_l == 3 && _ch == 'm') {
        if (name === 'max') { this.max = child.v; return true;}
        else if (name === 'min') { this.min = child.v; return true;}
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'src') { this.src = child.v; return true;}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'list') { this.list = child.v; return true;}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'size') { this.size = child.v; return true;}
        else if (name === 'step') { this.step = child.v; return true;}
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'width') { this.width = child.v; return true;}
    }
    if (_l == 6 && _ch == 'a') {
        if (name === 'accept') { this.accept = child.v; return true;}
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'height') { this.height = child.v; return true;}
    }
    if (_l == 7 && _ch == 'c') {
        if (name === 'checked') { this.checked = child.v; return true;}
    }
    if (_l == 7 && _ch == 'p') {
        if (name === 'pattern') { this.pattern = child.v; return true;}
    }
    if (_l == 8 && _ch == 'a') {
        if (name === 'autofill') { this.autofill = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    if (_l == 8 && _ch == 'm') {
        if (name === 'multiple') { this.multiple = child.v; return true;}
    }
    if (_l == 8 && _ch == 'r') {
        if (name === 'readonly') { this.readonly = child.v; return true;}
        else if (name === 'required') { this.required = child.v; return true;}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'autofocus') { this.autofocus = child.v; return true;}
    }
    if (_l == 9 && _ch == 'm') {
        if (name === 'maxlength') { this.maxlength = child.v; return true;}
    }
    if (_l == 10 && _ch == 'f') {
        if (name === 'formaction') { this.formaction = child.v; return true;}
        else if (name === 'formmethod') { this.formmethod = child.v; return true;}
        else if (name === 'formtarget') { this.formtarget = child.v; return true;}
    }
    if (_l == 11 && _ch == 'f') {
        if (name === 'formenctype') { this.formenctype = child.v; return true;}
    }
    if (_l == 11 && _ch == 'p') {
        if (name === 'placeholder') { this.placeholder = child.v; return true;}
    }
    if (_l == 12 && _ch == 'a') {
        if (name === 'autocomplete') { this.autocomplete = child.v; return true;}
    }
    if (_l == 13 && _ch == 'x') {
        if (name === 'xwebkitspeech') { this.x_webkit_speech = child.v; return true;}
    }
    if (_l == 14 && _ch == 'f') {
        if (name === 'formnovalidate') { this.formnovalidate = child.v; return true;}
    }
    if (_l == 15 && _ch == 'x') {
        if (name === 'x-webkit-speech') { this.x_webkit_speech = child.v; return true;}
    }
    if (_l == 20 && _ch == 'o') {
        if (name === 'onwebkitspeechchange') { this.onwebkitspeechchange = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.input.prototype.LoadFromNode = function(node) {
    //console.log('input.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.input.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.input.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.accept)) result["accept"] = this.accept;
    if (!isEmpty(this.alt)) result["alt"] = this.alt;
    if (!isEmpty(this.autocomplete)) result["autocomplete"] = this.autocomplete;
    if (!isEmpty(this.autofill)) result["autofill"] = this.autofill;
    if (!isEmpty(this.autofocus)) result["autofocus"] = this.autofocus;
    if (!isEmpty(this.checked)) result["checked"] = this.checked;
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.formaction)) result["formaction"] = this.formaction;
    if (!isEmpty(this.formenctype)) result["formenctype"] = this.formenctype;
    if (!isEmpty(this.formmethod)) result["formmethod"] = this.formmethod;
    if (!isEmpty(this.formnovalidate)) result["formnovalidate"] = this.formnovalidate;
    if (!isEmpty(this.formtarget)) result["formtarget"] = this.formtarget;
    if (!isEmpty(this.height)) result["height"] = this.height;
    if (!isEmpty(this.list)) result["list"] = this.list;
    if (!isEmpty(this.max)) result["max"] = this.max;
    if (!isEmpty(this.maxlength)) result["maxlength"] = this.maxlength;
    if (!isEmpty(this.min)) result["min"] = this.min;
    if (!isEmpty(this.multiple)) result["multiple"] = this.multiple;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.pattern)) result["pattern"] = this.pattern;
    if (!isEmpty(this.placeholder)) result["placeholder"] = this.placeholder;
    if (!isEmpty(this.readonly)) result["readonly"] = this.readonly;
    if (!isEmpty(this.required)) result["required"] = this.required;
    if (!isEmpty(this.size)) result["size"] = this.size;
    if (!isEmpty(this.src)) result["src"] = this.src;
    if (!isEmpty(this.step)) result["step"] = this.step;
    if (!isEmpty(this.width)) result["width"] = this.width;
    if (!isEmpty(this.value)) result["value"] = this.value;
    if (!isEmpty(this.x_webkit_speech)) result["x_webkit_speech"] = this.x_webkit_speech;
    if (!isEmpty(this.onwebkitspeechchange)) result["onwebkitspeechchange"] = this.onwebkitspeechchange;
}
md.input.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// option class
md.option = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "option";
    this.WmtEntity = "option";
}
util.inherits(md.option, md.element);

md.option.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { this.label = child.v; return true;}
    }
    if (_l == 5 && _ch == 'v') {
        if (name === 'value') { this.value = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    if (_l == 8 && _ch == 's') {
        if (name === 'selected') { this.selected = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.option.prototype.LoadFromNode = function(node) {
    //console.log('option.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.option.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.option.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.selected)) result["selected"] = this.selected;
    if (!isEmpty(this.label)) result["label"] = this.label;
    if (!isEmpty(this.value)) result["value"] = this.value;
}
md.option.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// optgroup class
md.optgroup = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "optgroup";
    this.WmtEntity = "optgroup";
}
util.inherits(md.optgroup, md.element);

md.optgroup.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { this.label = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.optgroup.prototype.LoadFromNode = function(node) {
    //console.log('optgroup.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.optgroup.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.optgroup.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.label)) result["label"] = this.label;
}
md.optgroup.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// select class
md.select = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "select";
    this.WmtEntity = "select";
}
util.inherits(md.select, md.element);

md.select.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'size') { this.size = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    if (_l == 8 && _ch == 'm') {
        if (name === 'multiple') { this.multiple = child.v; return true;}
    }
    if (_l == 8 && _ch == 'r') {
        if (name === 'required') { this.required = child.v; return true;}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'autofocus') { this.autofocus = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.select.prototype.LoadFromNode = function(node) {
    //console.log('select.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.select.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.select.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.autofocus)) result["autofocus"] = this.autofocus;
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.multiple)) result["multiple"] = this.multiple;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.required)) result["required"] = this.required;
    if (!isEmpty(this.size)) result["size"] = this.size;
}
md.select.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// textarea class
md.textarea = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "textarea";
    this.WmtEntity = "textarea";
}
util.inherits(md.textarea, md.element);

md.textarea.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'c') {
        if (name === 'cols') { this.cols = child.v; return true;}
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 4 && _ch == 'r') {
        if (name === 'rows') { this.rows = child.v; return true;}
    }
    if (_l == 4 && _ch == 'w') {
        if (name === 'wrap') { this.wrap = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    if (_l == 8 && _ch == 'r') {
        if (name === 'readonly') { this.readonly = child.v; return true;}
        else if (name === 'required') { this.required = child.v; return true;}
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'autofocus') { this.autofocus = child.v; return true;}
    }
    if (_l == 9 && _ch == 'm') {
        if (name === 'maxlength') { this.maxlength = child.v; return true;}
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'spellcheck') { this.spellcheck = child.v; return true;}
    }
    if (_l == 11 && _ch == 'p') {
        if (name === 'placeholder') { this.placeholder = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.textarea.prototype.LoadFromNode = function(node) {
    //console.log('textarea.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.textarea.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.textarea.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.autofocus)) result["autofocus"] = this.autofocus;
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.maxlength)) result["maxlength"] = this.maxlength;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.placeholder)) result["placeholder"] = this.placeholder;
    if (!isEmpty(this.readonly)) result["readonly"] = this.readonly;
    if (!isEmpty(this.required)) result["required"] = this.required;
    if (!isEmpty(this.rows)) result["rows"] = this.rows;
    if (!isEmpty(this.cols)) result["cols"] = this.cols;
    if (!isEmpty(this.wrap)) result["wrap"] = this.wrap;
    if (!isEmpty(this.spellcheck)) result["spellcheck"] = this.spellcheck;
}
md.textarea.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// legend class
md.legend = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "legend";
    this.WmtEntity = "legend";
}
util.inherits(md.legend, md.element);

md.legend.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.legend.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.legend.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// fieldset class
md.fieldset = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "fieldset";
    this.WmtEntity = "fieldset";
}
util.inherits(md.fieldset, md.element);

md.fieldset.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { this.form = child.v; return true;}
    }
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'disabled') { this.disabled = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.fieldset.prototype.LoadFromNode = function(node) {
    //console.log('fieldset.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.fieldset.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.fieldset.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.disabled)) result["disabled"] = this.disabled;
    if (!isEmpty(this.form)) result["form"] = this.form;
    if (!isEmpty(this.name)) result["name"] = this.name;
}
md.fieldset.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// form class
md.form = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "form";
    this.WmtEntity = "form";
}
util.inherits(md.form, md.element);

md.form.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 'n') {
        if (name === 'name') { this.name = child.v; return true;}
    }
    if (_l == 6 && _ch == 'a') {
        if (name === 'action') { this.action = child.v; return true;}
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { this.method = child.v; return true;}
    }
    if (_l == 6 && _ch == 't') {
        if (name === 'target') { this.target = child.v; return true;}
    }
    if (_l == 7 && _ch == 'e') {
        if (name === 'enctype') { this.enctype = child.v; return true;}
    }
    if (_l == 10 && _ch == 'n') {
        if (name === 'novalidate') { this.novalidate = child.v; return true;}
    }
    if (_l == 12 && _ch == 'a') {
        if (name === 'autocomplete') { this.autocomplete = child.v; return true;}
    }
    if (_l == 13 && _ch == 'a') {
        if (name === 'acceptcharset') { this.accept_charset = child.v; return true;}
    }
    if (_l == 14 && _ch == 'a') {
        if (name === 'accept-charset') { this.accept_charset = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.form.prototype.LoadFromNode = function(node) {
    //console.log('form.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.form.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.form.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.accept_charset)) result["accept_charset"] = this.accept_charset;
    if (!isEmpty(this.action)) result["action"] = this.action;
    if (!isEmpty(this.autocomplete)) result["autocomplete"] = this.autocomplete;
    if (!isEmpty(this.enctype)) result["enctype"] = this.enctype;
    if (!isEmpty(this.method)) result["method"] = this.method;
    if (!isEmpty(this.name)) result["name"] = this.name;
    if (!isEmpty(this.novalidate)) result["novalidate"] = this.novalidate;
    if (!isEmpty(this.target)) result["target"] = this.target;
}
md.form.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// canvas class
md.canvas = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "canvas";
    this.WmtEntity = "canvas";
}
util.inherits(md.canvas, md.element);

md.canvas.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.canvas.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.canvas.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// audio class
md.audio = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "audio";
    this.WmtEntity = "audio";
}
util.inherits(md.audio, md.element);

md.audio.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.audio.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.audio.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// video class
md.video = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "video";
    this.WmtEntity = "video";
}
util.inherits(md.video, md.element);

md.video.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.video.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.video.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// source class
md.source = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "source";
    this.WmtEntity = "source";
}
util.inherits(md.source, md.element);

md.source.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.source.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.source.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// track class
md.track = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "track";
    this.WmtEntity = "track";
}
util.inherits(md.track, md.element);

md.track.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.track.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.track.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// embed class
md.embed = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "embed";
    this.WmtEntity = "embed";
}
util.inherits(md.embed, md.element);

md.embed.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.embed.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.embed.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// datalist class
md.datalist = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "datalist";
    this.WmtEntity = "datalist";
}
util.inherits(md.datalist, md.element);

md.datalist.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.datalist.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.datalist.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// footer class
md.footer = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "footer";
    this.WmtEntity = "footer";
}
util.inherits(md.footer, md.element);

md.footer.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.footer.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.footer.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// heading class
md.heading = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "heading";
    this.WmtEntity = "heading";
}
util.inherits(md.heading, md.element);

md.heading.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.heading.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.heading.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// keygen class
md.keygen = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "keygen";
    this.WmtEntity = "keygen";
}
util.inherits(md.keygen, md.element);

md.keygen.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.keygen.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.keygen.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// output class
md.output = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "output";
    this.WmtEntity = "output";
}
util.inherits(md.output, md.element);

md.output.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.output.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.output.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// header class
md.header = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "header";
    this.WmtEntity = "header";
}
util.inherits(md.header, md.element);

md.header.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.header.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.header.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// hgroup class
md.hgroup = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "hgroup";
    this.WmtEntity = "hgroup";
}
util.inherits(md.hgroup, md.element);

md.hgroup.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.hgroup.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.hgroup.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// nav class
md.nav = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "nav";
    this.WmtEntity = "nav";
}
util.inherits(md.nav, md.element);

md.nav.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.nav.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.nav.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// section class
md.section = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "section";
    this.WmtEntity = "section";
}
util.inherits(md.section, md.element);

md.section.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.section.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.section.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// main class
md.main = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "main";
    this.WmtEntity = "main";
}
util.inherits(md.main, md.element);

md.main.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.main.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.main.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// article class
md.article = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "article";
    this.WmtEntity = "article";
}
util.inherits(md.article, md.element);

md.article.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.article.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.article.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// aside class
md.aside = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "aside";
    this.WmtEntity = "aside";
}
util.inherits(md.aside, md.element);

md.aside.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.aside.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.aside.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// details class
md.details = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "details";
    this.WmtEntity = "details";
}
util.inherits(md.details, md.element);

md.details.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.details.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.details.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// summary class
md.summary = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "summary";
    this.WmtEntity = "summary";
}
util.inherits(md.summary, md.element);

md.summary.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.summary.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.summary.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// figure class
md.figure = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "figure";
    this.WmtEntity = "figure";
}
util.inherits(md.figure, md.element);

md.figure.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.figure.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.figure.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// figcaption class
md.figcaption = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "figcaption";
    this.WmtEntity = "figcaption";
}
util.inherits(md.figcaption, md.element);

md.figcaption.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.figcaption.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.figcaption.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// mark class
md.mark = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "mark";
    this.WmtEntity = "mark";
}
util.inherits(md.mark, md.element);

md.mark.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.mark.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.mark.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// time class
md.time = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "time";
    this.WmtEntity = "time";
}
util.inherits(md.time, md.element);

md.time.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.time.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.time.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// bdi class
md.bdi = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "bdi";
    this.WmtEntity = "bdi";
}
util.inherits(md.bdi, md.element);

md.bdi.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.bdi.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.bdi.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// wbr class
md.wbr = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "wbr";
    this.WmtEntity = "wbr";
}
util.inherits(md.wbr, md.element);

md.wbr.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.wbr.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.wbr.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// dialog class
md.dialog = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "dialog";
    this.WmtEntity = "dialog";
}
util.inherits(md.dialog, md.element);

md.dialog.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.dialog.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.dialog.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// command class
md.command = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "command";
    this.WmtEntity = "command";
}
util.inherits(md.command, md.element);

md.command.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.command.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.command.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// meter class
md.meter = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "meter";
    this.WmtEntity = "meter";
}
util.inherits(md.meter, md.element);

md.meter.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.meter.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.meter.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// progress class
md.progress = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "progress";
    this.WmtEntity = "progress";
}
util.inherits(md.progress, md.element);

md.progress.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.progress.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.progress.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// ruby class
md.ruby = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "ruby";
    this.WmtEntity = "ruby";
}
util.inherits(md.ruby, md.element);

md.ruby.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ruby.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.ruby.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// rt class
md.rt = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "rt";
    this.WmtEntity = "rt";
}
util.inherits(md.rt, md.element);

md.rt.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.rt.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.rt.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// rp class
md.rp = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "rp";
    this.WmtEntity = "rp";
}
util.inherits(md.rp, md.element);

md.rp.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.rp.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.rp.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tabset class
md.tabset = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tabset";
    this.WmtEntity = "tabset";
}
util.inherits(md.tabset, md.element);

md.tabset.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 8 && _ch == 'v') {
        if (name === 'vertical') { this.vertical = child.v; return true;}
    }
    if (_l == 9 && _ch == 'j') {
        if (name === 'justified') { this.justified = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.tabset.prototype.LoadFromNode = function(node) {
    //console.log('tabset.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.tabset.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tabset.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.vertical)) result["vertical"] = this.vertical;
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.justified)) result["justified"] = this.justified;
}
md.tabset.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tab class
md.tab = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tab";
    this.WmtEntity = "tab";
}
util.inherits(md.tab, md.element);

md.tab.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 'a') {
        if (name === 'active') { this.active = child.v; return true;}
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'disable') { this.disable = child.v; return true;}
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'heading') { this.heading = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md.tab.prototype.LoadFromNode = function(node) {
    //console.log('tab.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md.tab.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tab.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.heading)) result["heading"] = this.heading;
    if (!isEmpty(this.active)) result["active"] = this.active;
    if (!isEmpty(this.disable)) result["disable"] = this.disable;
}
md.tab.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// tab_heading class
md.tab_heading = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "tab-heading";
    this.WmtEntity = "tab_heading";
}
util.inherits(md.tab_heading, md.element);

md.tab_heading.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tab_heading.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.tab_heading.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _dot class
md._dot = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = ".";
    this.WmtEntity = "_dot";
}
util.inherits(md._dot, md.element);

md._dot.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._dot.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md._dot.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _text class
md._text = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "+";
    this.WmtEntity = "_text";
}
util.inherits(md._text, md.element);

md._text.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._text.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md._text.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _textLF class
md._textLF = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "++";
    this.WmtEntity = "_textLF";
}
util.inherits(md._textLF, md.element);

md._textLF.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._textLF.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md._textLF.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _style class
md._style = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "_style";
    this.WmtEntity = "_style";
}
util.inherits(md._style, md.element);

md._style.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { this.type = child.v; return true;}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'media') { this.media = child.v; return true;}
    }
    ok = md.element.prototype.LoadChild.call(this, child);
    return ok;
}
md._style.prototype.LoadFromNode = function(node) {
    //console.log('_style.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.htmlException("Tag not recognized: " + item.n, item, me);
    });
}
md._style.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._style.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.type)) result["type"] = this.type;
    if (!isEmpty(this.media)) result["media"] = this.media;
}
md._style.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// _title class
md._title = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "_title";
    this.WmtEntity = "_title";
}
util.inherits(md._title, md.element);

md._title.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md._title.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md._title.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// css class
md.css = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "css";
    this.WmtEntity = "css";
}
util.inherits(md.css, md.element);

md.css.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.css.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.css.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// js class
md.js = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "js";
    this.WmtEntity = "js";
}
util.inherits(md.js, md.element);

md.js.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.js.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.js.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
/*
    ready class
    script on document ready
*/
md.ready = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "ready";
    this.WmtEntity = "ready";
}
util.inherits(md.ready, md.element);

md.ready.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ready.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.ready.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// if class
md.if = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "if";
    this.WmtEntity = "if";
}
util.inherits(md.if, md.element);

md.if.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.if.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.if.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// else class
md.else = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "else";
    this.WmtEntity = "else";
}
util.inherits(md.else, md.element);

md.else.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.else.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.else.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// elif class
md.elif = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "elif";
    this.WmtEntity = "elif";
}
util.inherits(md.elif, md.element);

md.elif.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.elif.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.elif.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// elseif class
md.elseif = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "elseif";
    this.WmtEntity = "elseif";
}
util.inherits(md.elseif, md.element);

md.elseif.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.elseif.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.elseif.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// for class
md.for = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "for";
    this.WmtEntity = "for";
}
util.inherits(md.for, md.element);

md.for.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.for.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.for.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// foreach class
md.foreach = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "foreach";
    this.WmtEntity = "foreach";
}
util.inherits(md.foreach, md.element);

md.foreach.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.foreach.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.foreach.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// while class
md.while = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "while";
    this.WmtEntity = "while";
}
util.inherits(md.while, md.element);

md.while.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.while.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.while.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// var class
md.var = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "var";
    this.WmtEntity = "var";
}
util.inherits(md.var, md.element);

md.var.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.var.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.var.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// set class
md.set = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "set";
    this.WmtEntity = "set";
}
util.inherits(md.set, md.element);

md.set.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.set.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.set.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// return class
md.return = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "return";
    this.WmtEntity = "return";
}
util.inherits(md.return, md.element);

md.return.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.return.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.return.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// rule class
md.rule = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "rule";
    this.WmtEntity = "rule";
}
util.inherits(md.rule, md.element);

md.rule.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.rule.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.rule.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// comment class
md.comment = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "#";
    this.WmtEntity = "comment";
}
util.inherits(md.comment, md.element);

md.comment.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.comment.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.comment.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// ifCondition class
md.ifCondition = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "#if--";
    this.WmtEntity = "ifCondition";
}
util.inherits(md.ifCondition, md.element);

md.ifCondition.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ifCondition.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.ifCondition.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// ifConditionDown class
md.ifConditionDown = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "#if";
    this.WmtEntity = "ifConditionDown";
}
util.inherits(md.ifConditionDown, md.element);

md.ifConditionDown.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ifConditionDown.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.ifConditionDown.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// extends class
md.extends = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "extends";
    this.WmtEntity = "extends";
}
util.inherits(md.extends, md.element);

md.extends.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.extends.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.extends.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// block class
md.block = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "block";
    this.WmtEntity = "block";
}
util.inherits(md.block, md.element);

md.block.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.block.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.block.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// autoescape class
md.autoescape = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "autoescape";
    this.WmtEntity = "autoescape";
}
util.inherits(md.autoescape, md.element);

md.autoescape.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.autoescape.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.autoescape.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// filter class
md.filter = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "filter";
    this.WmtEntity = "filter";
}
util.inherits(md.filter, md.element);

md.filter.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.filter.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.filter.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// raw class
md.raw = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "raw";
    this.WmtEntity = "raw";
}
util.inherits(md.raw, md.element);

md.raw.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.raw.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.raw.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// import class
md.import = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "import";
    this.WmtEntity = "import";
}
util.inherits(md.import, md.element);

md.import.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.import.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.import.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// include class
md.include = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "include";
    this.WmtEntity = "include";
}
util.inherits(md.include, md.element);

md.include.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.include.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.include.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// macro class
md.macro = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "macro";
    this.WmtEntity = "macro";
}
util.inherits(md.macro, md.element);

md.macro.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.macro.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.macro.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// spaceless class
md.spaceless = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "spaceless";
    this.WmtEntity = "spaceless";
}
util.inherits(md.spaceless, md.element);

md.spaceless.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.spaceless.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.spaceless.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// parent class
md.parent = function(name, sourceLineInfo) {
    md.element.call(this, name, sourceLineInfo);
    this.WmtTag = "parent";
    this.WmtEntity = "parent";
}
util.inherits(md.parent, md.element);

md.parent.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.parent.prototype.toJsonProperties = function(result) {
    md.element.prototype.toJsonProperties.call(this, result);
}
md.parent.prototype.toJsonChildren = function(result) {
    md.element.prototype.toJsonChildren.call(this, result);
}
// htmlContext class
md.htmlContext = function() {
}
md.htmlContext.prototype.verifyEnum = function (value, allowed) {
    return true;
}
// htmlException class
md.htmlException = function(message, node, instance) {
    this.message = message + (node && instance ? ', row:' + node.r + ', col:' + node.c + ', source:' + instance.WmtSourceFilepath(node.s) : '');
    this.stack = new Error().stack;
    this.node = node;
}
md.__tagEntityMapping = { '<': 'element', '_ng-view': '_ng_view', '_ngview': '_ng_view', 'accordion-heading': 'accordion_heading', 'accordionheading': 'accordion_heading', 'accordion-group': 'accordion_group', 'accordiongroup': 'accordion_group', 'tab-heading': 'tab_heading', 'tabheading': 'tab_heading', '.': '_dot', '+': '_text', '++': '_textLF', '#': 'comment', '#if--': 'ifCondition', '#if': 'ifCondition', '@': 'attribute' };
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isbool(value) {
    return value === 'true' || value === 'false';
}
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) return defaultValue;
    return value;
}
function parsebool(value, defaultValue, node) {
    if (isEmpty( value )) return defaultValue;
    if (!isbool(value)) throw new nodeException('Must be a boolean value ("true" or "false"), got:' + value, node);
    return value === 'true' ? true : false;
}
