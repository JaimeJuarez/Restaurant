/*
  Generated by Tree2Soft 0.1 Beta. On 17/09/2015 20:21:25.
  Transformer
    Type     : Tree2Soft.Wmt.Common.Concepts.Schema.Writers.Js.Model.ModelWriter
    Assembly : Tree2Soft.Wmt.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
*/
var util = require('util');

var md = module.exports = {};

md.TSourceLineInfo = function(row, col, source) {
    this.row = row;
    this.col = col;
    this.source = source;
}
md.cssInstance = function(name, sourceLineInfo) {
    this.WmtName = name || '';
    this.WmtSourceLineInfo = sourceLineInfo;
    this.WmtChildren = [];
}
md.cssInstance.prototype.WmtRoot = function() {
    return this.WmtParent == null ? this : this.WmtParent.WmtRoot();
}
md.cssInstance.prototype.WmtSourceFilepath = function(sourceKey) {
    return this.WmtRoot().loadContext.getSourceFilepath(sourceKey);
}
md.cssInstance.prototype.WmtVerify = function(ctx) {
}
md.cssInstance.prototype.WmtInitialize = function(ctx) {
}
md.cssInstance.prototype.WmtInitializeAsync = function(ctx, callback) {
    callback(null);
}
md.cssInstance.prototype.AddChild = function(node) {
    node.WmtParent = this;
    this.WmtChildren.push(node);
}
md.cssInstance.prototype.loadToChildColl = function(child, type, coll) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    coll.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.cssInstance.prototype.loadToWmtChildren = function(child, type) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    this.WmtChildren.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.cssInstance.prototype.toJsonProperties = function(result) {
    result.WmtTag = this.WmtTag;
    result.WmtName = this.WmtName;
}
md.cssInstance.prototype.toJsonChildren = function(result) {
    if (this.WmtChildren.length > 0) {
        var children = [];
        this.WmtChildren.forEach(function (item) {;
            children.push(item.toJson());
        });
        result.WmtChildren = children;
    }
}
md.cssInstance.prototype.error = function(message, node) {
    throw new md.cssException(message, node, this);
}
// css class
md.css = function(name, sourceLineInfo) {
    md.cssInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "css";
    this.WmtEntity = "css";
    this.items = [];
    this.includes = [];
}
util.inherits(md.css, md.cssInstance);

md.css.prototype.getitem = function(name) {
    var found = null;
    this.items.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.css.prototype.Addinclude = function(name, sourceLineInfo) {
    var retval = new md.include(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.includes.push(retval);
    return retval;
}
md.css.prototype.getinclude = function(name) {
    var found = null;
    this.includes.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.css.prototype.WmtVerify = function(ctx) {
    this.items.forEach(function (item) { item.WmtVerify(ctx); });
    this.includes.forEach(function (item) { item.WmtVerify(ctx); });
    md.cssInstance.prototype.WmtVerify.call(this, ctx);
}
md.css.prototype.WmtInitialize = function(ctx) {
    this.items.forEach(function (item) { item.WmtInitialize(ctx); });
    this.includes.forEach(function (item) { item.WmtInitialize(ctx); });
    md.cssInstance.prototype.WmtInitialize.call(this, ctx);
}
md.css.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.items);}
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.property, this.items);}
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.rule, this.items);}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'media') { return this.loadToChildColl(child, md.media, this.items);}
    }
    if (_l == 6 && _ch == 'i') {
        if (name === 'import') { return this.loadToChildColl(child, md.import, this.items);}
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'include') { return this.loadToChildColl(child, md.include, this.includes);}
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'fontface') { return this.loadToChildColl(child, md.fontface, this.items);}
    }
    if (_l == 8 && _ch == 'k') {
        if (name === 'keyframe') { return this.loadToChildColl(child, md.keyframe, this.items);}
    }
    if (_l == 9 && _ch == 'f') {
        if (name === 'font-face') { return this.loadToChildColl(child, md.fontface, this.items);}
    }
    if (_l == 9 && _ch == 'k') {
        if (name === 'keyframes') { return this.loadToChildColl(child, md.keyframes, this.items);}
    }
    ok = false;
    return ok;
}
md.css.prototype.LoadFromNode = function(node) {
    //console.log('css.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.cssException("Tag not recognized: " + item.n, item, me);
    });
}
md.css.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.css.prototype.toJsonProperties = function(result) {
    md.cssInstance.prototype.toJsonProperties.call(this, result);
}
md.css.prototype.toJsonChildren = function(result) {
    md.cssInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.items.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['items'] = items;
    items = [];
    this.includes.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['includes'] = items;
}
// include class
md.include = function(name, sourceLineInfo) {
    md.cssInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "include";
    this.WmtEntity = "include";
}
util.inherits(md.include, md.cssInstance);

md.include.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.include.prototype.toJsonProperties = function(result) {
    md.cssInstance.prototype.toJsonProperties.call(this, result);
}
md.include.prototype.toJsonChildren = function(result) {
    md.cssInstance.prototype.toJsonChildren.call(this, result);
}
// item class
md.item = function(name, sourceLineInfo) {
    md.cssInstance.call(this, name, sourceLineInfo);
    this.items = [];
}
util.inherits(md.item, md.cssInstance);

md.item.prototype.getitem = function(name) {
    var found = null;
    this.items.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.item.prototype.WmtVerify = function(ctx) {
    this.items.forEach(function (item) { item.WmtVerify(ctx); });
    md.cssInstance.prototype.WmtVerify.call(this, ctx);
}
md.item.prototype.WmtInitialize = function(ctx) {
    this.items.forEach(function (item) { item.WmtInitialize(ctx); });
    md.cssInstance.prototype.WmtInitialize.call(this, ctx);
}
md.item.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.items);}
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.property, this.items);}
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.rule, this.items);}
    }
    if (_l == 5 && _ch == 'm') {
        if (name === 'media') { return this.loadToChildColl(child, md.media, this.items);}
    }
    if (_l == 6 && _ch == 'i') {
        if (name === 'import') { return this.loadToChildColl(child, md.import, this.items);}
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'fontface') { return this.loadToChildColl(child, md.fontface, this.items);}
    }
    if (_l == 8 && _ch == 'k') {
        if (name === 'keyframe') { return this.loadToChildColl(child, md.keyframe, this.items);}
    }
    if (_l == 9 && _ch == 'f') {
        if (name === 'font-face') { return this.loadToChildColl(child, md.fontface, this.items);}
    }
    if (_l == 9 && _ch == 'k') {
        if (name === 'keyframes') { return this.loadToChildColl(child, md.keyframes, this.items);}
    }
    ok = false;
    return ok;
}
md.item.prototype.LoadFromNode = function(node) {
    //console.log('item.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.cssException("Tag not recognized: " + item.n, item, me);
    });
}
md.item.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.item.prototype.toJsonProperties = function(result) {
    md.cssInstance.prototype.toJsonProperties.call(this, result);
}
md.item.prototype.toJsonChildren = function(result) {
    md.cssInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.items.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['items'] = items;
}
// comment class
md.comment = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "#";
    this.WmtEntity = "comment";
}
util.inherits(md.comment, md.item);

md.comment.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.comment.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.comment.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// rule class
md.rule = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "@";
    this.WmtEntity = "rule";
    this.selects = [];
}
util.inherits(md.rule, md.item);

md.rule.prototype.Addselect = function(name, sourceLineInfo) {
    var retval = new md.select(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.selects.push(retval);
    return retval;
}
md.rule.prototype.getselect = function(name) {
    var found = null;
    this.selects.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.rule.prototype.WmtVerify = function(ctx) {
    this.selects.forEach(function (item) { item.WmtVerify(ctx); });
    md.item.prototype.WmtVerify.call(this, ctx);
}
md.rule.prototype.WmtInitialize = function(ctx) {
    this.selects.forEach(function (item) { item.WmtInitialize(ctx); });
    md.item.prototype.WmtInitialize.call(this, ctx);
}
md.rule.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.select, this.selects);}
    }
    ok = md.item.prototype.LoadChild.call(this, child);
    return ok;
}
md.rule.prototype.LoadFromNode = function(node) {
    //console.log('rule.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.cssException("Tag not recognized: " + item.n, item, me);
    });
}
md.rule.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.rule.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.rule.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.selects.forEach(function (item) { 
        items.push(item.toJson());
    });
    result['selects'] = items;
}
// select class
md.select = function(name, sourceLineInfo) {
    md.cssInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "+";
    this.WmtEntity = "select";
}
util.inherits(md.select, md.cssInstance);

md.select.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.select.prototype.toJsonProperties = function(result) {
    md.cssInstance.prototype.toJsonProperties.call(this, result);
}
md.select.prototype.toJsonChildren = function(result) {
    md.cssInstance.prototype.toJsonChildren.call(this, result);
}
// property class
md.property = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = ".";
    this.WmtEntity = "property";
}
util.inherits(md.property, md.item);

md.property.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.property.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.property.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// media class
md.media = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "media";
    this.WmtEntity = "media";
}
util.inherits(md.media, md.item);

md.media.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.media.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.media.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// keyframes class
md.keyframes = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "keyframes";
    this.WmtEntity = "keyframes";
}
util.inherits(md.keyframes, md.item);

md.keyframes.prototype.LoadChild = function(child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 'v') {
        if (name === 'vendor') { this.vendor = child.v; return true;}
    }
    ok = md.item.prototype.LoadChild.call(this, child);
    return ok;
}
md.keyframes.prototype.LoadFromNode = function(node) {
    //console.log('keyframes.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.cssException("Tag not recognized: " + item.n, item, me);
    });
}
md.keyframes.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.keyframes.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.vendor)) result["vendor"] = this.vendor;
}
md.keyframes.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// keyframe class
md.keyframe = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "keyframe";
    this.WmtEntity = "keyframe";
}
util.inherits(md.keyframe, md.item);

md.keyframe.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.keyframe.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.keyframe.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// fontface class
md.fontface = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "font-face";
    this.WmtEntity = "fontface";
}
util.inherits(md.fontface, md.item);

md.fontface.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.fontface.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.fontface.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// import class
md.import = function(name, sourceLineInfo) {
    md.item.call(this, name, sourceLineInfo);
    this.WmtTag = "import";
    this.WmtEntity = "import";
}
util.inherits(md.import, md.item);

md.import.prototype.toJson = function() {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.import.prototype.toJsonProperties = function(result) {
    md.item.prototype.toJsonProperties.call(this, result);
}
md.import.prototype.toJsonChildren = function(result) {
    md.item.prototype.toJsonChildren.call(this, result);
}
// cssContext class
md.cssContext = function() {
}
// cssException class
md.cssException = function(message, node, instance) {
    this.message = message + (node && instance ? ', row:' + node.r + ', col:' + node.c + ', source:' + instance.WmtSourceFilepath(node.s) : '');
    this.stack = new Error().stack;
    this.node = node;
}
md.__tagEntityMapping = { '#': 'comment', '@': 'rule', '.': 'property', 'font-face': 'fontface', '+': 'select' };
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isbool(value) {
    return value === 'true' || value === 'false';
}
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) return defaultValue;
    return value;
}
