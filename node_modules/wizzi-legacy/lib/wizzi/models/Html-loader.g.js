var util = require('util')
var path = require('path')
var file = require('wizzi-core').file;
var pathutil = require('wizzi-core').pathutil;
var log = require('wizzi-core').log(module, { tofile: true });
var ittf = require('wizzi-ittf');
var htmlschema = require('./html-model.g');

var md = module.exports = {};

md.load = function (filepath, context, callback) {
    var start = Date.now();
    try {
        ittf.loadModel(filepath, context, function (err, ittfmodel) {
            if (err) {
                callback(err);
            }
            log.info('Loaded ittf model ' + filepath + ' in ' + (Date.now() - start) + ' ms');
            md._load(ittfmodel, filepath, callback);
        });
    } catch (ex) {
        ex.message = 'Error loading wmt model for html model ' + filepath + '.\n' + ex.message;
        throw ex;
    }
}

md.loadFromString = function (content, context, callback) {
    var start = Date.now()
        , filepath = 'text://';
    try {
        ittf.loadModelFromString(content, context, function (err, ittfmodel) {
            if (err) {
                callback(err);
            }
            console.log('Loaded ittf model ' + filepath + ' in ' + (Date.now() - start) + ' ms');
            md._load(ittfmodel, filepath, callback);
        });
    } catch (ex) {
        return callback('Error loading wmt model for html model ' + filepath + '.\n' + ex.message + '\n' + ex.stack);
    }
}

md._load = function (ittfmodel, filepath, callback) {
    // Get the model type of the root node of the ittf model.
    var rootNode = ittfmodel.nodes[0];
    var htmlmodelType = htmlschema[rootNode.n];
    if (!htmlmodelType) {
        var maptag = htmlschema.__tagEntityMapping[rootNode.n];
        if (typeof maptag === 'string') htmlmodelType = htmlschema[maptag];
        if (!htmlmodelType) {
            throw new Error('Cannot map root node ' + rootNode.n +
                ' to any entity of schema + html, filepath: ' + filepath);
        }
    }

    // Initialize and verify the loaded model
    var start = Date.now()
        , htmlmodel = new htmlmodelType(rootNode.v);
    htmlmodel.loadContext = ittfmodel.loadContext;
    try {
        htmlmodel.LoadFromNode(rootNode);
    } catch (ex) {
        callback('Error loading wmt model for html model ' + filepath + '.\n' + ex.message + '\n' + ex.stack);
        return;
        // ex.message = 'Loading wmt model for html model ' + filepath + '.\n' + ex.message;
        // throw ex;
    }
    console.log('Loaded wmt model ' + filepath + ' in ' + (Date.now() - start) + ' ms');

    // Initialize and verify the loaded model
    start = Date.now();
    var ctx = new htmlschema.htmlContext();
    htmlmodel.WmtInitialize(ctx);
    htmlmodel.WmtVerify(ctx);
    console.log('Initialized wmt model ' + filepath + ' in ' + (Date.now() - start) + ' ms');

    if (htmlmodel.toJson && pathutil.isFilePath(filepath)) {
        // dump for test
        var ittfmodeldump = path.join(path.dirname(filepath), '_debug', path.basename(filepath) + '.dump.json');
        file.write(ittfmodeldump, JSON.stringify(htmlmodel.toJson(), null, 2));
    }

    htmlmodel.WmtInitializeAsync(ctx, function (err, result) {
        if (err) {
            callback(err, null);
            return
        }
        // console.log('htmlmodel.toJson after WmtInitializeAsync', util.inspect(htmlmodel.toJson(), { depth: null }));
        callback(null, htmlmodel);
    });
};
