var path = require('path');
var util = require('util');
var glob = require('glob');
var expect = require('expect.js');
var stringify = require('json-stringify-safe');
var verify = require('wizzi-core').verify;
var file = require('wizzi-core').file;
var ittfhelper = require('../../helpers/ittfhelper');

var ittf = require('../../../lib/ittf/ittf');

var tests;

describe("loading the ittf models in the data folder", function () {

    before(function (done) {
        searchTests(function (err, foundtests) {
            tests = foundtests
            done();
        });
    });

    
    it('<test>.ittf should be equal to <test>.expected.txt', function () {
        tests.forEach(function (test) {
            console.log('dataFolderTest. TESTING', test.testPath);
            ittf.load(test.testPath, {}, function (err, ittfModel) {
                var testRoot = ittfModel.nodes[0];
                var testJson = stringify(testRoot, null, 2);
                file.write(test.dumpPath, testJson);
                ittf.load(test.expectedPath, {}, function (err, ittfModel) {
                    var expectedRoot = ittfModel.nodes[0];
                    var ok = checkEquals(testRoot, expectedRoot);
                    // var expectedJson = stringify(expectedRoot, null, 2);
                    expect(ok).to.be(true);
                });
            });
        });
    });

});

function searchTests(callback) {
    var tests_folder = path.join(__dirname, 'data');
    glob(tests_folder + '/**/*.ittf', {}, function (er, files) {
        var tests = [];
        files.forEach(function (item) {
            if (item.indexOf('/t/') >= 0) return;
            var dirName = path.dirname(item);
            var fileName = path.basename(item, '.ittf');
            tests.push({
                fileName: fileName,
                testPath: item,
                expectedPath: path.join(dirName, fileName + '.expected.txt'),
                dumpPath: path.join(path.dirname(dirName), 'dumps', fileName + '.dump.json')
            });
        });
        callback(null, tests);
    });
}

function checkEquals(ittfA, ittfB) {
    var a_n = verify.isString(ittfA.n) ? ittfA.n.trim() : ittfA.n;
    var b_n = verify.isString(ittfB.n) ? ittfB.n.trim() : ittfB.n;
    var a_v = verify.isString(ittfA.v) ? ittfA.v.trim() : ittfA.v;
    var b_v = verify.isString(ittfB.v) ? ittfB.v.trim() : ittfB.v;
    if (a_n !== b_n) {
        console.log('checkEquals failed', a_n, b_n);
        return false;
    }
    if (a_v !== b_v) {
        console.log('checkEquals failed', a_v, b_v);
        return false;
    }
    if (ittfA.childs.length !== ittfB.childs.length) {
        console.log('checkEquals failed, child lebgths', ittfA.childs.length, ittfB.childs.length);
        return false;
    }
    var ok = true;
    for (var i = 0; i < ittfA.childs.length; i++) {
        ok = ok && checkEquals(ittfA.childs[i], ittfB.childs[i]);
    }
    return ok;
}

