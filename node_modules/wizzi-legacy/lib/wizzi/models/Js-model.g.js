/*
  Generated by Tree2Soft 0.1 Beta. On 17/09/2015 20:21:24.
  Transformer
    Type     : Tree2Soft.Wmt.Common.Concepts.Schema.Writers.Js.Model.ModelWriter
    Assembly : Tree2Soft.Wmt.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
*/
var util = require('util');

var md = module.exports = {};

md.TSourceLineInfo = function (row, col, source) {
    this.row = row;
    this.col = col;
    this.source = source;
}
md.jsInstance = function (name, sourceLineInfo) {
    this.WmtName = name || '';
    this.WmtSourceLineInfo = sourceLineInfo;
    this.WmtChildren = [];
}
md.jsInstance.prototype.WmtRoot = function () {
    return this.WmtParent == null ? this : this.WmtParent.WmtRoot();
}
md.jsInstance.prototype.WmtSourceFilepath = function (sourceKey) {
    return this.WmtRoot().loadContext.getSourceFilepath(sourceKey);
}
md.jsInstance.prototype.WmtVerify = function (ctx) {
}
md.jsInstance.prototype.WmtInitialize = function (ctx) {
}
md.jsInstance.prototype.WmtInitializeAsync = function (ctx, callback) {
    callback(null);
}
md.jsInstance.prototype.AddChild = function (node) {
    node.WmtParent = this;
    this.WmtChildren.push(node);
}
md.jsInstance.prototype.loadToChildColl = function (child, type, coll) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    coll.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.jsInstance.prototype.loadToWmtChildren = function (child, type) {
    var item = new type(child.v, new md.TSourceLineInfo(child.row, child.col, child.source));
    item.WmtTag = child.n;
    item.WmtParent = this;
    this.WmtChildren.push(item);
    if (item.LoadFromNode) item.LoadFromNode(child);
    return true;
}
md.jsInstance.prototype.toJsonProperties = function (result) {
    result.WmtTag = this.WmtTag;
    result.WmtName = this.WmtName;
}
md.jsInstance.prototype.toJsonChildren = function (result) {
    if (this.WmtChildren.length > 0) {
        var children = [];
        this.WmtChildren.forEach(function (item) {;
            children.push(item.toJson());
        });
        result.WmtChildren = children;
    }
}
md.jsInstance.prototype.error = function (message, node) {
    throw new md.jsException(message, node, this);
}
/*
    module class
    A single file script.
    Can be an AMD, requireJs, nodejs module
    or a simple javascript file.
*/
md.module = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.AllowedKinds = ["@@empty", "jsfile", "nodejs", "amd", "requirejs"];
    this.AllowedExportKinds = ["@@empty", "var", "class", "instance", "function"];
    this.WmtTag = "module";
    this.WmtEntity = "module";
    this.no_iife = false;
    this.use_strict = false;
    this.kind = "jsfile";
    this.exportKind = "var";
    this.includes = [];
    this.statements = [];
}
util.inherits(md.module, md.jsInstance);

md.module.KIND_JSFILE = "jsfile";
md.module.KIND_NODEJS = "nodejs";
md.module.KIND_AMD = "amd";
md.module.KIND_REQUIREJS = "requirejs";
md.module.EXPORTKIND_VAR = "var";
md.module.EXPORTKIND_CLASS = "class";
md.module.EXPORTKIND_INSTANCE = "instance";
md.module.EXPORTKIND_FUNCTION = "function";
md.module.prototype.Addinclude = function (name, sourceLineInfo) {
    var retval = new md.include(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.includes.push(retval);
    return retval;
}
md.module.prototype.getinclude = function (name) {
    var found = null;
    this.includes.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.module.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.module.prototype.WmtVerify = function (ctx) {
    ctx.verifyEnum("kind", this.Allowedkinds, this.kind, this.WmtSourceLineInfo);
    ctx.verifyEnum("exportKind", this.AllowedexportKinds, this.exportKind, this.WmtSourceLineInfo);
    this.includes.forEach(function (item) { item.WmtVerify(ctx); });
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.module.prototype.WmtInitialize = function (ctx) {
    this.includes.forEach(function (item) { item.WmtInitialize(ctx); });
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.module.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'k') {
        if (name === 'kind') { this.kind = child.v; return true; }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'n') {
        if (name === 'noiife') { this.no_iife = parsebool(child.v, true, child); return true; }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'include') { return this.loadToChildColl(child, md.include, this.includes); }
        else if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 7 && _ch == 'n') {
        if (name === 'no-iife') { this.no_iife = parsebool(child.v, true, child); return true; }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { this.use_strict = parsebool(child.v, true, child); return true; }
        else if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 'e') {
        if (name === 'exportkind') { this.exportKind = child.v; return true; }
        else if (name === 'exportname') { this.exportName = child.v; return true; }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { this.use_strict = parsebool(child.v, true, child); return true; }
        else if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 11 && _ch == 'e') {
        if (name === 'export-kind') { this.exportKind = child.v; return true; }
        else if (name === 'export-name') { this.exportName = child.v; return true; }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.module.prototype.LoadFromNode = function (node) {
    //console.log('module.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.module.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.module.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
    result["no_iife"] = this.no_iife;
    result["use_strict"] = this.use_strict;
    if (!isEmpty(this.kind)) result["kind"] = this.kind;
    if (!isEmpty(this.exportKind)) result["exportKind"] = this.exportKind;
    if (!isEmpty(this.exportName)) result["exportName"] = this.exportName;
}
md.module.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.includes.forEach(function (item) {
        items.push(item.toJson());
    });
    result['includes'] = items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// include class
md.include = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "include";
    this.WmtEntity = "include";
}
util.inherits(md.include, md.jsInstance);

md.include.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.include.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.include.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
}
// statement class
md.statement = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.statements = [];
}
util.inherits(md.statement, md.jsInstance);

md.statement.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.statement.prototype.WmtVerify = function (ctx) {
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.statement.prototype.WmtInitialize = function (ctx) {
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.statement.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.statement.prototype.LoadFromNode = function (node) {
    //console.log('statement.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.statement.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.statement.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.statement.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// usestrict class
md.usestrict = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "use-strict";
    this.WmtEntity = "usestrict";
}
util.inherits(md.usestrict, md.statement);

md.usestrict.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.usestrict.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.usestrict.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// block class
md.block = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "block";
    this.WmtEntity = "block";
}
util.inherits(md.block, md.statement);

md.block.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.block.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.block.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// delete class
md.delete = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "delete";
    this.WmtEntity = "delete";
}
util.inherits(md.delete, md.statement);

md.delete.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.delete.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.delete.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// codeline class
md.codeline = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "+";
    this.WmtEntity = "codeline";
}
util.inherits(md.codeline, md.statement);

md.codeline.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.codeline.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.codeline.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// codemultiline class
md.codemultiline = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "++";
    this.WmtEntity = "codemultiline";
}
util.inherits(md.codemultiline, md.statement);

md.codemultiline.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.codemultiline.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.codemultiline.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// return class
md.return = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "return";
    this.WmtEntity = "return";
}
util.inherits(md.return, md.statement);

md.return.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.return.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.return.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// comment class
md.comment = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "#";
    this.WmtEntity = "comment";
}
util.inherits(md.comment, md.statement);

md.comment.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.comment.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.comment.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// commentmultiline class
md.commentmultiline = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "##";
    this.WmtEntity = "commentmultiline";
}
util.inherits(md.commentmultiline, md.statement);

md.commentmultiline.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.commentmultiline.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.commentmultiline.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    set class
    childs:
    choice[0:1] : jsObject || jsArray || jsPropertyOrValue(value) || function || iife
    def            | becames
    set i = 0      | i = 0; (the same as: + i = 0;)
    set f_alpha    | alpha = function(p) {
    function p |    ...
    + ...  | };
    set obj_beta         | obj_beta = { name: 'stefi' };
    {                |
    @ name stefi |
*/
md.set = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "set";
    this.WmtEntity = "set";
}
util.inherits(md.set, md.statement);

md.set.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.set.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.set.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    function class
    is an implicit 'param' when parent is: call || methodCall
    is an implicit 'value' when parent is var || set || jsArray || jsPropertyOrValue
*/
md.function = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "function";
    this.WmtEntity = "function";
    this.args = [];
}
util.inherits(md.function, md.statement);

md.function.prototype.Addarg = function (name, sourceLineInfo) {
    var retval = new md.arg(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.args.push(retval);
    return retval;
}
md.function.prototype.getarg = function (name) {
    var found = null;
    this.args.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.function.prototype.jsargs = function () {
    var jsargs = [];
    this.args.forEach(function (item) {
        jsargs.push(item.WmtName);
    });
    return jsargs.join(', ');
}
md.function.prototype.WmtVerify = function (ctx) {
    this.args.forEach(function (item) { item.WmtVerify(ctx); });
    md.statement.prototype.WmtVerify.call(this, ctx);
}
md.function.prototype.WmtInitialize = function (ctx) {
    this.args.forEach(function (item) { item.WmtInitialize(ctx); });
    md.statement.prototype.WmtInitialize.call(this, ctx);
}
md.function.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'a') {
        if (name === 'arg') { return this.loadToChildColl(child, md.arg, this.args); }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.function.prototype.LoadFromNode = function (node) {
    //console.log('function.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.function.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.function.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.function.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.args.forEach(function (item) {
        items.push(item.toJson());
    });
    result['args'] = items;
}
// iife class
md.iife = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "iife";
    this.WmtEntity = "iife";
    this.args = [];
    this.params = [];
}
util.inherits(md.iife, md.statement);

md.iife.prototype.Addarg = function (name, sourceLineInfo) {
    var retval = new md.arg(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.args.push(retval);
    return retval;
}
md.iife.prototype.getarg = function (name) {
    var found = null;
    this.args.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.iife.prototype.Addparam = function (name, sourceLineInfo) {
    var retval = new md.param(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.params.push(retval);
    return retval;
}
md.iife.prototype.getparam = function (name) {
    var found = null;
    this.params.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.iife.prototype.jsargs = function () {
    var jsargs = [];
    this.args.forEach(function (item) {
        jsargs.push(item.WmtName);
    });
    return jsargs.join(', ');
}
md.iife.prototype.WmtVerify = function (ctx) {
    this.args.forEach(function (item) { item.WmtVerify(ctx); });
    this.params.forEach(function (item) { item.WmtVerify(ctx); });
    md.statement.prototype.WmtVerify.call(this, ctx);
}
md.iife.prototype.WmtInitialize = function (ctx) {
    this.args.forEach(function (item) { item.WmtInitialize(ctx); });
    this.params.forEach(function (item) { item.WmtInitialize(ctx); });
    md.statement.prototype.WmtInitialize.call(this, ctx);
}
md.iife.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'a') {
        if (name === 'arg') { return this.loadToChildColl(child, md.arg, this.args); }
    }
    if (_l == 5 && _ch == 'p') {
        if (name === 'param') { return this.loadToChildColl(child, md.param, this.params); }
    }
    if (_l == 11 && _ch == 'u') {
        if (name === 'unaryprefix') { this.unary_prefix = child.v; return true; }
    }
    if (_l == 12 && _ch == 'u') {
        if (name === 'unary-prefix') { this.unary_prefix = child.v; return true; }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.iife.prototype.LoadFromNode = function (node) {
    //console.log('iife.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.iife.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.iife.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.unary_prefix)) result["unary_prefix"] = this.unary_prefix;
}
md.iife.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.args.forEach(function (item) {
        items.push(item.toJson());
    });
    result['args'] = items;
    items = [];
    this.params.forEach(function (item) {
        items.push(item.toJson());
    });
    result['params'] = items;
}
/*
    new class
    childs:
    sequence : type, <arguments>
    arguments : jsObject || jsArray || jsPropertyOrValue[value] || function || iife
    def            | becames
    new Hello      | new Hello()
    new Hello      | new Hello(function(p) {
    function p |    ...
    + ...  | });
*/
md.new = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "new";
    this.WmtEntity = "new";
    this.params = [];
}
util.inherits(md.new, md.statement);

md.new.prototype.Addparam = function (name, sourceLineInfo) {
    var retval = new md.param(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.params.push(retval);
    return retval;
}
md.new.prototype.getparam = function (name) {
    var found = null;
    this.params.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.new.prototype.WmtVerify = function (ctx) {
    this.params.forEach(function (item) { item.WmtVerify(ctx); });
    md.statement.prototype.WmtVerify.call(this, ctx);
}
md.new.prototype.WmtInitialize = function (ctx) {
    this.params.forEach(function (item) { item.WmtInitialize(ctx); });
    md.statement.prototype.WmtInitialize.call(this, ctx);
}
md.new.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 5 && _ch == 'p') {
        if (name === 'param') { return this.loadToChildColl(child, md.param, this.params); }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.new.prototype.LoadFromNode = function (node) {
    //console.log('new.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.new.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.new.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.new.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.params.forEach(function (item) {
        items.push(item.toJson());
    });
    result['params'] = items;
}
// type class
md.type = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "type";
    this.WmtEntity = "type";
}
util.inherits(md.type, md.statement);

md.type.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.type.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.type.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    arg class
    can be esplicit:
    def                        | becames
    001 function hello             | function hello(name) {
    002     arg name 
    or inline
    def                        | becames
    001 function hello name        | function hello(name) {
*/
md.arg = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "arg";
    this.WmtEntity = "arg";
}
util.inherits(md.arg, md.jsInstance);

md.arg.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.arg.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.arg.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
}
/*
    param class
    can be esplicit:
    def                        | becames
    001 call console.log           | console.log('hello');
    002     param 'hello' 
    or implicit:
    def                        | becames
    001 call items.push            | items.push( { message: 'hello' });
    002     {
    003         @ message 'hello'
    
    implicit params are: jsObject, jsArray, jsValue, function, iife
*/
md.param = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "param";
    this.WmtEntity = "param";
}
util.inherits(md.param, md.jsInstance);

md.param.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.param.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.param.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
}
// class class
md.class = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "class|c";
    this.WmtEntity = "class";
    this.members = [];
}
util.inherits(md.class, md.statement);

md.class.prototype.getmember = function (name) {
    var found = null;
    this.members.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.class.prototype.jsctor = function () {
    var retval = null;
    this.members.forEach(function (item) {
        if (item.WmtTag === 'ctor') {
            retval = item;
        }
    });
    return retval;;
}
md.class.prototype.WmtVerify = function (ctx) {
    this.members.forEach(function (item) { item.WmtVerify(ctx); });
    md.statement.prototype.WmtVerify.call(this, ctx);
}
md.class.prototype.WmtInitialize = function (ctx) {
    this.members.forEach(function (item) { item.WmtInitialize(ctx); });
    md.statement.prototype.WmtInitialize.call(this, ctx);
}
md.class.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.members); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.members); }
    }
    if (_l == 5 && _ch == 's') {
        if (name === 'super') { this.super = child.v; return true; }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.members); }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.class.prototype.LoadFromNode = function (node) {
    //console.log('class.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.class.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.class.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
    if (!isEmpty(this.super)) result["super"] = this.super;
}
md.class.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.members.forEach(function (item) {
        items.push(item.toJson());
    });
    result['members'] = items;
}
// member class
md.member = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.static = false;
}
util.inherits(md.member, md.statement);

md.member.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 6 && _ch == 's') {
        if (name === 'static') { this.static = parsebool(child.v, true, child); return true; }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.member.prototype.LoadFromNode = function (node) {
    //console.log('member.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.member.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.member.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
    result["static"] = this.static;
}
md.member.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// ctor class
md.ctor = function (name, sourceLineInfo) {
    md.member.call(this, name, sourceLineInfo);
    this.WmtTag = "ctor";
    this.WmtEntity = "ctor";
    this.args = [];
    this.bases = [];
    this.statements = [];
}
util.inherits(md.ctor, md.member);

md.ctor.prototype.Addarg = function (name, sourceLineInfo) {
    var retval = new md.arg(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.args.push(retval);
    return retval;
}
md.ctor.prototype.getarg = function (name) {
    var found = null;
    this.args.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.ctor.prototype.Addbase = function (name, sourceLineInfo) {
    var retval = new md.base(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.bases.push(retval);
    return retval;
}
md.ctor.prototype.getbase = function (name) {
    var found = null;
    this.bases.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.ctor.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.ctor.prototype.jsargs = function () {
    var jsargs = [];
    this.args.forEach(function (item) {
        jsargs.push(item.WmtName);
    });
    return jsargs.join(', ');
}
md.ctor.prototype.baseargs = function () {
    var b = [];
    this.bases.forEach(function (item) {
        b.push(item.WmtName);
    });
    return b.join(', ');
}
md.ctor.prototype.WmtVerify = function (ctx) {
    this.args.forEach(function (item) { item.WmtVerify(ctx); });
    this.bases.forEach(function (item) { item.WmtVerify(ctx); });
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.member.prototype.WmtVerify.call(this, ctx);
}
md.ctor.prototype.WmtInitialize = function (ctx) {
    this.args.forEach(function (item) { item.WmtInitialize(ctx); });
    this.bases.forEach(function (item) { item.WmtInitialize(ctx); });
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.member.prototype.WmtInitialize.call(this, ctx);
}
md.ctor.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'a') {
        if (name === 'arg') { return this.loadToChildColl(child, md.arg, this.args); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'b') {
        if (name === 'base') { return this.loadToChildColl(child, md.base, this.bases); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = md.member.prototype.LoadChild.call(this, child);
    return ok;
}
md.ctor.prototype.LoadFromNode = function (node) {
    //console.log('ctor.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.ctor.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ctor.prototype.toJsonProperties = function (result) {
    md.member.prototype.toJsonProperties.call(this, result);
}
md.ctor.prototype.toJsonChildren = function (result) {
    md.member.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.args.forEach(function (item) {
        items.push(item.toJson());
    });
    result['args'] = items;
    items = [];
    this.bases.forEach(function (item) {
        items.push(item.toJson());
    });
    result['bases'] = items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// base class
md.base = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "base";
    this.WmtEntity = "base";
}
util.inherits(md.base, md.jsInstance);

md.base.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.base.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.base.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
}
// method class
md.method = function (name, sourceLineInfo) {
    md.member.call(this, name, sourceLineInfo);
    this.WmtTag = "method|m";
    this.WmtEntity = "method";
    this.args = [];
    this.statements = [];
}
util.inherits(md.method, md.member);

md.method.prototype.Addarg = function (name, sourceLineInfo) {
    var retval = new md.arg(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.args.push(retval);
    return retval;
}
md.method.prototype.getarg = function (name) {
    var found = null;
    this.args.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.method.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.method.prototype.jsargs = function () {
    var jsargs = [];
    this.args.forEach(function (item) {
        jsargs.push(item.WmtName);
    });
    return jsargs.join(', ');
}
md.method.prototype.WmtVerify = function (ctx) {
    this.args.forEach(function (item) { item.WmtVerify(ctx); });
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.member.prototype.WmtVerify.call(this, ctx);
}
md.method.prototype.WmtInitialize = function (ctx) {
    this.args.forEach(function (item) { item.WmtInitialize(ctx); });
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.member.prototype.WmtInitialize.call(this, ctx);
}
md.method.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'a') {
        if (name === 'arg') { return this.loadToChildColl(child, md.arg, this.args); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = md.member.prototype.LoadChild.call(this, child);
    return ok;
}
md.method.prototype.LoadFromNode = function (node) {
    //console.log('method.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.method.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.method.prototype.toJsonProperties = function (result) {
    md.member.prototype.toJsonProperties.call(this, result);
}
md.method.prototype.toJsonChildren = function (result) {
    md.member.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.args.forEach(function (item) {
        items.push(item.toJson());
    });
    result['args'] = items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
/*
    var class
    childs:
    choice[0:1] :
    element[1:n] : decl
    choice[1:1] : jsObject || jsArray || jsPropertyOrValue(value) || function || iife
    def            | becames
    var i          | var i;
    var i = 0      | var i = 0;
    var f_alpha    | var alpha = function(p) {
    function p |    ...
    + ...  | };
    var obj_beta         | var obj_beta = { name: 'stefi' };
    {                |
    @ name stefi |
*/
md.var = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "var";
    this.WmtEntity = "var";
}
util.inherits(md.var, md.statement);

md.var.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.var.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.var.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// decl class
md.decl = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "decl";
    this.WmtEntity = "decl";
}
util.inherits(md.decl, md.statement);

md.decl.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.decl.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.decl.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    jsObject class
    is an implicit 'param' when parent is: funtion || iife || method
    is an implicit 'value' when parent is var || set || jsArray || jsPropertyOrValue
    childs: jsPropertyOrValue
*/
md.jsObject = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "{";
    this.WmtEntity = "jsObject";
}
util.inherits(md.jsObject, md.statement);

md.jsObject.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.jsObject.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.jsObject.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    jsArray class
    is an implicit 'param' when parent is: funtion || iife || method
    is an implicit 'value' when parent is var || set || jsArray || jsPropertyOrValue
    childs: jsObject | jsArray | jsPropertyOrValue
*/
md.jsArray = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "[";
    this.WmtEntity = "jsArray";
}
util.inherits(md.jsArray, md.statement);

md.jsArray.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.jsArray.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.jsArray.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    jsPropertyOrValue class
    is an implicit 'param' when parent is: funtion | iife | method
    is an implicit 'property' when parent is: jsObject
    is an implicit 'value' when parent is var || set || jsArray || jsPropertyOrValue(property)
    childs: jsObject | jsArray | jsPropertyOrValue(value)
*/
md.jsPropertyOrValue = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "@";
    this.WmtEntity = "jsPropertyOrValue";
}
util.inherits(md.jsPropertyOrValue, md.statement);

md.jsPropertyOrValue.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.jsPropertyOrValue.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.jsPropertyOrValue.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    jsonStatementTree class
    The WmtName contains a stringified node tree of statements
*/
md.jsonStatementTree = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "jst";
    this.WmtEntity = "jsonStatementTree";
}
util.inherits(md.jsonStatementTree, md.statement);

md.jsonStatementTree.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.jsonStatementTree.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.jsonStatementTree.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    call class
    childs:
    jsObject | jsArray | jsPropertyOrValue[value] | function | iife | call
    examples
    _ [ sayHello() | sayHello ] [;]
    _ sayHello('stefi', 10) [;]
*/
md.call = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "_";
    this.WmtEntity = "call";
}
util.inherits(md.call, md.statement);

md.call.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.call.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.call.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    memberCall class
    childs:
    jsObject | jsArray | jsPropertyOrValue[value] | function | iife | call
*/
md.memberCall = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "._";
    this.WmtEntity = "memberCall";
}
util.inherits(md.memberCall, md.statement);

md.memberCall.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.memberCall.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.memberCall.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    callOnValue class
    childs:
    jsObject | jsArray | jsPropertyOrValue[value] | function | iife | call
    examples
    _ getFunction()        -- becames --> getFunction()('stefi')
    (     
    @ 'stefi'
*/
md.callOnValue = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "(";
    this.WmtEntity = "callOnValue";
}
util.inherits(md.callOnValue, md.statement);

md.callOnValue.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.callOnValue.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.callOnValue.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    memberAccess class
    Has no childs
    Parents
    call | memberCall
*/
md.memberAccess = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = ".";
    this.WmtEntity = "memberAccess";
}
util.inherits(md.memberAccess, md.statement);

md.memberAccess.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.memberAccess.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.memberAccess.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    memberAccessComputed class
    Parents
    call | memberCall
*/
md.memberAccessComputed = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = ".[";
    this.WmtEntity = "memberAccessComputed";
}
util.inherits(md.memberAccessComputed, md.statement);

md.memberAccessComputed.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.memberAccessComputed.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.memberAccessComputed.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    if class
    def              | becames
    ---------------- | ----------------
    if a === b       | if ( a === b ) {
    | }
*/
md.if = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "if";
    this.WmtEntity = "if";
}
util.inherits(md.if, md.statement);

md.if.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.if.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.if.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// test class
md.test = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "test";
    this.WmtEntity = "test";
}
util.inherits(md.test, md.statement);

md.test.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.test.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.test.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// elif class
md.elif = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "elif";
    this.WmtEntity = "elif";
}
util.inherits(md.elif, md.statement);

md.elif.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.elif.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.elif.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// else class
md.else = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "else";
    this.WmtEntity = "else";
}
util.inherits(md.else, md.statement);

md.else.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.else.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.else.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// for class
md.for = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "for";
    this.WmtEntity = "for";
}
util.inherits(md.for, md.statement);

md.for.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.for.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.for.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// break class
md.break = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "break";
    this.WmtEntity = "break";
}
util.inherits(md.break, md.statement);

md.break.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.break.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.break.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// continue class
md.continue = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "continue";
    this.WmtEntity = "continue";
}
util.inherits(md.continue, md.statement);

md.continue.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.continue.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.continue.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// label class
md.label = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "label";
    this.WmtEntity = "label";
}
util.inherits(md.label, md.statement);

md.label.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.label.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.label.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// foreach class
md.foreach = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "foreach";
    this.WmtEntity = "foreach";
}
util.inherits(md.foreach, md.statement);

md.foreach.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.foreach.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.foreach.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// while class
md.while = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "while";
    this.WmtEntity = "while";
}
util.inherits(md.while, md.statement);

md.while.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.while.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.while.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// do class
md.do = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "do";
    this.WmtEntity = "do";
}
util.inherits(md.do, md.statement);

md.do.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.do.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.do.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// switch class
md.switch = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "switch";
    this.WmtEntity = "switch";
}
util.inherits(md.switch, md.statement);

md.switch.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.switch.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.switch.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// case class
md.case = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "case";
    this.WmtEntity = "case";
}
util.inherits(md.case, md.statement);

md.case.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.case.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.case.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// default class
md.default = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "default";
    this.WmtEntity = "default";
}
util.inherits(md.default, md.statement);

md.default.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.default.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.default.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// or class
md.or = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "||";
    this.WmtEntity = "or";
}
util.inherits(md.or, md.statement);

md.or.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.or.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.or.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// and class
md.and = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "&&";
    this.WmtEntity = "and";
}
util.inherits(md.and, md.statement);

md.and.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.and.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.and.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// iif class
md.iif = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "iif";
    this.WmtEntity = "iif";
}
util.inherits(md.iif, md.statement);

md.iif.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.iif.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.iif.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// then class
md.then = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "then";
    this.WmtEntity = "then";
}
util.inherits(md.then, md.statement);

md.then.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.then.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.then.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_eq_strict class
md.op_eq_strict = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op===";
    this.WmtEntity = "op_eq_strict";
}
util.inherits(md.op_eq_strict, md.statement);

md.op_eq_strict.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_eq_strict.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_eq_strict.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_noteq_strict class
md.op_noteq_strict = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op!==";
    this.WmtEntity = "op_noteq_strict";
}
util.inherits(md.op_noteq_strict, md.statement);

md.op_noteq_strict.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_noteq_strict.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_noteq_strict.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_eq class
md.op_eq = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op==";
    this.WmtEntity = "op_eq";
}
util.inherits(md.op_eq, md.statement);

md.op_eq.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_eq.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_eq.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_noteq class
md.op_noteq = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op!=";
    this.WmtEntity = "op_noteq";
}
util.inherits(md.op_noteq, md.statement);

md.op_noteq.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_noteq.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_noteq.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_or class
md.op_or = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op||";
    this.WmtEntity = "op_or";
}
util.inherits(md.op_or, md.statement);

md.op_or.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_or.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_or.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_and class
md.op_and = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op&&";
    this.WmtEntity = "op_and";
}
util.inherits(md.op_and, md.statement);

md.op_and.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_and.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_and.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_minus class
md.op_minus = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op-";
    this.WmtEntity = "op_minus";
}
util.inherits(md.op_minus, md.statement);

md.op_minus.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_minus.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_minus.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_plus class
md.op_plus = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op+";
    this.WmtEntity = "op_plus";
}
util.inherits(md.op_plus, md.statement);

md.op_plus.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_plus.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_plus.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_times class
md.op_times = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op*";
    this.WmtEntity = "op_times";
}
util.inherits(md.op_times, md.statement);

md.op_times.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_times.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_times.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_div class
md.op_div = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op/";
    this.WmtEntity = "op_div";
}
util.inherits(md.op_div, md.statement);

md.op_div.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_div.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_div.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_power class
md.op_power = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op^";
    this.WmtEntity = "op_power";
}
util.inherits(md.op_power, md.statement);

md.op_power.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_power.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_power.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_mod class
md.op_mod = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op%";
    this.WmtEntity = "op_mod";
}
util.inherits(md.op_mod, md.statement);

md.op_mod.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_mod.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_mod.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_xor class
md.op_xor = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op|";
    this.WmtEntity = "op_xor";
}
util.inherits(md.op_xor, md.statement);

md.op_xor.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_xor.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_xor.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_xand class
md.op_xand = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op&";
    this.WmtEntity = "op_xand";
}
util.inherits(md.op_xand, md.statement);

md.op_xand.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_xand.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_xand.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_gt class
md.op_gt = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op>";
    this.WmtEntity = "op_gt";
}
util.inherits(md.op_gt, md.statement);

md.op_gt.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_gt.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_gt.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_ge class
md.op_ge = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op>=";
    this.WmtEntity = "op_ge";
}
util.inherits(md.op_ge, md.statement);

md.op_ge.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_ge.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_ge.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_lt class
md.op_lt = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op<";
    this.WmtEntity = "op_lt";
}
util.inherits(md.op_lt, md.statement);

md.op_lt.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_lt.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_lt.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// op_le class
md.op_le = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "op<=";
    this.WmtEntity = "op_le";
}
util.inherits(md.op_le, md.statement);

md.op_le.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.op_le.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.op_le.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// try class
md.try = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "try";
    this.WmtEntity = "try";
}
util.inherits(md.try, md.statement);

md.try.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.try.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.try.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// catch class
md.catch = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "catch";
    this.WmtEntity = "catch";
}
util.inherits(md.catch, md.statement);

md.catch.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.catch.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.catch.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// finally class
md.finally = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "finally";
    this.WmtEntity = "finally";
}
util.inherits(md.finally, md.statement);

md.finally.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.finally.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.finally.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// throw class
md.throw = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "throw";
    this.WmtEntity = "throw";
}
util.inherits(md.throw, md.statement);

md.throw.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.throw.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.throw.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// assert class
md.assert = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "!!";
    this.WmtEntity = "assert";
}
util.inherits(md.assert, md.statement);

md.assert.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.assert.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.assert.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// assert_equal class
md.assert_equal = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "!!=";
    this.WmtEntity = "assert_equal";
}
util.inherits(md.assert_equal, md.statement);

md.assert_equal.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.assert_equal.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.assert_equal.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// chalk class
md.chalk = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "chalk";
    this.WmtEntity = "chalk";
}
util.inherits(md.chalk, md.statement);

md.chalk.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.chalk.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.chalk.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    log class
    
    def               | becames
    ----------------- | ----------------
    log 'xxx', yyy    | console.log( 'xxx', yyy );
    
*/
md.log = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "log";
    this.WmtEntity = "log";
}
util.inherits(md.log, md.statement);

md.log.prototype._toJs = function (ctx) {
    ctx.w('console.log(' + this.WmtName + ');');
}
md.log.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.log.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.log.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// inspect class
md.inspect = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "log?";
    this.WmtEntity = "inspect";
}
util.inherits(md.inspect, md.statement);

md.inspect.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.inspect.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.inspect.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    log_info class
    log.info(...)
*/
md.log_info = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "log-info";
    this.WmtEntity = "log_info";
}
util.inherits(md.log_info, md.statement);

md.log_info.prototype._require = function (ctx) {
    ctx.require('log');
}
md.log_info.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.log_info.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.log_info.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// describe class
md.describe = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "describe";
    this.WmtEntity = "describe";
}
util.inherits(md.describe, md.statement);

md.describe.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.describe.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.describe.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// it class
md.it = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "it";
    this.WmtEntity = "it";
}
util.inherits(md.it, md.statement);

md.it.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.it.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.it.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// itAsync class
md.itAsync = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "it-async";
    this.WmtEntity = "itAsync";
}
util.inherits(md.itAsync, md.statement);

md.itAsync.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.itAsync.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.itAsync.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// before class
md.before = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "before";
    this.WmtEntity = "before";
}
util.inherits(md.before, md.statement);

md.before.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.before.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.before.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// beforeAsync class
md.beforeAsync = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "before-async";
    this.WmtEntity = "beforeAsync";
}
util.inherits(md.beforeAsync, md.statement);

md.beforeAsync.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.beforeAsync.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.beforeAsync.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// beforeEach class
md.beforeEach = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "before-each";
    this.WmtEntity = "beforeEach";
}
util.inherits(md.beforeEach, md.statement);

md.beforeEach.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.beforeEach.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.beforeEach.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// after class
md.after = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "after";
    this.WmtEntity = "after";
}
util.inherits(md.after, md.statement);

md.after.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.after.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.after.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// afterAsync class
md.afterAsync = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "after-async";
    this.WmtEntity = "afterAsync";
}
util.inherits(md.afterAsync, md.statement);

md.afterAsync.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.afterAsync.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.afterAsync.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// afterEach class
md.afterEach = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "after-each";
    this.WmtEntity = "afterEach";
}
util.inherits(md.afterEach, md.statement);

md.afterEach.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.afterEach.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.afterEach.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// superagent class
md.superagent = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "superagent";
    this.WmtEntity = "superagent";
    this.gets = [];
    this.posts = [];
    this.puts = [];
    this.ends = [];
}
util.inherits(md.superagent, md.statement);

md.superagent.prototype.Addget = function (name, sourceLineInfo) {
    var retval = new md.get(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.gets.push(retval);
    return retval;
}
md.superagent.prototype.getget = function (name) {
    var found = null;
    this.gets.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.superagent.prototype.Addpost = function (name, sourceLineInfo) {
    var retval = new md.post(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.posts.push(retval);
    return retval;
}
md.superagent.prototype.getpost = function (name) {
    var found = null;
    this.posts.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.superagent.prototype.Addput = function (name, sourceLineInfo) {
    var retval = new md.put(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.puts.push(retval);
    return retval;
}
md.superagent.prototype.getput = function (name) {
    var found = null;
    this.puts.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.superagent.prototype.Addend = function (name, sourceLineInfo) {
    var retval = new md.end(name);
    retval.WmtParent = this;
    retval.WmtSourceLineInfo = sourceLineInfo;
    this.ends.push(retval);
    return retval;
}
md.superagent.prototype.getend = function (name) {
    var found = null;
    this.ends.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.superagent.prototype.WmtVerify = function (ctx) {
    this.gets.forEach(function (item) { item.WmtVerify(ctx); });
    this.posts.forEach(function (item) { item.WmtVerify(ctx); });
    this.puts.forEach(function (item) { item.WmtVerify(ctx); });
    this.ends.forEach(function (item) { item.WmtVerify(ctx); });
    md.statement.prototype.WmtVerify.call(this, ctx);
}
md.superagent.prototype.WmtInitialize = function (ctx) {
    this.gets.forEach(function (item) { item.WmtInitialize(ctx); });
    this.posts.forEach(function (item) { item.WmtInitialize(ctx); });
    this.puts.forEach(function (item) { item.WmtInitialize(ctx); });
    this.ends.forEach(function (item) { item.WmtInitialize(ctx); });
    md.statement.prototype.WmtInitialize.call(this, ctx);
}
md.superagent.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 3 && _ch == 'e') {
        if (name === 'end') { return this.loadToChildColl(child, md.end, this.ends); }
    }
    if (_l == 3 && _ch == 'g') {
        if (name === 'get') { return this.loadToChildColl(child, md.get, this.gets); }
    }
    if (_l == 3 && _ch == 'p') {
        if (name === 'put') { return this.loadToChildColl(child, md.put, this.puts); }
    }
    if (_l == 4 && _ch == 'p') {
        if (name === 'post') { return this.loadToChildColl(child, md.post, this.posts); }
    }
    ok = md.statement.prototype.LoadChild.call(this, child);
    return ok;
}
md.superagent.prototype.LoadFromNode = function (node) {
    //console.log('superagent.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.superagent.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.superagent.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.superagent.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.gets.forEach(function (item) {
        items.push(item.toJson());
    });
    result['gets'] = items;
    items = [];
    this.posts.forEach(function (item) {
        items.push(item.toJson());
    });
    result['posts'] = items;
    items = [];
    this.puts.forEach(function (item) {
        items.push(item.toJson());
    });
    result['puts'] = items;
    items = [];
    this.ends.forEach(function (item) {
        items.push(item.toJson());
    });
    result['ends'] = items;
}
// get class
md.get = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "get";
    this.WmtEntity = "get";
    this.statements = [];
}
util.inherits(md.get, md.jsInstance);

md.get.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.get.prototype.WmtVerify = function (ctx) {
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.get.prototype.WmtInitialize = function (ctx) {
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.get.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.get.prototype.LoadFromNode = function (node) {
    //console.log('get.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.get.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.get.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.get.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// post class
md.post = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "post";
    this.WmtEntity = "post";
    this.statements = [];
}
util.inherits(md.post, md.jsInstance);

md.post.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.post.prototype.WmtVerify = function (ctx) {
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.post.prototype.WmtInitialize = function (ctx) {
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.post.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.post.prototype.LoadFromNode = function (node) {
    //console.log('post.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.post.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.post.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.post.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// put class
md.put = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "put";
    this.WmtEntity = "put";
    this.statements = [];
}
util.inherits(md.put, md.jsInstance);

md.put.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.put.prototype.WmtVerify = function (ctx) {
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.put.prototype.WmtInitialize = function (ctx) {
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.put.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.put.prototype.LoadFromNode = function (node) {
    //console.log('put.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.put.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.put.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.put.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
// end class
md.end = function (name, sourceLineInfo) {
    md.jsInstance.call(this, name, sourceLineInfo);
    this.WmtTag = "end";
    this.WmtEntity = "end";
    this.statements = [];
}
util.inherits(md.end, md.jsInstance);

md.end.prototype.getstatement = function (name) {
    var found = null;
    this.statements.forEach(function (item) { found = found || (item.WmtName === name ? item : null); });
    return found;
}
md.end.prototype.WmtVerify = function (ctx) {
    this.statements.forEach(function (item) { item.WmtVerify(ctx); });
    md.jsInstance.prototype.WmtVerify.call(this, ctx);
}
md.end.prototype.WmtInitialize = function (ctx) {
    this.statements.forEach(function (item) { item.WmtInitialize(ctx); });
    md.jsInstance.prototype.WmtInitialize.call(this, ctx);
}
md.end.prototype.LoadChild = function (child) {
    var item, ok = false, name = child.n.toLowerCase(), _l = name.length, _ch = name[0];
    if (_l == 1 && _ch == '#') {
        if (name === '#') { return this.loadToChildColl(child, md.comment, this.statements); }
    }
    if (_l == 1 && _ch == '(') {
        if (name === '(') { return this.loadToChildColl(child, md.callOnValue, this.statements); }
    }
    if (_l == 1 && _ch == '+') {
        if (name === '+') { return this.loadToChildColl(child, md.codeline, this.statements); }
    }
    if (_l == 1 && _ch == '.') {
        if (name === '.') { return this.loadToChildColl(child, md.memberAccess, this.statements); }
    }
    if (_l == 1 && _ch == '<') {
        if (name === '<') { return this.loadToChildColl(child, md.htmlelement, this.statements); }
    }
    if (_l == 1 && _ch == '@') {
        if (name === '@') { return this.loadToChildColl(child, md.jsPropertyOrValue, this.statements); }
    }
    if (_l == 1 && _ch == '[') {
        if (name === '[') { return this.loadToChildColl(child, md.jsArray, this.statements); }
    }
    if (_l == 1 && _ch == '_') {
        if (name === '_') { return this.loadToChildColl(child, md.call, this.statements); }
    }
    if (_l == 1 && _ch == 'a') {
        if (name === 'a') { return this.loadToChildColl(child, md.a, this.statements); }
    }
    if (_l == 1 && _ch == 'c') {
        if (name === 'c') { return this.loadToChildColl(child, md.class, this.statements); }
    }
    if (_l == 1 && _ch == 'i') {
        if (name === 'i') { return this.loadToChildColl(child, md.i, this.statements); }
    }
    if (_l == 1 && _ch == 'm') {
        if (name === 'm') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 1 && _ch == '{') {
        if (name === '{') { return this.loadToChildColl(child, md.jsObject, this.statements); }
    }
    if (_l == 2 && _ch == '!') {
        if (name === '!!') { return this.loadToChildColl(child, md.assert, this.statements); }
    }
    if (_l == 2 && _ch == '#') {
        if (name === '##') { return this.loadToChildColl(child, md.commentmultiline, this.statements); }
    }
    if (_l == 2 && _ch == '&') {
        if (name === '&&') { return this.loadToChildColl(child, md.and, this.statements); }
    }
    if (_l == 2 && _ch == '+') {
        if (name === '++') { return this.loadToChildColl(child, md.codemultiline, this.statements); }
    }
    if (_l == 2 && _ch == '.') {
        if (name === '._') { return this.loadToChildColl(child, md.memberCall, this.statements); }
        else if (name === '.[') { return this.loadToChildColl(child, md.memberAccessComputed, this.statements); }
    }
    if (_l == 2 && _ch == 'b') {
        if (name === 'br') { return this.loadToChildColl(child, md.br, this.statements); }
    }
    if (_l == 2 && _ch == 'd') {
        if (name === 'do') { return this.loadToChildColl(child, md.do, this.statements); }
    }
    if (_l == 2 && _ch == 'h') {
        if (name === 'h3') { return this.loadToChildColl(child, md.h3, this.statements); }
    }
    if (_l == 2 && _ch == 'i') {
        if (name === 'if') { return this.loadToChildColl(child, md.if, this.statements); }
        else if (name === 'it') { return this.loadToChildColl(child, md.it, this.statements); }
    }
    if (_l == 2 && _ch == 'l') {
        if (name === 'li') { return this.loadToChildColl(child, md.li, this.statements); }
    }
    if (_l == 2 && _ch == 'o') {
        if (name === 'op') { return this.loadToChildColl(child, md.op_minus, this.statements); }
    }
    if (_l == 2 && _ch == 't') {
        if (name === 'tr') { return this.loadToChildColl(child, md.tr, this.statements); }
        else if (name === 'th') { return this.loadToChildColl(child, md.th, this.statements); }
        else if (name === 'td') { return this.loadToChildColl(child, md.td, this.statements); }
    }
    if (_l == 2 && _ch == 'u') {
        if (name === 'ul') { return this.loadToChildColl(child, md.ul, this.statements); }
    }
    if (_l == 2 && _ch == '|') {
        if (name === '||') { return this.loadToChildColl(child, md.or, this.statements); }
    }
    if (_l == 3 && _ch == '!') {
        if (name === '!!=') { return this.loadToChildColl(child, md.assert_equal, this.statements); }
    }
    if (_l == 3 && _ch == 'd') {
        if (name === 'div') { return this.loadToChildColl(child, md.div, this.statements); }
    }
    if (_l == 3 && _ch == 'f') {
        if (name === 'for') { return this.loadToChildColl(child, md.for, this.statements); }
    }
    if (_l == 3 && _ch == 'i') {
        if (name === 'iif') { return this.loadToChildColl(child, md.iif, this.statements); }
        else if (name === 'img') { return this.loadToChildColl(child, md.img, this.statements); }
    }
    if (_l == 3 && _ch == 'j') {
        if (name === 'jst') { return this.loadToChildColl(child, md.jsonStatementTree, this.statements); }
    }
    if (_l == 3 && _ch == 'l') {
        if (name === 'log') { return this.loadToChildColl(child, md.log, this.statements); }
    }
    if (_l == 3 && _ch == 'n') {
        if (name === 'new') { return this.loadToChildColl(child, md.new, this.statements); }
    }
    if (_l == 3 && _ch == 'o') {
        if (name === 'op-') { return this.loadToChildColl(child, md.op_minus, this.statements); }
        else if (name === 'op+') { return this.loadToChildColl(child, md.op_plus, this.statements); }
        else if (name === 'op*') { return this.loadToChildColl(child, md.op_times, this.statements); }
        else if (name === 'op/') { return this.loadToChildColl(child, md.op_div, this.statements); }
        else if (name === 'op^') { return this.loadToChildColl(child, md.op_power, this.statements); }
        else if (name === 'op%') { return this.loadToChildColl(child, md.op_mod, this.statements); }
        else if (name === 'op|') { return this.loadToChildColl(child, md.op_xor, this.statements); }
        else if (name === 'op&') { return this.loadToChildColl(child, md.op_xand, this.statements); }
        else if (name === 'op>') { return this.loadToChildColl(child, md.op_gt, this.statements); }
        else if (name === 'op<') { return this.loadToChildColl(child, md.op_lt, this.statements); }
    }
    if (_l == 3 && _ch == 's') {
        if (name === 'set') { return this.loadToChildColl(child, md.set, this.statements); }
    }
    if (_l == 3 && _ch == 't') {
        if (name === 'try') { return this.loadToChildColl(child, md.try, this.statements); }
    }
    if (_l == 3 && _ch == 'v') {
        if (name === 'var') { return this.loadToChildColl(child, md.var, this.statements); }
    }
    if (_l == 4 && _ch == 'c') {
        if (name === 'ctor') { return this.loadToChildColl(child, md.ctor, this.statements); }
        else if (name === 'case') { return this.loadToChildColl(child, md.case, this.statements); }
    }
    if (_l == 4 && _ch == 'd') {
        if (name === 'decl') { return this.loadToChildColl(child, md.decl, this.statements); }
    }
    if (_l == 4 && _ch == 'e') {
        if (name === 'elif') { return this.loadToChildColl(child, md.elif, this.statements); }
        else if (name === 'else') { return this.loadToChildColl(child, md.else, this.statements); }
    }
    if (_l == 4 && _ch == 'f') {
        if (name === 'form') { return this.loadToChildColl(child, md.form, this.statements); }
    }
    if (_l == 4 && _ch == 'h') {
        if (name === 'html') { return this.loadToChildColl(child, md.html, this.statements); }
    }
    if (_l == 4 && _ch == 'i') {
        if (name === 'iife') { return this.loadToChildColl(child, md.iife, this.statements); }
    }
    if (_l == 4 && _ch == 'l') {
        if (name === 'log?') { return this.loadToChildColl(child, md.inspect, this.statements); }
    }
    if (_l == 4 && _ch == 'o') {
        if (name === 'op==') { return this.loadToChildColl(child, md.op_eq, this.statements); }
        else if (name === 'op!=') { return this.loadToChildColl(child, md.op_noteq, this.statements); }
        else if (name === 'op||') { return this.loadToChildColl(child, md.op_or, this.statements); }
        else if (name === 'op&&') { return this.loadToChildColl(child, md.op_and, this.statements); }
        else if (name === 'op>=') { return this.loadToChildColl(child, md.op_ge, this.statements); }
        else if (name === 'op<=') { return this.loadToChildColl(child, md.op_le, this.statements); }
    }
    if (_l == 4 && _ch == 's') {
        if (name === 'span') { return this.loadToChildColl(child, md.span, this.statements); }
    }
    if (_l == 4 && _ch == 't') {
        if (name === 'type') { return this.loadToChildColl(child, md.type, this.statements); }
        else if (name === 'test') { return this.loadToChildColl(child, md.test, this.statements); }
        else if (name === 'then') { return this.loadToChildColl(child, md.then, this.statements); }
    }
    if (_l == 5 && _ch == 'a') {
        if (name === 'after') { return this.loadToChildColl(child, md.after, this.statements); }
    }
    if (_l == 5 && _ch == 'b') {
        if (name === 'block') { return this.loadToChildColl(child, md.block, this.statements); }
        else if (name === 'break') { return this.loadToChildColl(child, md.break, this.statements); }
    }
    if (_l == 5 && _ch == 'c') {
        if (name === 'class') { return this.loadToChildColl(child, md.class, this.statements); }
        else if (name === 'catch') { return this.loadToChildColl(child, md.catch, this.statements); }
        else if (name === 'chalk') { return this.loadToChildColl(child, md.chalk, this.statements); }
    }
    if (_l == 5 && _ch == 'i') {
        if (name === 'input') { return this.loadToChildColl(child, md.input, this.statements); }
    }
    if (_l == 5 && _ch == 'l') {
        if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
        else if (name === 'label') { return this.loadToChildColl(child, md.label, this.statements); }
    }
    if (_l == 5 && _ch == 'o') {
        if (name === 'op===') { return this.loadToChildColl(child, md.op_eq_strict, this.statements); }
        else if (name === 'op!==') { return this.loadToChildColl(child, md.op_noteq_strict, this.statements); }
    }
    if (_l == 5 && _ch == 'r') {
        if (name === 'ready') { return this.loadToChildColl(child, md.ready, this.statements); }
    }
    if (_l == 5 && _ch == 't') {
        if (name === 'throw') { return this.loadToChildColl(child, md.throw, this.statements); }
        else if (name === 'table') { return this.loadToChildColl(child, md.table, this.statements); }
        else if (name === 'thead') { return this.loadToChildColl(child, md.thead, this.statements); }
        else if (name === 'tbody') { return this.loadToChildColl(child, md.tbody, this.statements); }
    }
    if (_l == 5 && _ch == 'w') {
        if (name === 'while') { return this.loadToChildColl(child, md.while, this.statements); }
    }
    if (_l == 6 && _ch == 'b') {
        if (name === 'before') { return this.loadToChildColl(child, md.before, this.statements); }
        else if (name === 'button') { return this.loadToChildColl(child, md.button, this.statements); }
    }
    if (_l == 6 && _ch == 'd') {
        if (name === 'delete') { return this.loadToChildColl(child, md.delete, this.statements); }
    }
    if (_l == 6 && _ch == 'h') {
        if (name === 'html_f') { return this.loadToChildColl(child, md.html_f, this.statements); }
    }
    if (_l == 6 && _ch == 'l') {
        if (name === 'legend') { return this.loadToChildColl(child, md.legend, this.statements); }
    }
    if (_l == 6 && _ch == 'm') {
        if (name === 'method') { return this.loadToChildColl(child, md.method, this.statements); }
    }
    if (_l == 6 && _ch == 'o') {
        if (name === 'option') { return this.loadToChildColl(child, md.option, this.statements); }
    }
    if (_l == 6 && _ch == 'r') {
        if (name === 'return') { return this.loadToChildColl(child, md.return, this.statements); }
    }
    if (_l == 6 && _ch == 's') {
        if (name === 'switch') { return this.loadToChildColl(child, md.switch, this.statements); }
        else if (name === 'select') { return this.loadToChildColl(child, md.select, this.statements); }
    }
    if (_l == 7 && _ch == 'd') {
        if (name === 'default') { return this.loadToChildColl(child, md.default, this.statements); }
    }
    if (_l == 7 && _ch == 'f') {
        if (name === 'foreach') { return this.loadToChildColl(child, md.foreach, this.statements); }
        else if (name === 'finally') { return this.loadToChildColl(child, md.finally, this.statements); }
    }
    if (_l == 7 && _ch == 'h') {
        if (name === 'html_ng') { return this.loadToChildColl(child, md.html_ng, this.statements); }
        else if (name === 'html_hb') { return this.loadToChildColl(child, md.html_hb, this.statements); }
    }
    if (_l == 7 && _ch == 'i') {
        if (name === 'itasync') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 7 && _ch == 'l') {
        if (name === 'loginfo') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 'c') {
        if (name === 'continue') { return this.loadToChildColl(child, md.continue, this.statements); }
    }
    if (_l == 8 && _ch == 'd') {
        if (name === 'describe') { return this.loadToChildColl(child, md.describe, this.statements); }
    }
    if (_l == 8 && _ch == 'f') {
        if (name === 'function') { return this.loadToChildColl(child, md.function, this.statements); }
    }
    if (_l == 8 && _ch == 'h') {
        if (name === 'html_dom') { return this.loadToChildColl(child, md.html_dom, this.statements); }
    }
    if (_l == 8 && _ch == 'i') {
        if (name === 'it-async') { return this.loadToChildColl(child, md.itAsync, this.statements); }
    }
    if (_l == 8 && _ch == 'l') {
        if (name === 'log-info') { return this.loadToChildColl(child, md.log_info, this.statements); }
    }
    if (_l == 8 && _ch == 't') {
        if (name === 'textarea') { return this.loadToChildColl(child, md.textarea, this.statements); }
    }
    if (_l == 9 && _ch == 'a') {
        if (name === 'aftereach') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 9 && _ch == 'u') {
        if (name === 'usestrict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 10 && _ch == 'a') {
        if (name === 'afterasync') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
        else if (name === 'after-each') { return this.loadToChildColl(child, md.afterEach, this.statements); }
    }
    if (_l == 10 && _ch == 'b') {
        if (name === 'beforeeach') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 10 && _ch == 's') {
        if (name === 'superagent') { return this.loadToChildColl(child, md.superagent, this.statements); }
    }
    if (_l == 10 && _ch == 'u') {
        if (name === 'use-strict') { return this.loadToChildColl(child, md.usestrict, this.statements); }
    }
    if (_l == 11 && _ch == 'a') {
        if (name === 'after-async') { return this.loadToChildColl(child, md.afterAsync, this.statements); }
    }
    if (_l == 11 && _ch == 'b') {
        if (name === 'beforeasync') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
        else if (name === 'before-each') { return this.loadToChildColl(child, md.beforeEach, this.statements); }
    }
    if (_l == 12 && _ch == 'b') {
        if (name === 'before-async') { return this.loadToChildColl(child, md.beforeAsync, this.statements); }
    }
    ok = false;
    return ok;
}
md.end.prototype.LoadFromNode = function (node) {
    //console.log('end.LoadFromNode', util.inspect(node, { depth: null }));
    var me = this, loaded = false;
    node.childs.forEach(function (item) {
        loaded = me.LoadChild(item);
        if (!loaded) throw new md.jsException("Tag not recognized: " + item.n, item, me);
    });
}
md.end.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.end.prototype.toJsonProperties = function (result) {
    md.jsInstance.prototype.toJsonProperties.call(this, result);
}
md.end.prototype.toJsonChildren = function (result) {
    md.jsInstance.prototype.toJsonChildren.call(this, result);
    var items;
    items = [];
    this.statements.forEach(function (item) {
        items.push(item.toJson());
    });
    result['statements'] = items;
}
/*
    ready class
    jQuery document ready
*/
md.ready = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "ready";
    this.WmtEntity = "ready";
}
util.inherits(md.ready, md.statement);

md.ready.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ready.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.ready.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    html class
    create a variable containing an html string
*/
md.html = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "html";
    this.WmtEntity = "html";
}
util.inherits(md.html, md.statement);

md.html.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.html.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    html_f class
    create a function 
    that returns am html string
*/
md.html_f = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "html_f";
    this.WmtEntity = "html_f";
}
util.inherits(md.html_f, md.statement);

md.html_f.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html_f.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.html_f.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    html_ng class
    create a function 
    that returns am html string preserving {{ }}, for interpolation use [[ ]]
*/
md.html_ng = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "html_ng";
    this.WmtEntity = "html_ng";
}
util.inherits(md.html_ng, md.statement);

md.html_ng.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html_ng.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.html_ng.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    html_dom class
    create a function 
    that returns am html dom tree using jQuery
*/
md.html_dom = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "html_dom";
    this.WmtEntity = "html_dom";
}
util.inherits(md.html_dom, md.statement);

md.html_dom.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html_dom.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.html_dom.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
/*
    html_hb class
    create a function 
    that returns a compiled handlebar template
*/
md.html_hb = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "html_hb";
    this.WmtEntity = "html_hb";
}
util.inherits(md.html_hb, md.statement);

md.html_hb.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.html_hb.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.html_hb.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// htmlelement class
md.htmlelement = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "<";
    this.WmtEntity = "htmlelement";
}
util.inherits(md.htmlelement, md.statement);

md.htmlelement.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.htmlelement.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.htmlelement.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// h3 class
md.h3 = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "h3";
    this.WmtEntity = "h3";
}
util.inherits(md.h3, md.statement);

md.h3.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.h3.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.h3.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// form class
md.form = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "form";
    this.WmtEntity = "form";
}
util.inherits(md.form, md.statement);

md.form.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.form.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.form.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// legend class
md.legend = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "legend";
    this.WmtEntity = "legend";
}
util.inherits(md.legend, md.statement);

md.legend.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.legend.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.legend.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// div class
md.div = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "div";
    this.WmtEntity = "div";
}
util.inherits(md.div, md.statement);

md.div.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.div.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.div.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// span class
md.span = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "span";
    this.WmtEntity = "span";
}
util.inherits(md.span, md.statement);

md.span.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.span.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.span.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// label class
md.label = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "label";
    this.WmtEntity = "label";
}
util.inherits(md.label, md.statement);

md.label.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.label.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.label.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// table class
md.table = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "table";
    this.WmtEntity = "table";
}
util.inherits(md.table, md.statement);

md.table.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.table.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.table.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// thead class
md.thead = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "thead";
    this.WmtEntity = "thead";
}
util.inherits(md.thead, md.statement);

md.thead.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.thead.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.thead.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// tbody class
md.tbody = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "tbody";
    this.WmtEntity = "tbody";
}
util.inherits(md.tbody, md.statement);

md.tbody.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tbody.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.tbody.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// tr class
md.tr = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "tr";
    this.WmtEntity = "tr";
}
util.inherits(md.tr, md.statement);

md.tr.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.tr.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.tr.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// th class
md.th = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "th";
    this.WmtEntity = "th";
}
util.inherits(md.th, md.statement);

md.th.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.th.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.th.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// td class
md.td = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "td";
    this.WmtEntity = "td";
}
util.inherits(md.td, md.statement);

md.td.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.td.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.td.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// input class
md.input = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "input";
    this.WmtEntity = "input";
}
util.inherits(md.input, md.statement);

md.input.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.input.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.input.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// textarea class
md.textarea = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "textarea";
    this.WmtEntity = "textarea";
}
util.inherits(md.textarea, md.statement);

md.textarea.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.textarea.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.textarea.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// select class
md.select = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "select";
    this.WmtEntity = "select";
}
util.inherits(md.select, md.statement);

md.select.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.select.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.select.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// option class
md.option = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "option";
    this.WmtEntity = "option";
}
util.inherits(md.option, md.statement);

md.option.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.option.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.option.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// button class
md.button = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "button";
    this.WmtEntity = "button";
}
util.inherits(md.button, md.statement);

md.button.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.button.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.button.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// br class
md.br = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "br";
    this.WmtEntity = "br";
}
util.inherits(md.br, md.statement);

md.br.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.br.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.br.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// img class
md.img = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "img";
    this.WmtEntity = "img";
}
util.inherits(md.img, md.statement);

md.img.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.img.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.img.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// i class
md.i = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "i";
    this.WmtEntity = "i";
}
util.inherits(md.i, md.statement);

md.i.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.i.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.i.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// a class
md.a = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "a";
    this.WmtEntity = "a";
}
util.inherits(md.a, md.statement);

md.a.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.a.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.a.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// ul class
md.ul = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "ul";
    this.WmtEntity = "ul";
}
util.inherits(md.ul, md.statement);

md.ul.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.ul.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.ul.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// li class
md.li = function (name, sourceLineInfo) {
    md.statement.call(this, name, sourceLineInfo);
    this.WmtTag = "li";
    this.WmtEntity = "li";
}
util.inherits(md.li, md.statement);

md.li.prototype.toJson = function () {
    var result = {};
    this.toJsonProperties(result);
    this.toJsonChildren(result);
    return result;
}
md.li.prototype.toJsonProperties = function (result) {
    md.statement.prototype.toJsonProperties.call(this, result);
}
md.li.prototype.toJsonChildren = function (result) {
    md.statement.prototype.toJsonChildren.call(this, result);
}
// jsContext class
md.jsContext = function () {
}
md.jsContext.prototype.verifyEnum = function (value, allowed) {
    return true;
}
// jsException class
md.jsException = function (message, node, instance) {
    this.message = message + (node && instance ? ', row:' + node.r + ', col:' + node.c + ', source:' + instance.WmtSourceFilepath(node.s) : '');
    this.stack = new Error().stack;
    this.node = node;
}
md.__tagEntityMapping = { 'use-strict': 'usestrict', '+': 'codeline', '++': 'codemultiline', '#': 'comment', '##': 'commentmultiline', 'c': 'class', 'm': 'method', '{': 'jsObject', '[': 'jsArray', '@': 'jsPropertyOrValue', 'jst': 'jsonStatementTree', '_': 'call', '._': 'memberCall', '(': 'callOnValue', '.': 'memberAccess', '.[': 'memberAccessComputed', '||': 'or', '&&': 'and', 'op===': 'op_eq_strict', 'op!==': 'op_noteq_strict', 'op==': 'op_eq', 'op!=': 'op_noteq', 'op||': 'op_or', 'op&&': 'op_and', 'op-': 'op_minus', 'op': 'op_minus', 'op+': 'op_plus', 'op*': 'op_times', 'op/': 'op_div', 'op^': 'op_power', 'op%': 'op_mod', 'op|': 'op_xor', 'op&': 'op_xand', 'op>': 'op_gt', 'op>=': 'op_ge', 'op<': 'op_lt', 'op<=': 'op_le', '!!': 'assert', '!!=': 'assert_equal', 'log?': 'inspect', 'log-info': 'log_info', 'loginfo': 'log_info', 'it-async': 'itAsync', 'itasync': 'itAsync', 'before-async': 'beforeAsync', 'beforeasync': 'beforeAsync', 'before-each': 'beforeEach', 'beforeeach': 'beforeEach', 'after-async': 'afterAsync', 'afterasync': 'afterAsync', 'after-each': 'afterEach', 'aftereach': 'afterEach', '<': 'htmlelement' };
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString(value) || value.length === 0;
}
function isbool(value) {
    return value === 'true' || value === 'false';
}
function parsebool(value, defaultValue, node) {
    if (isEmpty(value)) return defaultValue;
    if (!isbool(value)) throw new nodeException('Must be a boolean value ("true" or "false"), got:' + value, node);
    return value === 'true' ? true : false;
}
function parsestring(value, defaultValue, node) {
    if (isEmpty(value)) return defaultValue;
    return value;
}
