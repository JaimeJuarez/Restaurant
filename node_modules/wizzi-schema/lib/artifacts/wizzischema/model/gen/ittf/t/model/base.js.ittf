$group

	class ${schema.wzId}Base
		ctor
			arg name
			arg sourceLineInfo
			set this.wzName = name || ''
			set this.wzParent = null
			set this.wzSourceLineInfo = sourceLineInfo
			set this.wzChildren = []

		m wzRoot
			return this.wzParent == null ? this : this.wzParent.wzRoot()

		m wzSourceFilepath
			arg sourceKey
			return this.wzRoot().loadContext.getSourceFilepath(sourceKey)

		m wzVerify
		m wzInitialize
		m wzInitializeAsync
			arg ctx
			arg callback
			_ callback(null)

		m wzAddChild
			arg node
			set node.wzParent = this
			set this.wzChildren.push(node)

		m wzLoadToChildColl
			arg child
			arg type
			arg coll
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.s))
			set item.wzTag = child.n
			set item.wzParent = this
			_ coll.push(item)
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true;

		m wzLoadToChildren
			arg child
			arg type
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.s))
			set item.wzTag = child.n
			set item.wzParent = this
			_ this.wzChildren.push(item)
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true

		m wzLoadOneToOne
			arg child
			arg type
			arg fieldName
			var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.s))
			set item.wzParent = this
			set this[fieldName] = item
			if item.loadFromNode
				_ item.loadFromNode(child)
			return true

		m error
			arg message
			arg node
			throw new md.${schema.wzId}Exception(message, node, this)

		$if request.toJson
			
			m toJsonProperties
				arg result
				set result.wzTag = this.wzTag
				set result.wzName = this.wzName

			m toJsonChildren
				arg result
				if this.wzChildren.length > 0
					var children = []
					foreach item in this.wzChildren 
						_ children.push(item.toJson())
					set result.wzChildren = children

		$if request.toXml
			
			m toXmlProperties
				arg xw
				_ xw.writeAttribute("wzTag", this.wzTag)
				_ xw.writeAttribute("wzName", this.wzName)

			m toXmlChildren
				arg xw
				if this.wzChildren.length > 0
					_ xw.startElement('wzChildren')
					foreach item in this.wzChildren 
						_ item.toXml(xw)
					_ xw.endElement()

		$if request.toPrettify
			
			m toPrettifyProperties
				arg ctx

			m toPrettifyChildren
				arg ctx
				if this.wzChildren.length > 0
					foreach item in this.wzChildren 
						_ item.toPrettify(xw)


	set md.${schema.wzId}Base = ${schema.wzId}Base

	$if request.toPrettify

		function startPrettify
			arg ctx
			set ctx.state
				{
					@ level 0
					@ line 0
			_ ctx.hb.setNoLF(true)
			_ ctx.hb.openTag('pre')
			_ ctx.hb.writeAttribute('class', 'prettyprint')
			_ ctx.hb.openTag('ol')
			_ ctx.hb.writeAttribute('class', 'linenums')

		function endPrettify
			arg ctx
			_ ctx.hb.closeTag('ol')
			_ ctx.hb.closeTag('pre')
			_ ctx.hb.setNoLF(false)
