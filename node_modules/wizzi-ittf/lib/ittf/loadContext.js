/*
    The ittf model load context
*/

var util = require('util');
var path = require('path');
var log = require("wizzi-core").log(module);
var verify = require("wizzi-core").verify;

// TODO
// describe source keys and model keys

/*
    loadContext : {
        ittfSources: Array,
        ittfDocumentDatas: Array, // of IttfDocumentModel
        sourceCount: Integer, 
        modelCount: Integer
    }
    
    ittfDocumentData : {
        ittfDocPath: String, // uri
        schema: String,
        sourceKey: sourceKey,
        modelKey: modelKey,
        ittfDocumentModel: ittfDocumentModelCloned,
        // ----
        evalContext: Object, //
        byRefParams: Array, // of String

    }
 */


function loadContext() {
    this.ittfSources = {};
    this.ittfDocumentDatas = {};
    this.sourceCount = 0;
    this.modelCount = 0;
}

/*
    The same IttfDocument can be mixed many times inside a Wizzi model.
    The ittfDocumentDatas collection stores a cloned instance of the loaded IttfDocumentModel,
    that is specific to a mixed document.
    Parameters passed to a document and variables declared in the document have
    document scope, so each cloned IttfDocumentModel has its local value context that will
    be associated to it (through the modelKey).
*/
loadContext.prototype.addIttfDocumentModel = function (ittfDocPath, schema, ittfDocumentModelCloned, options) {
    // console.log('loadContext.addIttfDocumentModel.ittfDocPath, schema', ittfDocPath, schema);
    var sourceKey = this.getSourceKey(ittfDocPath);
    if (options.include) {
        return {
            sourceKey: sourceKey,
            modelKey: options.includerModelKey,
        }
    } 
    var modelKey = 'f' + (++this.modelCount);
    var modelData = {
        ittfDocPath: ittfDocPath,
        schema: schema,
        sourceKey: sourceKey,
        modelKey: modelKey,
        ittfDocumentModel: ittfDocumentModelCloned
    };
    this.ittfDocumentDatas[modelKey] = modelData;
    return modelData;
}

loadContext.prototype.getIttfDocumentData = function (modelKey) {
    return this.ittfDocumentDatas[modelKey];
}

loadContext.prototype.addIttfSource = function (ittfDocPath, ittfDocumentModelOriginal) {
    var sourceKey = 'f' + (++this.sourceCount);
    var sourceData = { ittfDocPath: ittfDocPath, sourceKey: sourceKey, model: ittfDocumentModelOriginal };
    this.ittfSources[sourceKey] = sourceData;
    return sourceData; 
}

loadContext.prototype.getSourceFilepath = function (sourceKey) {
    var sourceData = this.ittfSources[sourceKey];
    return sourceData ? sourceData.ittfDocPath : 'Source ittfDocPath unknown';
}

loadContext.prototype.getSourceKey = function (ittfDocPath) {
    for (var k in this.ittfSources) {
        if (this.ittfSources[k].ittfDocPath === ittfDocPath) {
            return k;
        }
    }
    return null;
}

loadContext.prototype.getSourceData = function (sourceKey) {
    return this.ittfSources[sourceKey];
}

loadContext.prototype.getSources = function () {
    var ret = [];
    for (var k in this.ittfSources) {
        ret.push()
        if (this.ittfSources[k].ittfDocPath === ittfDocPath) {
            return k;
        }
    }
    return ret;
}

module.exports = loadContext;

