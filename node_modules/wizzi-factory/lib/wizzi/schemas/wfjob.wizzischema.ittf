wizzischema wfjob
	
	# A schema modeling a wizzi factory job.

	export-to json
	
	e wfjob
		
		# The root element of the wfjob schema.
		
		a_tag( modelsBaseFolder, models-base-folder )
			# The base path for the source models used by this @wfjob@.
		
		a_tag( destBaseFolder, dest-base-folder )
			# The base folder path for the generated artifacts.

		r require/s
		r model/s
		r line/s
		r production/s

	e require

		# Requires a WizziFactoryPackage.
		# The wzName is the package name. If the package is not globally installed
		# must be a fully qualified path.

	e model

		# A Wizzi model instance acting as a data context during the evaluation of another @model@
		# or during an artifact generation.
		# The wzName of the model must be unique in a @wfjob@; it will become the default export name of the context
		# value that exposes the model during evaluations. 
		# A @model@ will be loaded once, and will be reused if
		# referenced in many evaluations.

		a src
			# The path to the primary Ittf document of the @model@.
			# When relative, the base path is the @modelsBasePath@
			# declared on the @wfjob@ element.
		
		a schema
			# The name of the Wizzi schema that will validate the @model@.
		
		r modelRef/s
			# References to @model@ instances acting as data context during this @model@ evaluation step.
			# A @model@ is referenced by its wzName.
	
	e transformer
		# A model transformer 

	e_tag( modelRef, model-ref )
		
		a_tag( exportName, export-name )
			# The name of the context property that will expose the loaded model during
			# an evaluation. Overrides the wzName of the @model@ that is  the default export name.
		
		r transformer/s
			# A model may have one or more transformers.
			# Transformers are chained and the output of a transformation
			# is the input for the next one.

		r modelCollection/s
			# TODO This is a one-to-one relation, not yet implemented.
			# Single items of a collection contained in the @model@ may act as data contexts
			# of artifacts where each collection item generates a separate artifact.
		
		m wzinitialize

			if this.modelCollections.length > 0
				
				set this.modelCollection = this.modelCollections[0]
				set this.collName = this.modelCollection.wzName
				set this.collItemName = this.modelCollection.itemName
				set this.collPathTemplateValues = []
				
				foreach item in this.modelCollection.pathTemplateValues
					_ this.collPathTemplateValues.push
						{
							@ token item.token
							@ attribute item.attribute
							@ function item.function

				$$ log 'this.modelCollection.wzName', this.modelCollection.wzName
				$$ log 'this.collName', this.collName
				$$ log 'this.collItemName', this.collItemName
	
	e_tag( modelCollection, model-coll )
		
		# Single items of a collection contained in a @model@ may act as data contexts
		# of artifacts where each collection item generates a separate artifact.
		# This element, contained in a @model@ element, specifies:
		# . the collection name: the wzName of this element
		# . the export name of the collection item when acting as a data context: the @item-name@ attribute
		# . the property names of the collection item that will be used to build the destination path
		#   of the artifact: the @pathTemplateValues@ child elements
		
		a_tag( itemName, item-name )
			# The export name of a collection item when acting as a data context.
		
		r pathTemplateValue/s
	
	e_tag( pathTemplateValue, path-template-value )
		a attribute
			# The property of the context object (a collection item) containing the value which will replace 
			# the @token@ value in the generated artifact path template.
			# Is alternative to @function@
		a function
			# The function of the context object (a collection item) that returns the value which will replace 
			# the @token@ value in the generated artifact path template.
			# Is alternative to @attribute@
		a token
			# The token that will be replaced by the value returned accessing @attribute@ or calling @function@
			# on a context object.
	
	e line
		# A line is a group of artifacts having the same cwd folder.
		
		a_tag( cwdFolder, cwd-folder )
			# The source folder of the artifacts of this line. 
		
		a_tag( destFolder, dest-folder )
			# The destination folder of the generated artifacts of this line. 
			# Overrides the production destFolder.
		
		r artifact/s
			# The artifacts of the @line@
	
	e_tag( lineRef, line-ref )
		
		# A reference to a line.
	
	e artifact
		
		# An artifact, part of a @line@.
		#
		# Can be one of:
		# . A Wizzi model instance, acting as a template, which schema targets a code language technology.
		# . A swig template.
		# . A code write generation that takes in input a context of one or more Wizzi model instances.
		# . A final artifact to be copied to a destination folder without transformations.
		#
		# Context value objects for template transformations are declared in the @model@ element of the @wfjob@
		# and are referenced in the @artifact@ child elements @modelRef@.
		# 
		# The @src@ or @destPath@ attributes of an @artifact@ element may contain tokens enclosed in graph parens.
		# When one of the @modelRef@s is a collection model, the artifact generation is repeated
		# for each item of the collection and the @src@ or @destPath@ attributes become the template of the destination path.
		# See the @pathTemplateValues@ child elements of the referenced @model@ for the values that will replace the tokens.
		#
		# Example
		#
		# artifact
		#     src app/db/{table}Datalayer.js.ittf
		#     ...
		#     model-ref rdbms
		#
		# model rdbms
		#     ...
		#     model-coll tables
		#         item.name table
		#         path-template-value
		#             attribute tableName
		#             token table
		#
		# the Wizzi model instance after loading rdbms: {
		#     ....
		#     tables: [{
		#         tableName: 'user',
		#         ...
		#     },{
		#        ...
		#     }]
		# }
		#
		# will produce an artifact of path .../app/db/userDatalayer.js, and as many as the items in the tables collection.
		#
				
		a src
			# The path to the primary source document of the artifact.
			# If relative, the base path is the cwdFolder of the parent line.
			# If the artifact is a code write artifact the @src@ attribute must not be declared.
		
		a schema
			# When the artifact source is an Ittf document, is the schema that will load and validate the Wizzi model instance.
			# May be null if the artifact is a swig template or a final artifact.
		
		a generator
			# When the artifact is a Wizzi model instance, acting as a template is the name of 
			# the artifact generator that will transform the template.
			# When the artifact is a 'swig template' must contain 'swig'.
			# When the artifact is a code write generation or a final artifact must be omitted.
		
		a_tag( destPath, dest-path )
			# The artifact source file path (@src@) is the default relative destination path
			# of the generated artifact. When set, this attribute overrides the default.
			# It may be an absolute path.
			# If the artifact is a code write generation the @destPath@ attribute must be declared.
		
		a extension
			# The document path extension of the generated artifact. Optional. The default is the #src# extension
			# without the ending '.ittf' string, if present.
		
		r modelRef/s
			# References to Wizzi model instances acting as transformation contexts for both wizzi and swig templates.
			# When a final artifact must not be declared.

	e production
		# A job execution unit that generates a set of Software artifacts into one destination folder.
		
		a_tag( destFolder, dest-folder )
			# The destination folder of the generated artifacts.
		
		r modelRef/s
			# References to the Wizzi model instances used by this @production@.
		
		r lineRef/s
			# References to the @line@s to be generated.
		
		m wzinitialize
			
			set this.wfjob = this.wzParent;
			
			foreach modelRef in this.modelRefs
				$$ log 'production.wzinitialize.modelRef', modelRef.wzName
				var model = this.wfjob.getModel(modelRef.wzName)
				if model == null
					_ this.error('Model ' + modelRef.wzName + ' not found.', modelRef)
				set modelRef.___model = model

			set this.lines = [];
			
			foreach lineRef in this.lineRefs
				$$ log 'production.wzinitialize.lineRef', lineRef.wzName
                var line = this.wfjob.getLine(lineRef.wzName)
				if line == null
					_ this.error('line ' + lineRef.wzName + ' not found.', lineRef)
				_ this.lines.push(line)
				
				foreach artifact in line.artifacts
					$$ log 'production.wzinitialize.artifact', artifact.wzName
					
					foreach modelRef in artifact.modelRefs
						$$ log 'production.wzinitialize.artifact.modelRef', modelRef.wzName
						var model = this.wfjob.getModel(modelRef.wzName)
						if model == null
							_ this.error('Model ' + modelRef.wzName + ' not found.', modelRef)
						set modelRef.___model = model;
