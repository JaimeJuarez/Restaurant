// generator: wizzi-lab-artifatcs/lib/js/module/gen/main.js, utc time: Thu, 22 Oct 2015 19:39:41 GMT
var path = require('path');
var util = require('util');
var async = require('async');
var verify = require("wizzi-core").verify;
var log = require("wizzi-core").log(module);
var legacy = require("wizzi-legacy");
var index = require('../../index');
var Repository = require('../services/repository');
var ArtifactInfo = require('../artifact/artifactinfo');
var pkgLoader = require('./wfpackageloader');
var Runner = require('./runner');
var WfJob = require('./wfjob');
var ArtifactPersister = require('./persister');
var ProductionContext = require('./context');
// ProductionManager class
ProductionManager = function(options) {
    this.options = options;
    this.artifactInfos = [];
    this.wfJobConfigs = [];
    this.repository = new Repository();
    this.repository.registerWizziFactoryPackage(index);
    this.repository.registerWizziFactoryPackage(legacy);
    this.productionContext = new ProductionContext();
    log.setLevel(options.verbose || 0);
    this.___state = {
        models: {}, 
        pman: this, 
        pcx: this.productionContext
    };
}
ProductionManager.prototype.addArtifactInfo = function(artifactInfo) {
    if (ArtifactInfo.isArtifactConfig(artifactInfo)) {
        this.artifactInfos.push(new ArtifactInfo(artifactInfo));
    }
    else if (ArtifactInfo.isArtifactInstance(artifactInfo)) {
        this.artifactInfos.push(artifactInfo);
    }
    else {
        throw new Error('ProductionManager.addArtifactInfo is not an artifact info: ' + util.inspect(artifactInfo));
    }
}
ProductionManager.prototype.addWfJob = function(wfJobConfig) {
    this.wfJobConfigs.push(wfJobConfig);
}
ProductionManager.prototype.registerWizziFactoryPackage = function(wizziModule) {
    this.repository.registerWizziFactoryPackage(wizziModule);
}
ProductionManager.prototype.getWizziModelLoader = function(schemaName) {
    return this.repository.getWizziModelLoader(schemaName);
}
ProductionManager.prototype.getWizziSchemaObject = function(schemaName) {
    return this.repository.getWizziSchemaObject(schemaName);
}
ProductionManager.prototype.getModelTransformer = function(transName) {
    return this.repository.getModelTransformer(transName);
}
ProductionManager.prototype.getArtifactGenerator = function(artifactName) {
    return this.repository.getArtifactGenerator(artifactName);
}
ProductionManager.prototype.initialize = function(callback) {
    log.info('Initialize');
    this.___state = {
        models: {}, 
        pman: this, 
        pcx: this.productionContext
    };
    var i, i_len=this.wfJobConfigs.length, jobConfig;
    for (i=0; i<i_len; i++) {
        jobConfig = this.wfJobConfigs[i];
        var wfjobSrc = jobConfig.wfjob.src;
        var job = new WfJob(this, jobConfig);
        var self = this;
        job.getArtifactInfos(function(err, result) {
            if (err) {
                return callback(err);
            }
            var requires = result[0];
            console.log('requires', requires);
            var j, j_len=requires.length, r;
            for (j=0; j<j_len; j++) {
                r = requires[j];
                var factoryPackage = pkgLoader.load(r, path.dirname(wfjobSrc));
                self.registerWizziFactoryPackage(factoryPackage);
            }
            var artinfos = result[1];
            var j, j_len=artinfos.length, artInfo;
            for (j=0; j<j_len; j++) {
                artInfo = artinfos[j];
                self.addArtifactInfo(artInfo);
            }
            var j, j_len=self.artifactInfos.length, artInfo;
            for (j=0; j<j_len; j++) {
                artInfo = self.artifactInfos[j];
                artInfo.initialize(self);
            }
            callback(null, null);
        });
    }
}
ProductionManager.prototype.run = function(callback) {
    log.info('Start run');
    var self = this;
    this.initialize(function(err, result) {
        if (err) {
            return callback(err);
        }
        async.map(self.artifactInfos, AsyncRunner.run, function(err, result) {
            if (err) {
                return callback(err);
            }
            self.artifactInfos = result;
            self.terminate();
            log.info('End run');
            callback(null, result);
        });
    });
}
ProductionManager.prototype.terminate = function() {
    log.info('Terminate');
}
ProductionManager.prototype.persistToFile = function(callback) {
    log.info('Start persistToFile');
    var self = this;
    async.map(self.artifactInfos, AsyncPersisterToFile.run, function(err, result) {
        if (err) {
            return callback(err);
        }
        log.info('End persistToFile');
        callback(null, result);
    });
}
ProductionManager.prototype.relPath = function(filepath) {
    return filepath.substr(this.options.basedir.length + 1);
}

var AsyncRunner = {
    run: function(artifactInfo, callback) {
        log.info('Started async run artifact: ' + artifactInfo.name);
        var runner = new Runner(artifactInfo);
        runner.run(function(err, result) {
            if (err) {
                return callback(err);
            }
            log.info('Ended async run artifact: ' + artifactInfo.name);
            callback(null, result);
        });
    }
};
var AsyncPersisterToFile = {
    run: function(artifactInfo, callback) {
        log.info('Started async persist to file artifact: ' + artifactInfo.name);
        var persister = new ArtifactPersister(artifactInfo);
        persister.toFile(function(err, result) {
            if (err) {
                return callback(err);
            }
            log.info('Ended async persist to file artifact: ' + artifactInfo.name);
            callback(null, result);
        });
    }
};
module.exports = ProductionManager;
